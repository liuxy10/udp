
INT8_MAX = 0x7F
INT8_MIN = -INT8_MAX - 1
UINT8_MAX = INT8_MAX * 2 + 1
INT16_MAX = 32767
INT16_MIN = -INT16_MAX - 1
UINT16_MAX = 65535
INT32_MAX = 2147483647
INT32_MIN = -INT32_MAX - 1
UINT32_MAX = 4294967295
REAL32_MIN = -16777216
REAL32_MAX = 16777215
REAL64_MIN = -4503599627370496
REAL64_MAX = 4503599627370495
CHRFLAGS_READ = 1
chrflags_read = {'name': 'READ', 'description': 'Read flag for characteristic', 'value': CHRFLAGS_READ}
CHRFLAGS_WRITE = 2
chrflags_write = {'name': 'WRITE', 'description': 'Write flag for characteristic', 'value': CHRFLAGS_WRITE}
CHRFLAGS_RW = 3
chrflags_rw = {'name': 'RW', 'description': 'Read write flag for characteristic', 'value': CHRFLAGS_RW}
CHRFLAGS_NOTIFY = 4
chrflags_notify = {'name': 'NOTIFY', 'description': 'Notify flag for characteristic', 'value': CHRFLAGS_NOTIFY}
SRV_COMM = 170
srv_comm = {'name': 'COMM', 'description': 'The comm service', 'value': SRV_COMM}
DATATYPE_UNKNOWN = 0
datatype_unknown = {'name': 'UNKNOWN', 'description': 'Unknown datatype', 'value': DATATYPE_UNKNOWN}
DATATYPE_SIGNED = 16
datatype_signed = {'name': 'SIGNED', 'description': 'Signed datatype', 'value': DATATYPE_SIGNED}
DATATYPE_INT = 32
datatype_int = {'name': 'INT', 'description': 'Integer ', 'value': DATATYPE_INT}
DATATYPE_REAL = 64
datatype_real = {'name': 'REAL', 'description': 'Real or floating point data', 'value': DATATYPE_REAL}
DATATYPE_OTHER = 128
datatype_other = {'name': 'OTHER', 'description': 'Other type of data', 'value': DATATYPE_OTHER}
DATATYPE__8BIT = 1
datatype__8bit = {'name': '_8BIT', 'description': '8 bit size', 'value': DATATYPE__8BIT}
DATATYPE__16BIT = 2
datatype__16bit = {'name': '_16BIT', 'description': '16 bit size', 'value': DATATYPE__16BIT}
DATATYPE__32BIT = 4
datatype__32bit = {'name': '_32BIT', 'description': '32 bit size', 'value': DATATYPE__32BIT}
DATATYPE__64BIT = 8
datatype__64bit = {'name': '_64BIT', 'description': '33 bit size', 'value': DATATYPE__64BIT}
DATATYPE_UINT8 = DATATYPE_INT | DATATYPE__8BIT
datatype_uint8 = {'name': 'UINT8', 'description': 'Unsinged 8 bit integer', 'value': DATATYPE_UINT8}
DATATYPE_UINT16 = DATATYPE_INT | DATATYPE__16BIT
datatype_uint16 = {'name': 'UINT16', 'description': 'Unsinged 16 bit integer', 'value': DATATYPE_UINT16}
DATATYPE_UINT32 = DATATYPE_INT | DATATYPE__32BIT
datatype_uint32 = {'name': 'UINT32', 'description': 'Unsinged 32 bit integer', 'value': DATATYPE_UINT32}
DATATYPE_UINT64 = DATATYPE_INT | DATATYPE__64BIT
datatype_uint64 = {'name': 'UINT64', 'description': 'Unsinged 32 bit integer', 'value': DATATYPE_UINT64}
DATATYPE_INT8 = DATATYPE_INT | DATATYPE__8BIT | DATATYPE_SIGNED
datatype_int8 = {'name': 'INT8', 'description': 'Signed 8 bit integer', 'value': DATATYPE_INT8}
DATATYPE_INT16 = DATATYPE_INT | DATATYPE__16BIT | DATATYPE_SIGNED
datatype_int16 = {'name': 'INT16', 'description': 'Signed 16 bit integer', 'value': DATATYPE_INT16}
DATATYPE_INT32 = DATATYPE_INT | DATATYPE__32BIT | DATATYPE_SIGNED
datatype_int32 = {'name': 'INT32', 'description': 'Signed 32 bit integer', 'value': DATATYPE_INT32}
DATATYPE_INT64 = DATATYPE_INT | DATATYPE__64BIT | DATATYPE_SIGNED
datatype_int64 = {'name': 'INT64', 'description': 'Signed 32 bit integer', 'value': DATATYPE_INT64}
DATATYPE_REAL32 = DATATYPE_REAL | DATATYPE__32BIT
datatype_real32 = {'name': 'REAL32', 'description': '32 bit floating point number, single', 'value': DATATYPE_REAL32}
DATATYPE_REAL64 = DATATYPE_REAL | DATATYPE__64BIT
datatype_real64 = {'name': 'REAL64', 'description': '64 bit floating point number, single', 'value': DATATYPE_REAL64}
DATATYPE_BOOL = DATATYPE_OTHER | DATATYPE__8BIT
datatype_bool = {'name': 'BOOL', 'description': '8 bits, yes=1, no=0, a special integer', 'value': DATATYPE_BOOL}
DATATYPE_DATETIME32 = DATATYPE_OTHER | DATATYPE__32BIT
datatype_datetime32 = {'name': 'DATETIME32', 'description': 'Datetime, 32 bits, seconds since epoc', 'value': DATATYPE_DATETIME32}
DATATYPE_DATETIME64 = DATATYPE_OTHER |DATATYPE__64BIT
datatype_datetime64 = {'name': 'DATETIME64', 'description': 'Datetime, 64 bits, milli seconds since epoc', 'value': DATATYPE_DATETIME64}
DATATYPE_TEXT = DATATYPE_OTHER + 16
datatype_text = {'name': 'TEXT', 'description': 'UTF8 zero terminated string', 'value': DATATYPE_TEXT}
DATATYPE_BUFFER = DATATYPE_OTHER + 64 
datatype_buffer = {'name': 'BUFFER', 'description': 'Buffer of UINT8', 'value': DATATYPE_BUFFER}
SYSTEM_EVENT_ACK = 1
system_event_ack = {'name': 'EVENT_ACK', 'description': 'System ACK for an event', 'value': SYSTEM_EVENT_ACK}
SYSTEM_EVENT_PING = 2
system_event_ping = {'name': 'EVENT_PING', 'description': 'Ping other device', 'value': SYSTEM_EVENT_PING}
SYSTEM_EVENT_SHUTDOWN_NOTIFICATION = 3
system_event_shutdown_notification = {'name': 'EVENT_SHUTDOWN_NOTIFICATION', 'description': 'Shutoff notification', 'value': SYSTEM_EVENT_SHUTDOWN_NOTIFICATION}
SYSTEM_EVENT_ON = 4
system_event_on = {'name': 'EVENT_ON', 'description': 'System is ON', 'value': SYSTEM_EVENT_ON}
SYSTEM_EVENT_OFF = 5
system_event_off = {'name': 'EVENT_OFF', 'description': 'System is OFF', 'value': SYSTEM_EVENT_OFF}
SYSTEM_EVENT_SLEEP = 6
system_event_sleep = {'name': 'EVENT_SLEEP', 'description': 'System is sleeping', 'value': SYSTEM_EVENT_SLEEP}
SYSTEM_EVENT_HIBERNATE = 7
system_event_hibernate = {'name': 'EVENT_HIBERNATE', 'description': 'System is hibernating', 'value': SYSTEM_EVENT_HIBERNATE}
SYSTEM_EVENT_WAKE = 8
system_event_wake = {'name': 'EVENT_WAKE', 'description': 'System is a wake after hibernating', 'value': SYSTEM_EVENT_WAKE}
SYSTEM_EVENT_TEST_MODE = 9
system_event_test_mode = {'name': 'EVENT_TEST_MODE', 'description': 'System is in test mode', 'value': SYSTEM_EVENT_TEST_MODE}
SYSTEM_EVENT_RESTART = 10
system_event_restart = {'name': 'EVENT_RESTART', 'description': 'Restart the mcu', 'value': SYSTEM_EVENT_RESTART}
SYSTEM_EVENT_ALLOW_DOWNLOAD = 16
system_event_allow_download = {'name': 'EVENT_ALLOW_DOWNLOAD', 'description': 'Allow download of a new firmware', 'value': SYSTEM_EVENT_ALLOW_DOWNLOAD}
SYSTEM_BLE_CONNECTED = 32
system_ble_connected = {'name': 'BLE_CONNECTED', 'description': 'A client has connected via bluetooth', 'value': SYSTEM_BLE_CONNECTED}
SYSTEM_BLE_DISCONNECTED = 33
system_ble_disconnected = {'name': 'BLE_DISCONNECTED', 'description': 'A client has disconnected via bluetooth', 'value': SYSTEM_BLE_DISCONNECTED}
SYSTEM_BLE_CONNECTING = 34
system_ble_connecting = {'name': 'BLE_CONNECTING', 'description': 'A client is trying to connect via bluetooth', 'value': SYSTEM_BLE_CONNECTING}
SYSTEM_BLE_CONNECTION_FAIL = 35
system_ble_connection_fail = {'name': 'BLE_CONNECTION_FAIL', 'description': 'Failed to connect', 'value': SYSTEM_BLE_CONNECTION_FAIL}
SYSTEM_LOG_MESSAGE = 48
system_log_message = {'name': 'LOG_MESSAGE', 'description': 'Log message', 'value': SYSTEM_LOG_MESSAGE}
SYSTEM_LOG_DUMP = 49
system_log_dump = {'name': 'LOG_DUMP', 'description': 'Dump log to client', 'value': SYSTEM_LOG_DUMP}
SYSTEM_LOG_DEBUG = 50
system_log_debug = {'name': 'LOG_DEBUG', 'description': 'Send debug information', 'value': SYSTEM_LOG_DEBUG}
SYSTEM_LOG_VARIABLE = 51
system_log_variable = {'name': 'LOG_VARIABLE', 'description': 'Log variable', 'value': SYSTEM_LOG_VARIABLE}
SYSTEM_LOG_VARIABLE_HEADER = 52
system_log_variable_header = {'name': 'LOG_VARIABLE_HEADER', 'description': 'Log variable systick header', 'value': SYSTEM_LOG_VARIABLE_HEADER}
SYSTEM_LOG_VARIABLE_BODY = 53
system_log_variable_body = {'name': 'LOG_VARIABLE_BODY', 'description': 'Log variable systick body', 'value': SYSTEM_LOG_VARIABLE_BODY}
SYSTEM_BATTERY_LEVEL = 64
system_battery_level = {'name': 'BATTERY_LEVEL', 'description': 'Send battery level in percentage 0-100 (uint8)', 'value': SYSTEM_BATTERY_LEVEL}
SYSTEM_DEVICE_SOFTWARE_VERSION = 65
system_device_software_version = {'name': 'DEVICE_SOFTWARE_VERSION', 'description': 'Get external cpu software version', 'value': SYSTEM_DEVICE_SOFTWARE_VERSION}
SYSTEM_DEVICE_SERIAL_NUMBER = 66
system_device_serial_number = {'name': 'DEVICE_SERIAL_NUMBER', 'description': 'Get external cpu serial number', 'value': SYSTEM_DEVICE_SERIAL_NUMBER}
SYSTEM_DEVICE_HARDWARE_VERSION = 67
system_device_hardware_version = {'name': 'DEVICE_HARDWARE_VERSION', 'description': 'Get hardware version', 'value': SYSTEM_DEVICE_HARDWARE_VERSION}
SYSTEM_BATTERY_CHARGING_START = 80
system_battery_charging_start = {'name': 'BATTERY_CHARGING_START', 'description': 'Charging has started', 'value': SYSTEM_BATTERY_CHARGING_START}
SYSTEM_BATTERY_CHARGING_STOP = 81
system_battery_charging_stop = {'name': 'BATTERY_CHARGING_STOP', 'description': 'Charging has stopped', 'value': SYSTEM_BATTERY_CHARGING_STOP}
SYSTEM_BATTERY_CHARGING_ERROR = 82
system_battery_charging_error = {'name': 'BATTERY_CHARGING_ERROR', 'description': 'Not able to charge due to charging error', 'value': SYSTEM_BATTERY_CHARGING_ERROR}
SYSTEM_BATTERY_WARNING_LOW = 83
system_battery_warning_low = {'name': 'BATTERY_WARNING_LOW', 'description': 'ui battery warning low', 'value': SYSTEM_BATTERY_WARNING_LOW}
SYSTEM_BATTERY_WARNING_SERIOUS = 84
system_battery_warning_serious = {'name': 'BATTERY_WARNING_SERIOUS', 'description': 'ui battery warning serious', 'value': SYSTEM_BATTERY_WARNING_SERIOUS}
SYSTEM_BATTERY_WARNING_CRITICAL = 85
system_battery_warning_critical = {'name': 'BATTERY_WARNING_CRITICAL', 'description': 'ui battery warning critical', 'value': SYSTEM_BATTERY_WARNING_CRITICAL}
SYSTEM_BATTERY_WARNING_SHUTOFF = 86
system_battery_warning_shutoff = {'name': 'BATTERY_WARNING_SHUTOFF', 'description': 'ui battery warning shutoff', 'value': SYSTEM_BATTERY_WARNING_SHUTOFF}
SYSTEM_CALIBRATION_START = 96
system_calibration_start = {'name': 'CALIBRATION_START', 'description': 'Calibration start', 'value': SYSTEM_CALIBRATION_START}
SYSTEM_CALIBRATION_SIGNAL = 97
system_calibration_signal = {'name': 'CALIBRATION_SIGNAL', 'description': 'Calibration signal user', 'value': SYSTEM_CALIBRATION_SIGNAL}
SYSTEM_CALIBRATION_STATUS = 98
system_calibration_status = {'name': 'CALIBRATION_STATUS', 'description': 'Calibration status in percentage 0-100', 'value': SYSTEM_CALIBRATION_STATUS}
SYSTEM_CALIBRATION_FINISH = 99
system_calibration_finish = {'name': 'CALIBRATION_FINISH', 'description': 'Calibration finished', 'value': SYSTEM_CALIBRATION_FINISH}
SYSTEM_CALIBRATION_ERROR = 100
system_calibration_error = {'name': 'CALIBRATION_ERROR', 'description': 'Calibration error', 'value': SYSTEM_CALIBRATION_ERROR}
SYSTEM_ERROR = 112
system_error = {'name': 'ERROR', 'description': 'error', 'value': SYSTEM_ERROR}
SYSTEM_ERROR_SHUTOFF = 113
system_error_shutoff = {'name': 'ERROR_SHUTOFF', 'description': 'Error forces a shutoff', 'value': SYSTEM_ERROR_SHUTOFF}
SYSTEM_UI_BUTTON_PRESS_SINGLE = 128
system_ui_button_press_single = {'name': 'UI_BUTTON_PRESS_SINGLE', 'description': 'Button was pressed once', 'value': SYSTEM_UI_BUTTON_PRESS_SINGLE}
SYSTEM_UI_BUTTON_PRESS_DOUBLE = 129
system_ui_button_press_double = {'name': 'UI_BUTTON_PRESS_DOUBLE', 'description': 'Button was double pressed', 'value': SYSTEM_UI_BUTTON_PRESS_DOUBLE}
SYSTEM_UI_BUTTON_HOLD_SHORT = 130
system_ui_button_hold_short = {'name': 'UI_BUTTON_HOLD_SHORT', 'description': 'Short hold on button', 'value': SYSTEM_UI_BUTTON_HOLD_SHORT}
SYSTEM_UI_BUTTON_HOLD_LONG = 131
system_ui_button_hold_long = {'name': 'UI_BUTTON_HOLD_LONG', 'description': 'Long hold on button', 'value': SYSTEM_UI_BUTTON_HOLD_LONG}
SYSTEM_UI_BEEP_ONCE = 132
system_ui_beep_once = {'name': 'UI_BEEP_ONCE', 'description': 'Beep buzzer once', 'value': SYSTEM_UI_BEEP_ONCE}
SYSTEM_UI_BLINK_ONCE = 133
system_ui_blink_once = {'name': 'UI_BLINK_ONCE', 'description': 'Blink led once', 'value': SYSTEM_UI_BLINK_ONCE}
SYSTEM_UI_VIBRATE_ONCE = 134
system_ui_vibrate_once = {'name': 'UI_VIBRATE_ONCE', 'description': 'Vibrate once', 'value': SYSTEM_UI_VIBRATE_ONCE}
SYSTEM_UI_BUTTON_EVENT = 135
system_ui_button_event = {'name': 'UI_BUTTON_EVENT', 'description': 'Button event not applicable', 'value': SYSTEM_UI_BUTTON_EVENT}
SYSTEM_DEVICE_BONDING_PASSCODE = 136
system_device_bonding_passcode = {'name': 'DEVICE_BONDING_PASSCODE', 'description': 'BLE bonding passcode', 'value': SYSTEM_DEVICE_BONDING_PASSCODE}
SYSTEM_DEVICE_RESET_REQUEST = 137
system_device_reset_request = {'name': 'DEVICE_RESET_REQUEST', 'description': 'Expansion board is requesting a reset', 'value': SYSTEM_DEVICE_RESET_REQUEST}
SYSTEM_PACKET_RECEIVE_SUCCESSFUL = 138
system_packet_receive_successful = {'name': 'PACKET_RECEIVE_SUCCESSFUL', 'description': 'Expansion board successfully received a packet from main', 'value': SYSTEM_PACKET_RECEIVE_SUCCESSFUL}
SYSTEM_PACKET_RECEIVE_FAIL = 139
system_packet_receive_fail = {'name': 'PACKET_RECEIVE_FAIL', 'description': 'Expansion board failed to receive a packet from main', 'value': SYSTEM_PACKET_RECEIVE_FAIL}
SYSTEM_DEVICE_MODEL_NUMBER = 140
system_device_model_number = {'name': 'DEVICE_MODEL_NUMBER', 'description': 'Get the model number', 'value': SYSTEM_DEVICE_MODEL_NUMBER}
VARFLAGS_READ = 1
varflags_read = {'name': 'READ', 'description': 'Variable can be read', 'value': VARFLAGS_READ}
VARFLAGS_WRITE = 2
varflags_write = {'name': 'WRITE', 'description': 'Variable can be written', 'value': VARFLAGS_WRITE}
VARFLAGS_RW = 3
varflags_rw = {'name': 'RW', 'description': 'Variable can be read and written to', 'value': VARFLAGS_RW}
VARFLAGS_MANDATORY = 16
varflags_mandatory = {'name': 'MANDATORY', 'description': 'Variable is mandatory for device', 'value': VARFLAGS_MANDATORY}
DEVICE_UNKNOWN = 0
device_unknown = {'name': 'UNKNOWN', 'description': 'Unknown device', 'value': DEVICE_UNKNOWN}
DEVICE_BASE = 16
device_base = {'name': 'BASE', 'description': 'Base device', 'value': DEVICE_BASE}
DEVICE_LEG = DEVICE_BASE | 0x20
device_leg = {'name': 'LEG', 'description': 'Leg device', 'value': DEVICE_LEG}
DEVICE_KNEE = DEVICE_LEG | 0x40
device_knee = {'name': 'KNEE', 'description': 'Knee device', 'value': DEVICE_KNEE}
DEVICE_FOOT = DEVICE_LEG | 0x80
device_foot = {'name': 'FOOT', 'description': 'Foot device', 'value': DEVICE_FOOT}
DEVICE_HIP = DEVICE_LEG | 0xC0
device_hip = {'name': 'HIP', 'description': 'Hip device', 'value': DEVICE_HIP}
DEVICE_PROPRIO_FOOT = DEVICE_FOOT | 0x1
device_proprio_foot = {'name': 'PROPRIO_FOOT', 'description': 'Proprio foot device', 'value': DEVICE_PROPRIO_FOOT, 'metadata': {'platforms': [{'name': 'PSX01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'Default', 'serialNumbers': ['^(HF)?20[3-9][0-9]{3}$', '^(HF)?39[0-9]{4}$']}]}]}}
DEVICE_POWER_KNEE = DEVICE_KNEE | 0x1
device_power_knee = {'name': 'POWER_KNEE', 'description': 'Power knee device', 'value': DEVICE_POWER_KNEE, 'metadata': {'platforms': [{'name': 'PKA01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'Dynamic', 'serialNumbers': ['^(HF)?52[0-9]{4}$', '^(HF)?51[1-9][0-9]{3}$', '^(HF)?151[1-9][0-9]{2}$']}]}, {'name': 'MBA01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'MobiliKnee', 'serialNumbers': ['^(HF)?54[0-9]{4}$']}]}]}}
DEVICE_RHEO_KNEE = DEVICE_KNEE | 0x2
device_rheo_knee = {'name': 'RHEO_KNEE', 'description': 'Rheo knee device', 'value': DEVICE_RHEO_KNEE, 'metadata': {'platforms': [{'name': 'RKA01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'Dynamic', 'serialNumbers': ['^(HF)?141[1-9][0-9]{2}$']}, {'name': 'Dynamic', 'serialNumbers': ['^(HF)?74[0-9]{4}$']}]}, {'name': '3', 'supportsBaseDisFirmwareRevision': False, 'families': [{'name': 'Default', 'serialNumbers': ['^3[45][0-9]{4}$']}]}, {'name': 'XC', 'supportsBaseDisFirmwareRevision': False, 'families': [{'name': 'Default', 'serialNumbers': ['^36[0-9]{4}$']}]}, {'name': 'WP', 'supportsBaseDisFirmwareRevision': False, 'families': [{'name': 'Default', 'serialNumbers': ['^3[78][0-9]{4}$']}]}]}}
DEVICE_ACTIVITY_MONITOR = DEVICE_BASE |0x1
device_activity_monitor = {'name': 'ACTIVITY_MONITOR', 'description': 'Activity monitor', 'value': DEVICE_ACTIVITY_MONITOR}
DEVICE_HEART_RATE_MONITOR = DEVICE_BASE| 0x2
device_heart_rate_monitor = {'name': 'HEART_RATE_MONITOR', 'description': 'Heart rate monitor', 'value': DEVICE_HEART_RATE_MONITOR}
DEVICE_SENSOR_TAG = DEVICE_BASE | 0x3
device_sensor_tag = {'name': 'SENSOR_TAG', 'description': 'Texas Instruments Sensor Tag', 'value': DEVICE_SENSOR_TAG}
DEVICE_TOOLBOX_SERVER = DEVICE_BASE | 0x5
device_toolbox_server = {'name': 'TOOLBOX_SERVER', 'description': 'Ossur Toolbox Server', 'value': DEVICE_TOOLBOX_SERVER, 'metadata': {'platforms': [{'name': 'TBS01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'Dynamic', 'serialNumbers': ['^(HF)?18888[0-9]$']}]}]}}
DEVICE_BSMB = DEVICE_BASE | 0x4
device_bsmb = {'name': 'BSMB', 'description': 'Bionic System Message Broker', 'value': DEVICE_BSMB, 'metadata': {'platforms': [{'name': 'BSM01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'PICS', 'serialNumbers': ['^(HF)?210[0-9]{3}$', '^(HF)?210[1-9][0-9]{2}$']}, {'name': 'DONGLE', 'serialNumbers': ['^(HF)?200[0-9]{3}$', '^(HF)?200[1-9][0-9]{2}$']}]}]}}
DEVICE_APO = DEVICE_HIP | 0x1
device_apo = {'name': 'APO', 'description': 'Active Pelvis Orthosis', 'value': DEVICE_APO, 'metadata': {'platforms': [{'name': 'APA01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'Dynamic', 'serialNumbers': ['^(HF)?161[1-9][0-9]{2}$']}]}]}}
DEVICE_B3C_DEVICE = DEVICE_BASE | 0x6
device_b3c_device = {'name': 'B3C_DEVICE', 'description': 'B3C Base Device', 'value': DEVICE_B3C_DEVICE, 'metadata': {'platforms': [{'name': 'B3C01', 'supportsBaseDisFirmwareRevision': True, 'families': [{'name': 'Base', 'serialNumbers': ['^(HF)?18889[0-9]$']}]}]}}
DEVICE_APPS_RHEO_KNEE_MAIN_APP = 0x0100 + DEVICE_RHEO_KNEE
device_apps_rheo_knee_main_app = {'name': 'RHEO_KNEE_MAIN_APP', 'description': 'All known Rheos prior to 4', 'value': DEVICE_APPS_RHEO_KNEE_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': '', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_PROPRIO_FOOT_MAIN_APP = 0x0200 + DEVICE_PROPRIO_FOOT
device_apps_proprio_foot_main_app = {'name': 'PROPRIO_FOOT_MAIN_APP', 'description': 'All known Proprios', 'value': DEVICE_APPS_PROPRIO_FOOT_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'PFM1.*', 'supportedBulks': 'BULKTYPE.HOST_MAIN_APP', 'supportedRebootAppModes': 'DEVICE_APP_MODE.PROPRIO_WIRELESS_BOOTLOADER', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_RHEO_KNEE4_MAIN_APP = 0x0400 + DEVICE_RHEO_KNEE
device_apps_rheo_knee4_main_app = {'name': 'RHEO_KNEE4_MAIN_APP', 'description': 'Rheo knee 4 main app', 'value': DEVICE_APPS_RHEO_KNEE4_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': '(RKK4|B3C0).*MM[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_VECTOR_INPUT', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_RHEO_KNEE4_DIAG_APP = 0x0800 + DEVICE_RHEO_KNEE
device_apps_rheo_knee4_diag_app = {'name': 'RHEO_KNEE4_DIAG_APP', 'description': 'Rheo knee 4 diag app', 'value': DEVICE_APPS_RHEO_KNEE4_DIAG_APP, 'metadata': {'baseDisFirmwareRevisionRegex': '(RKK4|B3C0).*MD[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_DEVICE_PROFILE', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP'}}
DEVICE_APPS_RHEO_KNEE4_BOOTLOADER = 0x4000 + DEVICE_RHEO_KNEE
device_apps_rheo_knee4_bootloader = {'name': 'RHEO_KNEE4_BOOTLOADER', 'description': 'Rheo Knee 4 B3C bootloader', 'value': DEVICE_APPS_RHEO_KNEE4_BOOTLOADER, 'metadata': {'baseDisFirmwareRevisionRegex': '(RKK4|B3C0).*MB[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_MAIN_APP|BULKTYPE.HOST_DIAGNOSTIC_APP|BULKTYPE.HOST_BOOTLOADER|BULKTYPE.HOST_FPGA', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP|DEVICE_APP_MODE.WIRELESS_BOOTLOADER', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_BOOTLOADER'}}
DEVICE_APPS_APO_MAIN_APP = 0x0400 + DEVICE_APO
device_apps_apo_main_app = {'name': 'APO_MAIN_APP', 'description': 'APO main app', 'value': DEVICE_APPS_APO_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'APO0.*MM[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_VECTOR_INPUT', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_APO_DIAG_APP = 0x0800 + DEVICE_APO
device_apps_apo_diag_app = {'name': 'APO_DIAG_APP', 'description': 'APO diag app', 'value': DEVICE_APPS_APO_DIAG_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'APO0.*MD[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_DEVICE_PROFILE', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP'}}
DEVICE_APPS_APO_BOOTLOADER = 0x4000 + DEVICE_APO
device_apps_apo_bootloader = {'name': 'APO_BOOTLOADER', 'description': 'APO B3C bootloader', 'value': DEVICE_APPS_APO_BOOTLOADER, 'metadata': {'baseDisFirmwareRevisionRegex': 'APO0.*MB[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_MAIN_APP|BULKTYPE.HOST_DIAGNOSTIC_APP|BULKTYPE.HOST_BOOTLOADER', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP|DEVICE_APP_MODE.WIRELESS_BOOTLOADER', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_BOOTLOADER'}}
DEVICE_APPS_POWER_KNEE_MAIN_APP = 0x1000 + DEVICE_POWER_KNEE
device_apps_power_knee_main_app = {'name': 'POWER_KNEE_MAIN_APP', 'description': 'Power knee main app', 'value': DEVICE_APPS_POWER_KNEE_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'PKK3.*MM[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_VECTOR_INPUT', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_TOOLBOX_SERVER_MAIN_APP = 0x1000 + DEVICE_TOOLBOX_SERVER
device_apps_toolbox_server_main_app = {'name': 'TOOLBOX_SERVER_MAIN_APP', 'description': 'Toolbox server main app', 'value': DEVICE_APPS_TOOLBOX_SERVER_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'AXK*', 'supportedBulks': '0xFFFFFFFF', 'supportedVariables': '0xFFFFFFFF', 'supportedActions': '0xFFFFFFFF', 'supportedReports': '0xFFFFFFFF', 'supportedRebootAppModes': '0xFFFFFFFF', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_MOBILI_KNEE_MAIN_APP = 0x1100 + DEVICE_POWER_KNEE
device_apps_mobili_knee_main_app = {'name': 'MOBILI_KNEE_MAIN_APP', 'description': 'Mobili knee main app', 'value': DEVICE_APPS_MOBILI_KNEE_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'MKK3.*MM[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_VECTOR_INPUT', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_POWER_KNEE_DIAG_APP = 0x2000 + DEVICE_POWER_KNEE
device_apps_power_knee_diag_app = {'name': 'POWER_KNEE_DIAG_APP', 'description': 'Power knee diag app', 'value': DEVICE_APPS_POWER_KNEE_DIAG_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'PKK3.*MD[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_DEVICE_PROFILE|BULKTYPE.HOST_USER_DATABASE', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP'}}
DEVICE_APPS_MOBILI_KNEE_DIAG_APP = 0x2100 + DEVICE_POWER_KNEE
device_apps_mobili_knee_diag_app = {'name': 'MOBILI_KNEE_DIAG_APP', 'description': 'Mobili knee diag app', 'value': DEVICE_APPS_MOBILI_KNEE_DIAG_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'MKK3.*MD[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_DEVICE_PROFILE|BULKTYPE.HOST_USER_DATABASE', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP'}}
DEVICE_APPS_POWER_KNEE_BOOTLOADER = 0x4000 + DEVICE_POWER_KNEE
device_apps_power_knee_bootloader = {'name': 'POWER_KNEE_BOOTLOADER', 'description': 'Power Knee B3C bootloader', 'value': DEVICE_APPS_POWER_KNEE_BOOTLOADER, 'metadata': {'baseDisFirmwareRevisionRegex': 'PKK3.*MB[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_MAIN_APP|BULKTYPE.HOST_DIAGNOSTIC_APP|BULKTYPE.HOST_BOOTLOADER', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP|DEVICE_APP_MODE.WIRELESS_BOOTLOADER', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_BOOTLOADER'}}
DEVICE_APPS_MOBILI_KNEE_BOOTLOADER = 0x4100 + DEVICE_POWER_KNEE
device_apps_mobili_knee_bootloader = {'name': 'MOBILI_KNEE_BOOTLOADER', 'description': 'Mobili Knee B3C bootloader', 'value': DEVICE_APPS_MOBILI_KNEE_BOOTLOADER, 'metadata': {'baseDisFirmwareRevisionRegex': 'MKK3.*MB[RVDT]', 'supportedBulks': 'BULKTYPE.HOST_MAIN_APP|BULKTYPE.HOST_DIAGNOSTIC_APP|BULKTYPE.HOST_BOOTLOADER', 'supportedRebootAppModes': 'DEVICE_APP_MODE.HOST_BOOTLOADER|DEVICE_APP_MODE.HOST_MAIN_APP|DEVICE_APP_MODE.HOST_DIAGNOSTIC_APP|DEVICE_APP_MODE.WIRELESS_BOOTLOADER', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_BOOTLOADER'}}
DEVICE_APPS_B3C_BOOTLOADER = 0x1000 + DEVICE_B3C_DEVICE
device_apps_b3c_bootloader = {'name': 'B3C_BOOTLOADER', 'description': 'B3C Bootloader', 'value': DEVICE_APPS_B3C_BOOTLOADER, 'metadata': {'baseDisFirmwareRevisionRegex': 'B3C0.*MB[RVTD]', 'supportedBulks': '0xFFFFFFFF', 'supportedVariables': '0xFFFFFFFF', 'supportedActions': '0xFFFFFFFF', 'supportedReports': '0xFFFFFFFF', 'supportedRebootAppModes': '0xFFFFFFFF', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_BOOTLOADER'}}
DEVICE_APPS_BSMB_MAIN_APP = 0x0100 + DEVICE_BSMB
device_apps_bsmb_main_app = {'name': 'BSMB_MAIN_APP', 'description': 'All known BSMBs', 'value': DEVICE_APPS_BSMB_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'PFP', 'supportedBulks': 'BULKTYPE.HOST_MAIN_APP', 'supportedRebootAppModes': 'DEVICE_APP_MODE.BSMB_WIRELESS_BOOTLOADER', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN_APP'}}
DEVICE_APPS_B3C_MAIN_APP = 0x2000 + DEVICE_B3C_DEVICE
device_apps_b3c_main_app = {'name': 'B3C_MAIN_APP', 'description': 'B3C Main Application', 'value': DEVICE_APPS_B3C_MAIN_APP, 'metadata': {'baseDisFirmwareRevisionRegex': 'B3C0.*MM[RVTD]', 'supportedBulks': '0xFFFFFFFF', 'supportedVariables': '0xFFFFFFFF', 'supportedActions': '0xFFFFFFFF', 'supportedReports': '0xFFFFFFFF', 'supportedRebootAppModes': '0xFFFFFFFF', 'deviceAppMode': 'DEVICE_APP_MODE.HOST_MAIN'}}
VAR_SENSOR_TAG_TS_TEMPERATURE_OBJECT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_SENSOR_TAG, 1, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_sensor_tag_ts_temperature_object = {'name': 'SENSOR_TAG_TS_TEMPERATURE_OBJECT', 'description': 'Object temperature', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.SENSOR_TAG', 1, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'm°C', 'value': VAR_SENSOR_TAG_TS_TEMPERATURE_OBJECT, 'datatype': 'INT16'}
VAR_SENSOR_TAG_TS_TEMPERATURE_AMBIENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_SENSOR_TAG, 2, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_sensor_tag_ts_temperature_ambient = {'name': 'SENSOR_TAG_TS_TEMPERATURE_AMBIENT', 'description': 'Ambient temperature', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.SENSOR_TAG', 2, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'm°C', 'value': VAR_SENSOR_TAG_TS_TEMPERATURE_AMBIENT, 'datatype': 'INT16'}
VAR_SENSOR_TAG_HS_HUMIDITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_SENSOR_TAG, 3, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_sensor_tag_hs_humidity = {'name': 'SENSOR_TAG_HS_HUMIDITY', 'description': 'Humidity ', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.SENSOR_TAG', 3, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'm%', 'value': VAR_SENSOR_TAG_HS_HUMIDITY, 'datatype': 'INT16'}
VAR_SENSOR_TAG_HS_TEMPERATURE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_SENSOR_TAG, 4, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_sensor_tag_hs_temperature = {'name': 'SENSOR_TAG_HS_TEMPERATURE', 'description': 'temperature', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.SENSOR_TAG', 4, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'm°C', 'value': VAR_SENSOR_TAG_HS_TEMPERATURE, 'datatype': 'INT16'}
VAR_TOOLBOX_LAST_COMMAND = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 1, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BUFFER]), byteorder='little')
var_toolbox_last_command = {'name': 'TOOLBOX_LAST_COMMAND', 'description': 'Last command from toolbox to test server', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 1, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BUFFER'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_LAST_COMMAND, 'datatype': 'BUFFER'}
VAR_TOOLBOX_TEST_INT8_RO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 2, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT8]), byteorder='little')
var_toolbox_test_int8_ro = {'name': 'TOOLBOX_TEST_INT8_RO', 'description': 'Read only int8 for testing', 'min': -111, 'max': 113, 'default': 22, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 2, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_TEST_INT8_RO, 'datatype': 'INT8'}
VAR_TOOLBOX_TEST_INT64_RO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 3, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT64]), byteorder='little')
var_toolbox_test_int64_ro = {'name': 'TOOLBOX_TEST_INT64_RO', 'description': 'Read only int64 for testing', 'min': -1234567, 'max': 12345678, 'default': 3141, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 3, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_TEST_INT64_RO, 'datatype': 'INT64'}
VAR_TOOLBOX_TEST_INT64_RW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 4, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT64]), byteorder='little')
var_toolbox_test_int64_rw = {'name': 'TOOLBOX_TEST_INT64_RW', 'description': 'Read/write int64 for testing', 'min': -3456732, 'max': 34567824, 'default': -13141, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 4, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_TEST_INT64_RW, 'datatype': 'INT64'}
VAR_TOOLBOX_TEST_REAL64_RO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 5, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL64]), byteorder='little')
var_toolbox_test_real64_ro = {'name': 'TOOLBOX_TEST_REAL64_RO', 'description': 'Read only real64 for testing', 'min': -1234, 'max': 12345, 'default': 2141, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 5, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_TEST_REAL64_RO, 'datatype': 'REAL64'}
VAR_TOOLBOX_TEST_REAL64_RW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 6, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_REAL64]), byteorder='little')
var_toolbox_test_real64_rw = {'name': 'TOOLBOX_TEST_REAL64_RW', 'description': 'Read/write real64 for testing', 'min': -2434, 'max': 25345, 'default': -211, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 6, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.REAL64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_TEST_REAL64_RW, 'datatype': 'REAL64'}
VAR_TOOLBOX_TEST_UINT64_RO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 7, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT64]), byteorder='little')
var_toolbox_test_uint64_ro = {'name': 'TOOLBOX_TEST_UINT64_RO', 'description': 'Read only real64 for testing', 'min': 234, 'max': 412345, 'default': 72141, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 7, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_TEST_UINT64_RO, 'datatype': 'UINT64'}
VAR_TOOLBOX_TEST_UINT64_RW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 8, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT64]), byteorder='little')
var_toolbox_test_uint64_rw = {'name': 'TOOLBOX_TEST_UINT64_RW', 'description': 'Read/write uint64 for testing', 'min': 12434, 'max': 123245, 'default': 72141, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 8, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_TEST_UINT64_RW, 'datatype': 'UINT64'}
VAR_TOOLBOX_BULK_TEST_SIZE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 9, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_toolbox_bulk_test_size = {'name': 'TOOLBOX_BULK_TEST_SIZE', 'description': 'Number of bytes to send in bulk test', 'min': 1, 'max': 16000, 'default': 20, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 9, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_BULK_TEST_SIZE, 'datatype': 'UINT16'}
VAR_TOOLBOX_BULK_BODY_SIZE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 18, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_toolbox_bulk_body_size = {'name': 'TOOLBOX_BULK_BODY_SIZE', 'description': 'Number of bytes to send per body in bulk transfer', 'min': 18, 'max': 242, 'default': 18, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 18, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_BULK_BODY_SIZE, 'datatype': 'UINT16'}
VAR_TOOLBOX_SERIAL_TX_PROTOCOL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 11, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_toolbox_serial_tx_protocol = {'name': 'TOOLBOX_SERIAL_TX_PROTOCOL', 'description': 'What protocol to use for sending data over serial', 'min': '0xAA', 'max': '0xAB', 'default': '0xAA', 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 11, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_SERIAL_TX_PROTOCOL, 'datatype': 'UINT8'}
VAR_TOOLBOX_BULKS_PER_BUFFER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 12, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_toolbox_bulks_per_buffer = {'name': 'TOOLBOX_BULKS_PER_BUFFER', 'description': 'Number of bytes to send per body in bulk transfer', 'min': 10, 'max': 15999, 'default': 10, 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 12, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.TOOLBOX_SERVER_MAIN_APP', 'value': VAR_TOOLBOX_BULKS_PER_BUFFER, 'datatype': 'UINT16'}
VAR_BASE_ACCELEROMETER_ALL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 1, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BUFFER]), byteorder='little')
var_base_accelerometer_all = {'name': 'BASE_ACCELEROMETER_ALL', 'description': 'Accelerometers (x,y,z)', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 1, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BUFFER'], 'unit': '', 'value': VAR_BASE_ACCELEROMETER_ALL, 'datatype': 'BUFFER'}
VAR_BASE_ACCELEROMETER_SAMPLE_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 2, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_accelerometer_sample_rate = {'name': 'BASE_ACCELEROMETER_SAMPLE_RATE', 'description': 'Sample rate of the accelerometer', 'min': 1, 'max': 20, 'default': 5, 'valueBytes': ['DEVICE.BASE', 2, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_BASE_ACCELEROMETER_SAMPLE_RATE, 'datatype': 'UINT16'}
VAR_BASE_ACCELEROMETER_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 3, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_accelerometer_x = {'name': 'BASE_ACCELEROMETER_X', 'description': 'Accelerometer x', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 3, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_X, 'datatype': 'INT32'}
VAR_BASE_ACCELEROMETER_X_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 4, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_x_gain = {'name': 'BASE_ACCELEROMETER_X_GAIN', 'description': 'Accelerometer x calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 4, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_X_GAIN, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_X_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 5, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_x_offset = {'name': 'BASE_ACCELEROMETER_X_OFFSET', 'description': 'Accelerometer x calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 5, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_X_OFFSET, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_X_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 6, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_x_uncalibrated = {'name': 'BASE_ACCELEROMETER_X_UNCALIBRATED', 'description': 'Accelerometer x calibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 6, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_X_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 7, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_accelerometer_y = {'name': 'BASE_ACCELEROMETER_Y', 'description': 'Accelerometer y', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 7, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Y, 'datatype': 'INT32'}
VAR_BASE_ACCELEROMETER_Y_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 8, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_y_gain = {'name': 'BASE_ACCELEROMETER_Y_GAIN', 'description': 'Accelerometer y calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 8, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Y_GAIN, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_Y_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 9, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_y_offset = {'name': 'BASE_ACCELEROMETER_Y_OFFSET', 'description': 'Accelerometer y calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 9, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Y_OFFSET, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_Y_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 10, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_y_uncalibrated = {'name': 'BASE_ACCELEROMETER_Y_UNCALIBRATED', 'description': 'Accelerometer y calibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 10, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Y_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_Z = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 11, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_accelerometer_z = {'name': 'BASE_ACCELEROMETER_Z', 'description': 'Accelerometer z', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 11, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Z, 'datatype': 'INT32'}
VAR_BASE_ACCELEROMETER_Z_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 12, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_z_gain = {'name': 'BASE_ACCELEROMETER_Z_GAIN', 'description': 'Accelerometer z calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 12, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Z_GAIN, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_Z_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 13, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_z_offset = {'name': 'BASE_ACCELEROMETER_Z_OFFSET', 'description': 'Accelerometer z calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 13, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Z_OFFSET, 'datatype': 'INT16'}
VAR_BASE_ACCELEROMETER_Z_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 14, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_accelerometer_z_uncalibrated = {'name': 'BASE_ACCELEROMETER_Z_UNCALIBRATED', 'description': 'Accelerometer z calibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 14, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACCELEROMETER_Z_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_ACTION_PERFORM = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 15, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_action_perform = {'name': 'BASE_ACTION_PERFORM', 'description': 'flags to indicate what actions shall perform', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 15, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACTION_PERFORM, 'datatype': 'UINT16'}
VAR_BASE_ACTION_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 16, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_action_status = {'name': 'BASE_ACTION_STATUS', 'description': 'indicate the action that is being performed and the status', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 16, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ACTION_STATUS, 'datatype': 'UINT32'}
VAR_BASE_ACTIVITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 17, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_activity = {'name': 'BASE_ACTIVITY', 'description': 'flags to indicate the current activity of the user, terrain and gait phase', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 17, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ACTIVITY, 'datatype': 'UINT32'}
VAR_BASE_ALTITUDE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 18, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_base_altitude = {'name': 'BASE_ALTITUDE', 'description': 'Altitude sensor', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 18, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mm', 'value': VAR_BASE_ALTITUDE, 'datatype': 'INT32'}
VAR_BASE_ALTITUDE_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 19, VARFLAGS_RW, DATATYPE_INT32]), byteorder='little')
var_base_altitude_gain = {'name': 'BASE_ALTITUDE_GAIN', 'description': 'Altitude sensor calibration gain', 'min': 0, 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 19, 'VARFLAGS.RW', 'DATATYPE.INT32'], 'unit': '', 'value': VAR_BASE_ALTITUDE_GAIN, 'datatype': 'INT32'}
VAR_BASE_ALTITUDE_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 20, VARFLAGS_RW, DATATYPE_INT32]), byteorder='little')
var_base_altitude_offset = {'name': 'BASE_ALTITUDE_OFFSET', 'description': 'Altitude sensor calibration offset', 'min': 0, 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 20, 'VARFLAGS.RW', 'DATATYPE.INT32'], 'unit': 'mm', 'value': VAR_BASE_ALTITUDE_OFFSET, 'datatype': 'INT32'}
VAR_BASE_ALTITUDE_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 21, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_base_altitude_uncalibrated = {'name': 'BASE_ALTITUDE_UNCALIBRATED', 'description': 'Altitude sensor uncalibrated', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 21, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mm', 'value': VAR_BASE_ALTITUDE_UNCALIBRATED, 'datatype': 'INT32'}
VAR_BASE_ANGLE_FRONTAL_PLANE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 22, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_base_angle_frontal_plane = {'name': 'BASE_ANGLE_FRONTAL_PLANE', 'description': 'Device static angle in frontal plane (up-left)', 'min': -180000, 'max': 180000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 22, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ANGLE_FRONTAL_PLANE, 'datatype': 'INT32'}
VAR_BASE_ANGLE_SAGITTAL_PLANE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 23, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_angle_sagittal_plane = {'name': 'BASE_ANGLE_SAGITTAL_PLANE', 'description': 'Device static angle in sagittal plane (forward-up)', 'min': -180000, 'max': 180000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 23, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ANGLE_SAGITTAL_PLANE, 'datatype': 'INT32'}
VAR_BASE_ANGLE_TRANSVERSE_PLANE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 24, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_base_angle_transverse_plane = {'name': 'BASE_ANGLE_TRANSVERSE_PLANE', 'description': 'Device static angle in transverse plane (forward-left)', 'min': -180000, 'max': 180000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 24, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ANGLE_TRANSVERSE_PLANE, 'datatype': 'INT32'}
VAR_BASE_BATTERY_CURRENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 25, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_battery_current = {'name': 'BASE_BATTERY_CURRENT', 'description': 'Battery current', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 25, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_BATTERY_CURRENT, 'datatype': 'INT16'}
VAR_BASE_BATTERY_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 26, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_battery_level = {'name': 'BASE_BATTERY_LEVEL', 'description': 'Battery level', 'min': 0, 'max': 100, 'default': 100, 'valueBytes': ['DEVICE.BASE', 26, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_BATTERY_LEVEL, 'datatype': 'UINT8'}
VAR_BASE_BATTERY_PLUGGED_IN_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 27, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_battery_plugged_in_count = {'name': 'BASE_BATTERY_PLUGGED_IN_COUNT', 'description': 'Battery plugged in counter', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 27, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_BATTERY_PLUGGED_IN_COUNT, 'datatype': 'UINT32'}
VAR_BASE_BATTERY_STATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 28, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_battery_state = {'name': 'BASE_BATTERY_STATE', 'description': 'Battery State  (0=Discharging, 1=Charging, 2=Charging Error, 3=Healthy, 4=Low, 5=Empty)', 'min': 0, 'max': 5, 'default': 0, 'valueBytes': ['DEVICE.BASE', 28, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_BATTERY_STATE, 'datatype': 'UINT8'}
VAR_BASE_BATTERY_TEMPERATURE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 29, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL32]), byteorder='little')
var_base_battery_temperature = {'name': 'BASE_BATTERY_TEMPERATURE', 'description': 'Battery temperature', 'min': -40, 'max': 120, 'default': 0, 'valueBytes': ['DEVICE.BASE', 29, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL32'], 'unit': '°C', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_BATTERY_TEMPERATURE, 'datatype': 'REAL32'}
VAR_BASE_BATTERY_VOLTAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 30, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_battery_voltage = {'name': 'BASE_BATTERY_VOLTAGE', 'description': 'Battery voltage', 'min': 0, 'max': 50000, 'default': 10000, 'valueBytes': ['DEVICE.BASE', 30, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_BATTERY_VOLTAGE, 'datatype': 'UINT16'}
VAR_BASE_DATE_OF_FIRST_USE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 31, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_date_of_first_use = {'name': 'BASE_DATE_OF_FIRST_USE', 'description': 'time since epoch, min and default times are 10. april 2014 and max is 20 years later', 'min': 1397088000, 'max': 2028240000, 'default': 1397088000, 'valueBytes': ['DEVICE.BASE', 31, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_DATE_OF_FIRST_USE, 'datatype': 'UINT32'}
VAR_BASE_DATE_OF_LAST_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 32, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_date_of_last_reset = {'name': 'BASE_DATE_OF_LAST_RESET', 'description': 'time since epoch, min and default times are 10. april 2014 and max is 20 years later', 'min': 1397088000, 'max': 2028240000, 'default': 1397088000, 'valueBytes': ['DEVICE.BASE', 32, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_DATE_OF_LAST_RESET, 'datatype': 'UINT32'}
VAR_BASE_DISPLAY_NAME = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 33, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_display_name = {'name': 'BASE_DISPLAY_NAME', 'description': '23 characters for user name', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 33, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'value': VAR_BASE_DISPLAY_NAME, 'datatype': 'TEXT'}
VAR_BASE_DEVICE_TYPE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 34, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_device_type = {'name': 'BASE_DEVICE_TYPE', 'description': 'flags to indicate what device this is', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 34, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_BASE_DEVICE_TYPE, 'datatype': 'UINT32'}
VAR_BASE_ERROR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 35, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_error = {'name': 'BASE_ERROR', 'description': 'Device error', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 35, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ERROR, 'datatype': 'UINT16'}
VAR_BASE_ERROR_DATA = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 36, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_error_data = {'name': 'BASE_ERROR_DATA', 'description': 'Device error data', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 36, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ERROR_DATA, 'datatype': 'UINT16'}
VAR_BASE_ERROR_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 37, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_error_status = {'name': 'BASE_ERROR_STATUS', 'description': 'Device error status, combination of all errors', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 37, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_BASE_ERROR_STATUS, 'datatype': 'UINT32'}
VAR_BASE_GYROSCOPE_ALL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 38, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BUFFER]), byteorder='little')
var_base_gyroscope_all = {'name': 'BASE_GYROSCOPE_ALL', 'description': 'Gyroscope (x,y,z)', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 38, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BUFFER'], 'unit': 'm°/s', 'value': VAR_BASE_GYROSCOPE_ALL, 'datatype': 'BUFFER'}
VAR_BASE_GYROSCOPE_SAMPLE_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 39, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_gyroscope_sample_rate = {'name': 'BASE_GYROSCOPE_SAMPLE_RATE', 'description': 'Sample rate of the gyroscope', 'min': 1, 'max': 20, 'default': 5, 'valueBytes': ['DEVICE.BASE', 39, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_BASE_GYROSCOPE_SAMPLE_RATE, 'datatype': 'UINT16'}
VAR_BASE_GYROSCOPE_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 40, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_gyroscope_x = {'name': 'BASE_GYROSCOPE_X', 'description': 'Gyroscope x', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 40, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°/s', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_X, 'datatype': 'INT32'}
VAR_BASE_GYROSCOPE_X_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 41, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_x_gain = {'name': 'BASE_GYROSCOPE_X_GAIN', 'description': 'Gyroscope x calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 41, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_X_GAIN, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_X_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 42, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_x_offset = {'name': 'BASE_GYROSCOPE_X_OFFSET', 'description': 'Gyroscope x calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 42, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'm°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_X_OFFSET, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_X_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 43, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_x_uncalibrated = {'name': 'BASE_GYROSCOPE_X_UNCALIBRATED', 'description': 'Gyroscope x uncalibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 43, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_X_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 44, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_gyroscope_y = {'name': 'BASE_GYROSCOPE_Y', 'description': 'Gyroscope y', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 44, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Y, 'datatype': 'INT32'}
VAR_BASE_GYROSCOPE_Y_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 45, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_y_gain = {'name': 'BASE_GYROSCOPE_Y_GAIN', 'description': 'Gyroscope y calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 45, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Y_GAIN, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_Y_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 46, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_y_offset = {'name': 'BASE_GYROSCOPE_Y_OFFSET', 'description': 'Gyroscope y calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 46, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'm°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Y_OFFSET, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_Y_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 47, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_y_uncalibrated = {'name': 'BASE_GYROSCOPE_Y_UNCALIBRATED', 'description': 'Gyroscope y uncalibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 47, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Y_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_Z = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 48, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_gyroscope_z = {'name': 'BASE_GYROSCOPE_Z', 'description': 'Gyroscope z', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 48, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Z, 'datatype': 'INT32'}
VAR_BASE_GYROSCOPE_Z_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 49, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_z_gain = {'name': 'BASE_GYROSCOPE_Z_GAIN', 'description': 'Gyroscope z calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 49, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Z_GAIN, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_Z_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 50, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_z_offset = {'name': 'BASE_GYROSCOPE_Z_OFFSET', 'description': 'Gyroscope z calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 50, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'm°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Z_OFFSET, 'datatype': 'INT16'}
VAR_BASE_GYROSCOPE_Z_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 51, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_gyroscope_z_uncalibrated = {'name': 'BASE_GYROSCOPE_Z_UNCALIBRATED', 'description': 'Gyroscope z uncalibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 51, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_GYROSCOPE_Z_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_LOGGING_CONFIG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 52, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_logging_config = {'name': 'BASE_LOGGING_CONFIG', 'description': 'flags to indicate what shall be in the debug log', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 52, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_LOGGING_CONFIG, 'datatype': 'UINT16'}
VAR_BASE_LOGGING_ENABLED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 53, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_logging_enabled = {'name': 'BASE_LOGGING_ENABLED', 'description': 'Debug logging enabled', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BASE', 53, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_LOGGING_ENABLED, 'datatype': 'BOOL'}
VAR_BASE_MAGNETO_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 54, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_x = {'name': 'BASE_MAGNETO_X', 'description': 'Mageto sensor x', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 54, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_MAGNETO_X, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_X_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 55, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_x_gain = {'name': 'BASE_MAGNETO_X_GAIN', 'description': 'Mageto sensor x calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 55, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'value': VAR_BASE_MAGNETO_X_GAIN, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_X_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 56, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_x_offset = {'name': 'BASE_MAGNETO_X_OFFSET', 'description': 'Mageto sensor x calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 56, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'value': VAR_BASE_MAGNETO_X_OFFSET, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_X_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 57, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_x_uncalibrated = {'name': 'BASE_MAGNETO_X_UNCALIBRATED', 'description': 'Mageto sensor x uncalibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 57, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'value': VAR_BASE_MAGNETO_X_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 58, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_y = {'name': 'BASE_MAGNETO_Y', 'description': 'Mageto sensor y', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 58, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_MAGNETO_Y, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Y_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 59, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_y_gain = {'name': 'BASE_MAGNETO_Y_GAIN', 'description': 'Mageto sensor y calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 59, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'value': VAR_BASE_MAGNETO_Y_GAIN, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Y_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 60, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_y_offset = {'name': 'BASE_MAGNETO_Y_OFFSET', 'description': 'Mageto sensor y calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 60, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'value': VAR_BASE_MAGNETO_Y_OFFSET, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Y_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 61, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_y_uncalibrated = {'name': 'BASE_MAGNETO_Y_UNCALIBRATED', 'description': 'Mageto sensor y uncalibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 61, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'value': VAR_BASE_MAGNETO_Y_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Z = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 62, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_z = {'name': 'BASE_MAGNETO_Z', 'description': 'Mageto sensor z', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 62, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_MAGNETO_Z, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Z_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 63, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_z_gain = {'name': 'BASE_MAGNETO_Z_GAIN', 'description': 'Mageto sensor z calibration gain (*1000)', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 63, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'value': VAR_BASE_MAGNETO_Z_GAIN, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Z_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 64, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_z_offset = {'name': 'BASE_MAGNETO_Z_OFFSET', 'description': 'Mageto sensor z calibration offset', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 64, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'value': VAR_BASE_MAGNETO_Z_OFFSET, 'datatype': 'INT16'}
VAR_BASE_MAGNETO_Z_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 65, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_magneto_z_uncalibrated = {'name': 'BASE_MAGNETO_Z_UNCALIBRATED', 'description': 'Mageto sensor z uncalibrated', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 65, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'uT', 'value': VAR_BASE_MAGNETO_Z_UNCALIBRATED, 'datatype': 'INT16'}
VAR_BASE_TEMPERATURE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 66, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_temperature = {'name': 'BASE_TEMPERATURE', 'description': 'Device temperature', 'min': -40, 'max': 120, 'default': 0, 'valueBytes': ['DEVICE.BASE', 66, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '°mC', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TEMPERATURE, 'datatype': 'INT16'}
VAR_BASE_TEMPERATURE_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 67, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_temperature_gain = {'name': 'BASE_TEMPERATURE_GAIN', 'description': 'Device temperature calibration gain', 'min': 0, 'max': 'INT16_MAX', 'default': 1, 'valueBytes': ['DEVICE.BASE', 67, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'value': VAR_BASE_TEMPERATURE_GAIN, 'datatype': 'INT16'}
VAR_BASE_TEMPERATURE_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 68, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_temperature_offset = {'name': 'BASE_TEMPERATURE_OFFSET', 'description': 'Device temperature calibration offset', 'min': 0, 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 68, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '°mC', 'value': VAR_BASE_TEMPERATURE_OFFSET, 'datatype': 'INT16'}
VAR_BASE_TIME_ACTIVE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 69, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_active = {'name': 'BASE_TIME_ACTIVE', 'description': 'User active time', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 69, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_BASE_TIME_ACTIVE, 'datatype': 'UINT32'}
VAR_BASE_TIME_ACTIVE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 70, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_active_slr = {'name': 'BASE_TIME_ACTIVE_SLR', 'description': 'User active time', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 70, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_TIME_ACTIVE_SLR, 'datatype': 'UINT32'}
VAR_BASE_TIME_ON = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 71, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_on = {'name': 'BASE_TIME_ON', 'description': 'Total time on', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 71, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_TIME_ON, 'datatype': 'UINT32'}
VAR_BASE_TIME_RTC_DAY_OF_MONTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 72, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_time_rtc_day_of_month = {'name': 'BASE_TIME_RTC_DAY_OF_MONTH', 'description': 'Real time clock day of the month', 'min': 1, 'max': 31, 'default': 1, 'valueBytes': ['DEVICE.BASE', 72, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'd', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_DAY_OF_MONTH, 'datatype': 'UINT8'}
VAR_BASE_TIME_RTC_DAY_OF_WEEK = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 73, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_time_rtc_day_of_week = {'name': 'BASE_TIME_RTC_DAY_OF_WEEK', 'description': 'Real time clock day of the week', 'min': 1, 'max': 7, 'default': 1, 'valueBytes': ['DEVICE.BASE', 73, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'd', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_DAY_OF_WEEK, 'datatype': 'UINT8'}
VAR_BASE_TIME_RTC_DAY_OF_YEAR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 74, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_time_rtc_day_of_year = {'name': 'BASE_TIME_RTC_DAY_OF_YEAR', 'description': 'Real time clock day of the year', 'min': 1, 'max': 366, 'default': 1, 'valueBytes': ['DEVICE.BASE', 74, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'd', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_DAY_OF_YEAR, 'datatype': 'UINT16'}
VAR_BASE_TIME_RTC_HOUR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 75, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_time_rtc_hour = {'name': 'BASE_TIME_RTC_HOUR', 'description': 'Real time clock hour', 'min': 0, 'max': 23, 'default': 0, 'valueBytes': ['DEVICE.BASE', 75, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'hr', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_HOUR, 'datatype': 'UINT8'}
VAR_BASE_TIME_RTC_MINUTE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 76, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_time_rtc_minute = {'name': 'BASE_TIME_RTC_MINUTE', 'description': 'Real time clock minute', 'min': 0, 'max': 59, 'default': 0, 'valueBytes': ['DEVICE.BASE', 76, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'min', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_MINUTE, 'datatype': 'UINT8'}
VAR_BASE_TIME_RTC_MONTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 77, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_time_rtc_month = {'name': 'BASE_TIME_RTC_MONTH', 'description': 'Real time clock month', 'min': 1, 'max': 12, 'default': 1, 'valueBytes': ['DEVICE.BASE', 77, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'mo', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_MONTH, 'datatype': 'UINT8'}
VAR_BASE_TIME_RTC_SECOND = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 78, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_time_rtc_second = {'name': 'BASE_TIME_RTC_SECOND', 'description': 'Real time clock sec', 'min': 0, 'max': 59, 'default': 0, 'valueBytes': ['DEVICE.BASE', 78, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_SECOND, 'datatype': 'UINT8'}
VAR_BASE_TIME_RTC_SECOND_EPOCH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 79, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_rtc_second_epoch = {'name': 'BASE_TIME_RTC_SECOND_EPOCH', 'description': 'Real time clock since epoch - sec', 'min': 0, 'max': 2028240000, 'default': 1397088000, 'valueBytes': ['DEVICE.BASE', 79, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_SECOND_EPOCH, 'datatype': 'UINT32'}
VAR_BASE_TIME_RTC_TIMEZONE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 80, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_base_time_rtc_timezone = {'name': 'BASE_TIME_RTC_TIMEZONE', 'description': 'Timezone, offset from GMT in seconds', 'min': -50400, 'max': 50400, 'default': 0, 'valueBytes': ['DEVICE.BASE', 80, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_TIMEZONE, 'datatype': 'INT32'}
VAR_BASE_TIME_RTC_YEAR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 81, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_time_rtc_year = {'name': 'BASE_TIME_RTC_YEAR', 'description': 'Real time clock year', 'min': 2000, 'max': 2100, 'default': 2000, 'valueBytes': ['DEVICE.BASE', 81, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_RTC_YEAR, 'datatype': 'UINT16'}
VAR_BASE_TIME_SITTING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 82, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_sitting = {'name': 'BASE_TIME_SITTING', 'description': 'User sitting time', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 82, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_BASE_TIME_SITTING, 'datatype': 'UINT32'}
VAR_BASE_TIME_SITTING_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 83, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_sitting_slr = {'name': 'BASE_TIME_SITTING_SLR', 'description': 'User sitting time since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 83, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_TIME_SITTING_SLR, 'datatype': 'UINT32'}
VAR_BASE_TIME_SYSTEM_ON = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 84, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_system_on = {'name': 'BASE_TIME_SYSTEM_ON', 'description': 'Time since last power cycle', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 84, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_TIME_SYSTEM_ON, 'datatype': 'UINT32'}
VAR_BASE_FEEDBACK_SOUND_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 85, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_feedback_sound_level = {'name': 'BASE_FEEDBACK_SOUND_LEVEL', 'description': 'Sound level config', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.BASE', 85, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'value': VAR_BASE_FEEDBACK_SOUND_LEVEL, 'datatype': 'UINT8'}
VAR_BASE_USER_EXPERIENCE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 86, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_user_experience_level = {'name': 'BASE_USER_EXPERIENCE_LEVEL', 'description': 'User experience level', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.BASE', 86, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_BASE_USER_EXPERIENCE_LEVEL, 'datatype': 'UINT8'}
VAR_BASE_FEEDBACK_VIBRATION_INTENSITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 87, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_feedback_vibration_intensity = {'name': 'BASE_FEEDBACK_VIBRATION_INTENSITY', 'description': 'Vibration level config', 'min': 1, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.BASE', 87, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_FEEDBACK_VIBRATION_INTENSITY, 'datatype': 'UINT8'}
VAR_BASE_DIS_MANUFACTURER_NAME = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 88, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_dis_manufacturer_name = {'name': 'BASE_DIS_MANUFACTURER_NAME', 'description': 'Device manufacturer', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 88, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER', 'value': VAR_BASE_DIS_MANUFACTURER_NAME, 'datatype': 'TEXT'}
VAR_BASE_DIS_SERIAL_NUMBER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 89, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_dis_serial_number = {'name': 'BASE_DIS_SERIAL_NUMBER', 'description': 'Device serial number', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 89, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_DIS_SERIAL_NUMBER, 'datatype': 'TEXT'}
VAR_BASE_DIS_MODEL_NUMBER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 90, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_dis_model_number = {'name': 'BASE_DIS_MODEL_NUMBER', 'description': 'Device model name', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 90, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_DIS_MODEL_NUMBER, 'datatype': 'TEXT'}
VAR_BASE_DIS_HARDWARE_REVISION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 91, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_dis_hardware_revision = {'name': 'BASE_DIS_HARDWARE_REVISION', 'description': 'Device hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 91, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_DIS_HARDWARE_REVISION, 'datatype': 'TEXT'}
VAR_BASE_DIS_FIRMWARE_REVISION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 92, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_dis_firmware_revision = {'name': 'BASE_DIS_FIRMWARE_REVISION', 'description': 'Device firmware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 92, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_DIS_FIRMWARE_REVISION, 'datatype': 'TEXT'}
VAR_BASE_DIS_SOFTWARE_REVISION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 93, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_dis_software_revision = {'name': 'BASE_DIS_SOFTWARE_REVISION', 'description': 'Device software revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 93, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_DIS_SOFTWARE_REVISION, 'datatype': 'TEXT'}
VAR_BASE_DIS_BONDING_PASSCODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 94, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_dis_bonding_passcode = {'name': 'BASE_DIS_BONDING_PASSCODE', 'description': 'Device bonding passcode', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 94, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_DIS_BONDING_PASSCODE, 'datatype': 'TEXT'}
VAR_BASE_FEEDBACK_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 95, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_feedback_mode = {'name': 'BASE_FEEDBACK_MODE', 'description': 'Feedback mode options: sound only, vibration only or both', 'min': 1, 'max': 3, 'default': 3, 'valueBytes': ['DEVICE.BASE', 95, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_FEEDBACK_MODE, 'datatype': 'UINT8'}
VAR_BASE_FEEDBACK_SOUND_PITCH_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 96, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_feedback_sound_pitch_level = {'name': 'BASE_FEEDBACK_SOUND_PITCH_LEVEL', 'description': 'Sound pitch level', 'min': 1, 'max': 3, 'default': 3, 'valueBytes': ['DEVICE.BASE', 96, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_FEEDBACK_SOUND_PITCH_LEVEL, 'datatype': 'UINT8'}
VAR_BASE_TRIGGER_FIRMWARE_UPDATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 97, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_trigger_firmware_update = {'name': 'BASE_TRIGGER_FIRMWARE_UPDATE', 'description': 'Trigger device firmware update', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BASE', 97, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_BASE_TRIGGER_FIRMWARE_UPDATE, 'datatype': 'UINT8'}
VAR_BASE_HIBERNATION_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 98, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_hibernation_count = {'name': 'BASE_HIBERNATION_COUNT', 'description': 'Hibernation count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 98, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_HIBERNATION_COUNT, 'datatype': 'UINT32'}
VAR_BASE_SHUTOFF_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 99, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_shutoff_count = {'name': 'BASE_SHUTOFF_COUNT', 'description': 'Shutoff count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 99, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_SHUTOFF_COUNT, 'datatype': 'UINT32'}
VAR_BASE_RESET_POR_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 100, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_reset_por_count = {'name': 'BASE_RESET_POR_COUNT', 'description': 'Reset count due to POR (power on reset)', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 100, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_RESET_POR_COUNT, 'datatype': 'UINT32'}
VAR_BASE_RESET_EXT_INT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 101, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_reset_ext_int_count = {'name': 'BASE_RESET_EXT_INT_COUNT', 'description': 'Reset count due to external interrupt', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 101, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_RESET_EXT_INT_COUNT, 'datatype': 'UINT32'}
VAR_BASE_RESET_WATCHDOG_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 102, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_reset_watchdog_count = {'name': 'BASE_RESET_WATCHDOG_COUNT', 'description': 'Reset count due to external interrupt', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 102, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_RESET_WATCHDOG_COUNT, 'datatype': 'UINT32'}
VAR_BASE_RESET_BROWN_OUT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 103, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_reset_brown_out_count = {'name': 'BASE_RESET_BROWN_OUT_COUNT', 'description': 'Reset count due to brown out', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 103, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_RESET_BROWN_OUT_COUNT, 'datatype': 'UINT32'}
VAR_BASE_ACTIVE_RATIO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 104, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_active_ratio = {'name': 'BASE_ACTIVE_RATIO', 'description': 'User active ratio', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.BASE', 104, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ACTIVE_RATIO, 'datatype': 'UINT8'}
VAR_BASE_TIME_INACTIVE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 105, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_inactive = {'name': 'BASE_TIME_INACTIVE', 'description': 'User inactive time', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 105, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_TIME_INACTIVE, 'datatype': 'UINT32'}
VAR_BASE_TIME_ON_ACTIVE_RATIO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 106, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_time_on_active_ratio = {'name': 'BASE_TIME_ON_ACTIVE_RATIO', 'description': 'User active versus system on ratio', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.BASE', 106, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_TIME_ON_ACTIVE_RATIO, 'datatype': 'UINT8'}
VAR_BASE_TIME_ACTIVE_MINUTES = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 107, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BUFFER]), byteorder='little')
var_base_time_active_minutes = {'name': 'BASE_TIME_ACTIVE_MINUTES', 'description': 'Active minutes, uint8 array of 366', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.BASE', 107, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BUFFER'], 'unit': '', 'value': VAR_BASE_TIME_ACTIVE_MINUTES, 'datatype': 'BUFFER'}
VAR_BASE_AMBIENT_LIGHT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 108, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_ambient_light = {'name': 'BASE_AMBIENT_LIGHT', 'description': 'Ambient light sensor value', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 108, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'value': VAR_BASE_AMBIENT_LIGHT, 'datatype': 'UINT16'}
VAR_BASE_3V3_CURRENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 109, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_3v3_current = {'name': 'BASE_3V3_CURRENT', 'description': '3V3 current', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 109, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_3V3_CURRENT, 'datatype': 'UINT16'}
VAR_BASE_LOGGING_INTERVAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 110, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_logging_interval = {'name': 'BASE_LOGGING_INTERVAL', 'description': 'systicks between logs', 'min': 0, 'max': 'UINT16_MAX', 'default': 1000, 'valueBytes': ['DEVICE.BASE', 110, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_LOGGING_INTERVAL, 'datatype': 'UINT16'}
VAR_BASE_ENABLE_LOW_POWER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 111, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_enable_low_power = {'name': 'BASE_ENABLE_LOW_POWER', 'description': 'Enables low power (hibernation)', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BASE', 111, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_ENABLE_LOW_POWER, 'datatype': 'BOOL'}
VAR_BASE_ENABLE_BLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 112, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_enable_ble = {'name': 'BASE_ENABLE_BLE', 'description': 'Enables bluetooth low energy', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BASE', 112, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'value': VAR_BASE_ENABLE_BLE, 'datatype': 'BOOL'}
VAR_BASE_ENABLE_WIFI = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 113, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_enable_wifi = {'name': 'BASE_ENABLE_WIFI', 'description': 'Enables wifi', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BASE', 113, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_ENABLE_WIFI, 'datatype': 'BOOL'}
VAR_BASE_BATTERY_VOLTAGE_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 114, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_battery_voltage_raw = {'name': 'BASE_BATTERY_VOLTAGE_RAW', 'description': 'Raw count of battery voltage', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 114, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_BATTERY_VOLTAGE_RAW, 'datatype': 'UINT16'}
VAR_BASE_3V3_CURRENT_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 115, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_3v3_current_raw = {'name': 'BASE_3V3_CURRENT_RAW', 'description': 'Raw count of 3v3 current', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 115, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_3V3_CURRENT_RAW, 'datatype': 'UINT16'}
VAR_BASE_ENABLE_CHARGING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 116, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_enable_charging = {'name': 'BASE_ENABLE_CHARGING', 'description': 'Enables charging', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BASE', 116, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ENABLE_CHARGING, 'datatype': 'BOOL'}
VAR_BASE_CONNECTED_BLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 117, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_connected_ble = {'name': 'BASE_CONNECTED_BLE', 'description': 'BLE connected', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BASE', 117, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_CONNECTED_BLE, 'datatype': 'BOOL'}
VAR_BASE_CONNECTED_WIFI = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 118, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_connected_wifi = {'name': 'BASE_CONNECTED_WIFI', 'description': 'WIFI connected', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BASE', 118, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_CONNECTED_WIFI, 'datatype': 'BOOL'}
VAR_BASE_BUTTON_PRESSED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 119, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_base_button_pressed = {'name': 'BASE_BUTTON_PRESSED', 'description': 'Button is pressed', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BASE', 119, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_BUTTON_PRESSED, 'datatype': 'BOOL'}
VAR_BASE_RESET_UNEXPECTED_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 120, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_reset_unexpected_count = {'name': 'BASE_RESET_UNEXPECTED_COUNT', 'description': 'unexpected reset count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 120, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_RESET_UNEXPECTED_COUNT, 'datatype': 'UINT32'}
VAR_BASE_TIME_OFF = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 121, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_off = {'name': 'BASE_TIME_OFF', 'description': 'Total Time off', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 121, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_TIME_OFF, 'datatype': 'UINT32'}
VAR_BASE_DEVICE_STATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 122, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_device_state = {'name': 'BASE_DEVICE_STATE', 'description': 'Device State', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 122, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_DEVICE_STATE, 'datatype': 'UINT8'}
VAR_BASE_SENSORY_FEEDBACK = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 123, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BUFFER]), byteorder='little')
var_base_sensory_feedback = {'name': 'BASE_SENSORY_FEEDBACK', 'description': 'Sensory feedback from device [var1][var2][var3]', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 123, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BUFFER'], 'unit': '', 'value': VAR_BASE_SENSORY_FEEDBACK, 'datatype': 'BUFFER'}
VAR_BASE_SENSORY_FEEDBACK_SUBSCRIPTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 124, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_BUFFER]), byteorder='little')
var_base_sensory_feedback_subscription = {'name': 'BASE_SENSORY_FEEDBACK_SUBSCRIPTION', 'description': 'Sensory feedback subsription to desired sensors [var1][var2][var3]', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 124, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.BUFFER'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_SENSORY_FEEDBACK_SUBSCRIPTION, 'datatype': 'BUFFER'}
VAR_BASE_SENSORY_FEEDBACK_INTERVAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 125, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_sensory_feedback_interval = {'name': 'BASE_SENSORY_FEEDBACK_INTERVAL', 'description': 'Sensory feedback sent from device with this interval', 'min': 0, 'max': 1000, 'default': 20, 'valueBytes': ['DEVICE.BASE', 125, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_SENSORY_FEEDBACK_INTERVAL, 'datatype': 'UINT16'}
VAR_BASE_DEVICE_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 126, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_device_mode = {'name': 'BASE_DEVICE_MODE', 'description': 'Device Mode (Manufacturing = 0, R&D = 1, Field Use = 2)', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 126, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_DEVICE_MODE, 'datatype': 'UINT8'}
VAR_BASE_PROCESSOR_LOAD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 127, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_base_processor_load = {'name': 'BASE_PROCESSOR_LOAD', 'description': 'Processor load', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.BASE', 127, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_PROCESSOR_LOAD, 'datatype': 'UINT8'}
VAR_BASE_PROCESSOR_LOAD_TIME = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 128, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_processor_load_time = {'name': 'BASE_PROCESSOR_LOAD_TIME', 'description': 'Processor run time per systick', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 128, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'us', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_PROCESSOR_LOAD_TIME, 'datatype': 'UINT16'}
VAR_BASE_PROCESSOR_LOAD_TIME_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 129, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_processor_load_time_max = {'name': 'BASE_PROCESSOR_LOAD_TIME_MAX', 'description': 'Processor max run time per systick', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 129, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'us', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_PROCESSOR_LOAD_TIME_MAX, 'datatype': 'UINT16'}
VAR_BASE_PROCESSOR_LOAD_TIME_MIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 130, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_processor_load_time_min = {'name': 'BASE_PROCESSOR_LOAD_TIME_MIN', 'description': 'Processor min run time per systick', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 130, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'us', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_PROCESSOR_LOAD_TIME_MIN, 'datatype': 'UINT16'}
VAR_BASE_MAIN_HARDWARE_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 131, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_main_hardware_version = {'name': 'BASE_MAIN_HARDWARE_VERSION', 'description': 'Device main board hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 131, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_MAIN_HARDWARE_VERSION, 'datatype': 'TEXT'}
VAR_BASE_MAIN_HARDWARE_SERIAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 132, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_main_hardware_serial = {'name': 'BASE_MAIN_HARDWARE_SERIAL', 'description': 'Device main board hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 132, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BASE_MAIN_HARDWARE_SERIAL, 'datatype': 'TEXT'}
VAR_BASE_UI_HARDWARE_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 133, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_ui_hardware_version = {'name': 'BASE_UI_HARDWARE_VERSION', 'description': 'Device UI board hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 133, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_UI_HARDWARE_VERSION, 'datatype': 'TEXT'}
VAR_BASE_UI_HARDWARE_SERIAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 134, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_ui_hardware_serial = {'name': 'BASE_UI_HARDWARE_SERIAL', 'description': 'Device UI board hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 134, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_UI_HARDWARE_SERIAL, 'datatype': 'TEXT'}
VAR_BASE_ANGLE_HARDWARE_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 135, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_angle_hardware_version = {'name': 'BASE_ANGLE_HARDWARE_VERSION', 'description': 'Device joint sensor hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 135, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ANGLE_HARDWARE_VERSION, 'datatype': 'TEXT'}
VAR_BASE_ANGLE_HARDWARE_SERIAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 136, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_angle_hardware_serial = {'name': 'BASE_ANGLE_HARDWARE_SERIAL', 'description': 'Device joint sensor hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 136, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_ANGLE_HARDWARE_SERIAL, 'datatype': 'TEXT'}
VAR_BASE_CONNECTION_HARDWARE_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 137, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_connection_hardware_version = {'name': 'BASE_CONNECTION_HARDWARE_VERSION', 'description': 'Device connection board hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 137, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_CONNECTION_HARDWARE_VERSION, 'datatype': 'TEXT'}
VAR_BASE_CONNECTION_HARDWARE_SERIAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 138, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_connection_hardware_serial = {'name': 'BASE_CONNECTION_HARDWARE_SERIAL', 'description': 'Device connection board hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 138, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_CONNECTION_HARDWARE_SERIAL, 'datatype': 'TEXT'}
VAR_BASE_BATTERY_SERIAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 139, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_base_battery_serial = {'name': 'BASE_BATTERY_SERIAL', 'description': 'Device connection board hardware revision', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 139, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_BATTERY_SERIAL, 'datatype': 'TEXT'}
VAR_BASE_VERTICAL_DISPLACEMENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 140, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_base_vertical_displacement = {'name': 'BASE_VERTICAL_DISPLACEMENT', 'description': 'Vertical displacement of the device', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 140, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'value': VAR_BASE_VERTICAL_DISPLACEMENT, 'datatype': 'INT16'}
VAR_BASE_TEMPERATURE_SECMCU = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 141, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_base_temperature_secmcu = {'name': 'BASE_TEMPERATURE_SECMCU', 'description': 'Secondary MCU chip temperature', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 141, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_TEMPERATURE_SECMCU, 'datatype': 'INT16'}
VAR_BASE_3V3_VOLTAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 142, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_3v3_voltage = {'name': 'BASE_3V3_VOLTAGE', 'description': '3V3 voltage', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 142, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_3V3_VOLTAGE, 'datatype': 'UINT16'}
VAR_BASE_INFRARED_LIGHT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 143, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_base_infrared_light = {'name': 'BASE_INFRARED_LIGHT', 'description': 'Infrared light sensor value', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 143, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'value': VAR_BASE_INFRARED_LIGHT, 'datatype': 'UINT16'}
VAR_BASE_BUTTON_PRESSED_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 144, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_button_pressed_count = {'name': 'BASE_BUTTON_PRESSED_COUNT', 'description': 'Total amount of button presses', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 144, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_BUTTON_PRESSED_COUNT, 'datatype': 'UINT32'}
VAR_BASE_DEVICE_CHARGE_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 145, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_device_charge_count = {'name': 'BASE_DEVICE_CHARGE_COUNT', 'description': 'Total amount of charges', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 145, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_DEVICE_CHARGE_COUNT, 'datatype': 'UINT32'}
VAR_BASE_TIME_RTC_RELATIVE_SECOND_EPOCH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 146, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_base_time_rtc_relative_second_epoch = {'name': 'BASE_TIME_RTC_RELATIVE_SECOND_EPOCH', 'description': 'Relative real time clock since epoch - sec', 'min': 0, 'max': 2028240000, 'default': 1397088000, 'valueBytes': ['DEVICE.BASE', 146, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_BASE_TIME_RTC_RELATIVE_SECOND_EPOCH, 'datatype': 'UINT32'}
VAR_BASE_WIFI_FIRMWARE_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 147, VARFLAGS_READ, DATATYPE_TEXT]), byteorder='little')
var_base_wifi_firmware_version = {'name': 'BASE_WIFI_FIRMWARE_VERSION', 'description': 'WIFI module firmware version', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 147, 'VARFLAGS.READ', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_WIFI_FIRMWARE_VERSION, 'datatype': 'TEXT'}
VAR_BASE_WIFI_DRIVER_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 148, VARFLAGS_READ, DATATYPE_TEXT]), byteorder='little')
var_base_wifi_driver_version = {'name': 'BASE_WIFI_DRIVER_VERSION', 'description': 'WIFI module version', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 148, 'VARFLAGS.READ', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_WIFI_DRIVER_VERSION, 'datatype': 'TEXT'}
VAR_BASE_COMMUNICATION_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 149, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_communication_status = {'name': 'BASE_COMMUNICATION_STATUS', 'description': 'Communication status, 1 data byte is included (0x0 buffer OK, 0x1 buffer 90% full, 0x9 buffer overflow)', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 149, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_COMMUNICATION_STATUS, 'datatype': 'UINT8'}
VAR_BASE_COMMUNICATION_TEST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 150, VARFLAGS_RW, DATATYPE_TEXT]), byteorder='little')
var_base_communication_test = {'name': 'BASE_COMMUNICATION_TEST', 'description': 'Communication test, the device echos the same data back, 14 data bytes can be used for payload.', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BASE', 150, 'VARFLAGS.RW', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_COMMUNICATION_TEST, 'datatype': 'TEXT'}
VAR_BASE_BIONIC_CONST_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 151, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_bionic_const_version = {'name': 'BASE_BIONIC_CONST_VERSION', 'description': 'Bionic Const version', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 151, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': VAR_BASE_BIONIC_CONST_VERSION, 'datatype': 'UINT32'}
VAR_BASE_BIONIC_CONST_VERSION_SECMCU = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 152, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_bionic_const_version_secmcu = {'name': 'BASE_BIONIC_CONST_VERSION_SECMCU', 'description': 'Bionic Const version on secondary MCU chip', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 152, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_BIONIC_CONST_VERSION_SECMCU, 'datatype': 'UINT32'}
VAR_BASE_LED_BRIGHTNESS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 153, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_led_brightness = {'name': 'BASE_LED_BRIGHTNESS', 'description': 'LED brightness setting', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 153, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_LED_BRIGHTNESS, 'datatype': 'UINT8'}
VAR_BASE_UI_CHARGING_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 154, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_ui_charging_mode = {'name': 'BASE_UI_CHARGING_MODE', 'description': 'Charging mode selection', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 154, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_BASE_UI_CHARGING_MODE, 'datatype': 'UINT8'}
VAR_BASE_MB_ADC_CH0 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 155, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch0 = {'name': 'BASE_MB_ADC_CH0', 'description': 'Main board ACD channel 0', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 155, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH0, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 156, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch1 = {'name': 'BASE_MB_ADC_CH1', 'description': 'Main board ACD channel 1', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 156, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH1, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 157, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch2 = {'name': 'BASE_MB_ADC_CH2', 'description': 'Main board ACD channel 2', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 157, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH2, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 158, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch3 = {'name': 'BASE_MB_ADC_CH3', 'description': 'Main board ACD channel 3', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 158, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH3, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH4 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 159, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch4 = {'name': 'BASE_MB_ADC_CH4', 'description': 'Main board ACD channel 4', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 159, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH4, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH5 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 160, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch5 = {'name': 'BASE_MB_ADC_CH5', 'description': 'Main board ACD channel 5', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 160, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH5, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH6 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 161, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch6 = {'name': 'BASE_MB_ADC_CH6', 'description': 'Main board ACD channel 6', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 161, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH6, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH7 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 162, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_mb_adc_ch7 = {'name': 'BASE_MB_ADC_CH7', 'description': 'Main board ACD channel 7', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.BASE', 162, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH7, 'datatype': 'REAL32'}
VAR_BASE_MB_ADC_CH0_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 163, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch0_raw = {'name': 'BASE_MB_ADC_CH0_RAW', 'description': 'Main board ACD channel 0, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 163, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH0_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_CH1_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 164, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch1_raw = {'name': 'BASE_MB_ADC_CH1_RAW', 'description': 'Main board ACD channel 1, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 164, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH1_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_CH2_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 165, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch2_raw = {'name': 'BASE_MB_ADC_CH2_RAW', 'description': 'Main board ACD channel 2, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 165, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH2_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_CH3_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 166, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch3_raw = {'name': 'BASE_MB_ADC_CH3_RAW', 'description': 'Main board ACD channel 3, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 166, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH3_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_CH4_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 167, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch4_raw = {'name': 'BASE_MB_ADC_CH4_RAW', 'description': 'Main board ACD channel 4, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 167, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH4_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_CH5_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 168, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch5_raw = {'name': 'BASE_MB_ADC_CH5_RAW', 'description': 'Main board ACD channel 5, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 168, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH5_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_CH6_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 169, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch6_raw = {'name': 'BASE_MB_ADC_CH6_RAW', 'description': 'Main board ACD channel 6, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 169, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH6_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_CH7_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 170, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_ch7_raw = {'name': 'BASE_MB_ADC_CH7_RAW', 'description': 'Main board ACD channel 7, raw values', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 170, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_CH7_RAW, 'datatype': 'UINT32'}
VAR_BASE_MB_ADC_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 171, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_mb_adc_status = {'name': 'BASE_MB_ADC_STATUS', 'description': 'Main board ACD status', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 171, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MB_ADC_STATUS, 'datatype': 'UINT32'}
VAR_BASE_LIN_ACC_X_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 172, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_lin_acc_x_local = {'name': 'BASE_LIN_ACC_X_LOCAL', 'description': 'Linear acceleration X axis sensor reference frame', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 172, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_LIN_ACC_X_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_LIN_ACC_Y_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 173, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_lin_acc_y_local = {'name': 'BASE_LIN_ACC_Y_LOCAL', 'description': 'Linear acceleration Y axis sensor reference frame', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 173, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_LIN_ACC_Y_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_LIN_ACC_Z_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 174, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_lin_acc_z_local = {'name': 'BASE_LIN_ACC_Z_LOCAL', 'description': 'Linear acceleration Z axis sensor reference frame', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 174, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_LIN_ACC_Z_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_LIN_ACC_X_GLOBAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 175, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_base_lin_acc_x_global = {'name': 'BASE_LIN_ACC_X_GLOBAL', 'description': 'Linear acceleration X axis global reference frame', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 175, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_LIN_ACC_X_GLOBAL, 'datatype': 'INT32'}
VAR_BASE_LIN_ACC_Y_GLOBAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 176, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_base_lin_acc_y_global = {'name': 'BASE_LIN_ACC_Y_GLOBAL', 'description': 'Linear acceleration Y axis global reference frame', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 176, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_LIN_ACC_Y_GLOBAL, 'datatype': 'INT32'}
VAR_BASE_LIN_ACC_Z_GLOBAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 177, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_base_lin_acc_z_global = {'name': 'BASE_LIN_ACC_Z_GLOBAL', 'description': 'Linear acceleration Z axis global reference frame', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 177, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_LIN_ACC_Z_GLOBAL, 'datatype': 'INT32'}
VAR_BASE_GRAV_VECT_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 178, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_grav_vect_x = {'name': 'BASE_GRAV_VECT_X', 'description': 'Gravity vector component X axis', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 178, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GRAV_VECT_X, 'datatype': 'REAL32'}
VAR_BASE_GRAV_VECT_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 179, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_grav_vect_y = {'name': 'BASE_GRAV_VECT_Y', 'description': 'Gravity vector component Y axis', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 179, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GRAV_VECT_Y, 'datatype': 'REAL32'}
VAR_BASE_GRAV_VECT_Z = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 180, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_grav_vect_z = {'name': 'BASE_GRAV_VECT_Z', 'description': 'Gravity vector component Z axis', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 180, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GRAV_VECT_Z, 'datatype': 'REAL32'}
VAR_BASE_IMU_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 181, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_imu_status = {'name': 'BASE_IMU_STATUS', 'description': 'Status of the IMU unit', 'min': '0', 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 181, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_IMU_STATUS, 'datatype': 'UINT32'}
VAR_BASE_GAIT_PHASE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 182, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_gait_phase = {'name': 'BASE_GAIT_PHASE', 'description': '0 when Prosthesis is loaded(STANCE), 1 when not(SWING) ', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 182, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GAIT_PHASE, 'datatype': 'UINT8'}
VAR_BASE_CADENCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 183, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_cadence = {'name': 'BASE_CADENCE', 'description': 'Current cadence of the user,stepcount for both limbs', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 183, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': 'steps/min', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_CADENCE, 'datatype': 'UINT8'}
VAR_BASE_STANCE_DURATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 184, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_base_stance_duration = {'name': 'BASE_STANCE_DURATION', 'description': 'Duration of last/active stance phase', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 184, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_STANCE_DURATION, 'datatype': 'UINT16'}
VAR_BASE_SWING_DURATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 185, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_base_swing_duration = {'name': 'BASE_SWING_DURATION', 'description': 'Duration of last/active swing phase', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 185, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_SWING_DURATION, 'datatype': 'UINT16'}
VAR_BASE_PROCESSOR_LOAD_AVG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 186, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_processor_load_avg = {'name': 'BASE_PROCESSOR_LOAD_AVG', 'description': 'Average processor load', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 186, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_PROCESSOR_LOAD_AVG, 'datatype': 'REAL32'}
VAR_BASE_HRT_DURATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 187, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_base_hrt_duration = {'name': 'BASE_HRT_DURATION', 'description': 'Execution time of the last Hard real time loop (systick ISR)', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 187, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'us', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_HRT_DURATION, 'datatype': 'UINT16'}
VAR_BASE_HRT_DURATION_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 188, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_base_hrt_duration_max = {'name': 'BASE_HRT_DURATION_MAX', 'description': 'Max execution time of the Hard real time loop (systick ISR)', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 188, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'us', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_HRT_DURATION_MAX, 'datatype': 'UINT16'}
VAR_BASE_HRT_DURATION_AVG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 189, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_base_hrt_duration_avg = {'name': 'BASE_HRT_DURATION_AVG', 'description': 'Average execution time of the Hard real time loop (systick ISR)', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 189, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'us', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_HRT_DURATION_AVG, 'datatype': 'UINT16'}
VAR_BASE_STACK_MEM_USAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 190, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_stack_mem_usage = {'name': 'BASE_STACK_MEM_USAGE', 'description': 'Maximum usage of stack memory', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 190, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_STACK_MEM_USAGE, 'datatype': 'UINT8'}
VAR_BASE_STACK_MEM_USAGE_KB = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 191, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_stack_mem_usage_kb = {'name': 'BASE_STACK_MEM_USAGE_KB', 'description': 'Maximum usage of stack memory', 'min': '0', 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 191, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_STACK_MEM_USAGE_KB, 'datatype': 'UINT32'}
VAR_BASE_HEAP_MEM_USAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 192, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_heap_mem_usage = {'name': 'BASE_HEAP_MEM_USAGE', 'description': 'Maximum usage of heap memory', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 192, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_HEAP_MEM_USAGE, 'datatype': 'UINT8'}
VAR_BASE_HEAP_MEM_USAGE_KB = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 193, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_heap_mem_usage_kb = {'name': 'BASE_HEAP_MEM_USAGE_KB', 'description': 'Maximum usage of heap memory', 'min': '0', 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 193, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_BASE_HEAP_MEM_USAGE_KB, 'datatype': 'UINT32'}
VAR_BASE_DIAG_IO_UPDATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 194, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_diag_io_update = {'name': 'BASE_DIAG_IO_UPDATE', 'description': 'Enable and disable sensor reads and motor writes in Diagnostic Application', 'min': 0, 'max': 3, 'default': 0, 'valueBytes': ['DEVICE.BASE', 194, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_BASE_DIAG_IO_UPDATE, 'datatype': 'UINT8'}
VAR_BASE_BATTERY_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 195, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_battery_status = {'name': 'BASE_BATTERY_STATUS', 'description': 'Status of the BMS', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 195, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_BATTERY_STATUS, 'datatype': 'UINT32'}
VAR_BASE_BATTERY_REMAINING_CAPACITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 196, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_battery_remaining_capacity = {'name': 'BASE_BATTERY_REMAINING_CAPACITY', 'description': 'Remaining capacity of the battery', 'min': 0, 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 196, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_BASE_BATTERY_REMAINING_CAPACITY, 'datatype': 'REAL32'}
VAR_BASE_USER_WARNING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 197, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_user_warning = {'name': 'BASE_USER_WARNING', 'description': 'Device warning', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 197, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_USER_WARNING, 'datatype': 'UINT8'}
VAR_BASE_GAIT_SUBPHASE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 198, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_gait_subphase = {'name': 'BASE_GAIT_SUBPHASE', 'description': 'Current subphase', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 198, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GAIT_SUBPHASE, 'datatype': 'UINT8'}
VAR_BASE_ACC_X_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 199, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_acc_x_local = {'name': 'BASE_ACC_X_LOCAL', 'description': 'Acceleration X axis sensor reference frame', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 199, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_ACC_X_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_ACC_Y_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 200, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_acc_y_local = {'name': 'BASE_ACC_Y_LOCAL', 'description': 'Acceleration Y axis sensor reference frame', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 200, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_ACC_Y_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_ACC_Z_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 201, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_acc_z_local = {'name': 'BASE_ACC_Z_LOCAL', 'description': 'Acceleration Z axis sensor reference frame', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 201, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s^2', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_ACC_Z_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_GYRO_X_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 202, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_gyro_x_local = {'name': 'BASE_GYRO_X_LOCAL', 'description': 'Gyroscope X axis', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 202, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GYRO_X_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_GYRO_Y_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 203, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_gyro_y_local = {'name': 'BASE_GYRO_Y_LOCAL', 'description': 'Gyroscope Y axis', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 203, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GYRO_Y_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_GYRO_Z_LOCAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 204, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_gyro_z_local = {'name': 'BASE_GYRO_Z_LOCAL', 'description': 'Gyroscope Z axis', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 204, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_GYRO_Z_LOCAL, 'datatype': 'REAL32'}
VAR_BASE_LED_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 205, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_base_led_status = {'name': 'BASE_LED_STATUS', 'description': 'The status flag for LED driver', 'min': '0', 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 205, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_LED_STATUS, 'datatype': 'UINT32'}
VAR_BASE_MOMENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 206, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_base_moment = {'name': 'BASE_MOMENT', 'description': 'returns the moment', 'min': 0, 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 206, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_MOMENT, 'datatype': 'REAL32'}
VAR_BASE_ON_GROUND = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 207, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_on_ground = {'name': 'BASE_ON_GROUND', 'description': 'On_Ground variable ', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 207, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_ON_GROUND, 'datatype': 'UINT8'}
VAR_BASE_OPERATIONAL_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 208, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_operational_mode = {'name': 'BASE_OPERATIONAL_MODE', 'description': 'Operational mode of the application( Init/normal/warning/error) ', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 208, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_OPERATIONAL_MODE, 'datatype': 'UINT8'}
VAR_BASE_CALIBRATION_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 209, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_calibration_status = {'name': 'BASE_CALIBRATION_STATUS', 'description': 'Calibration status of the device', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 209, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_CALIBRATION_STATUS, 'datatype': 'UINT8'}
VAR_BASE_FIRMWARE_EXECUTION_REMAP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 210, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_firmware_execution_remap = {'name': 'BASE_FIRMWARE_EXECUTION_REMAP', 'description': 'Code remap location 0=NVM, 1=ESRAM, 2=LPDDR', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 210, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_BASE_FIRMWARE_EXECUTION_REMAP, 'datatype': 'UINT8'}
VAR_BASE_TEMPERATURE_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 211, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_temperature_status = {'name': 'BASE_TEMPERATURE_STATUS', 'description': 'status of the temperature sensor on the EXP-board', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 211, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_BASE_TEMPERATURE_STATUS, 'datatype': 'UINT8'}
VAR_BASE_B3C_DUMMY_VARIABLE_FLOAT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 212, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_base_b3c_dummy_variable_float = {'name': 'BASE_B3C_DUMMY_VARIABLE_FLOAT', 'description': '...', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 212, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_BASE_B3C_DUMMY_VARIABLE_FLOAT, 'datatype': 'REAL32'}
VAR_BASE_B3C_DUMMY_VARIABLE_UINT8 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 213, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_base_b3c_dummy_variable_uint8 = {'name': 'BASE_B3C_DUMMY_VARIABLE_UINT8', 'description': '...', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 213, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_BASE_B3C_DUMMY_VARIABLE_UINT8, 'datatype': 'UINT8'}
VAR_BASE_WARNING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 214, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_base_warning = {'name': 'BASE_WARNING', 'description': 'Input ID that triggered warning', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BASE', 214, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_BASE_WARNING, 'datatype': 'UINT8'}
VAR_LEG_ACCEL_DELTA = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 1, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_accel_delta = {'name': 'LEG_ACCEL_DELTA', 'description': 'Max acceleration magnitude subracted by min acceleration magnitude', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 1, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_ACCEL_DELTA, 'datatype': 'UINT16'}
VAR_LEG_CHAIR_EXIT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 2, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_chair_exit_count = {'name': 'LEG_CHAIR_EXIT_COUNT', 'description': 'Total chair exit counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 2, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_LEG_CHAIR_EXIT_COUNT, 'datatype': 'UINT32'}
VAR_LEG_CHAIR_EXIT_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 3, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_chair_exit_count_slr = {'name': 'LEG_CHAIR_EXIT_COUNT_SLR', 'description': 'total chair exit counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 3, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_CHAIR_EXIT_COUNT_SLR, 'datatype': 'UINT32'}
VAR_LEG_DISTANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 4, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_distance = {'name': 'LEG_DISTANCE', 'description': 'Total distance walked', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 4, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'm', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_DISTANCE, 'datatype': 'UINT32'}
VAR_LEG_DISTANCE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 5, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_distance_slr = {'name': 'LEG_DISTANCE_SLR', 'description': 'Total distance walked since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 5, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'm', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_DISTANCE_SLR, 'datatype': 'UINT32'}
VAR_LEG_FILTERED_SURFACE_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 6, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_leg_filtered_surface_angle = {'name': 'LEG_FILTERED_SURFACE_ANGLE', 'description': 'Filtered surface angle', 'min': -15000, 'max': 15000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 6, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_FILTERED_SURFACE_ANGLE, 'datatype': 'INT16'}
VAR_LEG_FORCE_ANTERIOR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 7, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_force_anterior = {'name': 'LEG_FORCE_ANTERIOR', 'description': 'Load anterior', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 7, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mN', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_FORCE_ANTERIOR, 'datatype': 'INT32'}
VAR_LEG_FORCE_POSTERIOR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 8, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_force_posterior = {'name': 'LEG_FORCE_POSTERIOR', 'description': 'Load posterior', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 8, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mN', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_FORCE_POSTERIOR, 'datatype': 'INT32'}
VAR_LEG_FORCE_MAX_ANTERIOR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 9, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_leg_force_max_anterior = {'name': 'LEG_FORCE_MAX_ANTERIOR', 'description': 'max load anterior last stride', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 9, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'mN', 'value': VAR_LEG_FORCE_MAX_ANTERIOR, 'datatype': 'INT16'}
VAR_LEG_FORCE_MAX_POSTERIOR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 10, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_leg_force_max_posterior = {'name': 'LEG_FORCE_MAX_POSTERIOR', 'description': 'Max load posterior last stride', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 10, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'mN', 'value': VAR_LEG_FORCE_MAX_POSTERIOR, 'datatype': 'INT16'}
VAR_LEG_FORCE_MAX_ANTERIOR_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 11, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_force_max_anterior_average = {'name': 'LEG_FORCE_MAX_ANTERIOR_AVERAGE', 'description': 'Average max load anterior', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 11, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mN', 'value': VAR_LEG_FORCE_MAX_ANTERIOR_AVERAGE, 'datatype': 'INT32'}
VAR_LEG_FORCE_MAX_ANTERIOR_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 12, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_force_max_anterior_average_slr = {'name': 'LEG_FORCE_MAX_ANTERIOR_AVERAGE_SLR', 'description': 'Average max load anterior since last reset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 12, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mN', 'value': VAR_LEG_FORCE_MAX_ANTERIOR_AVERAGE_SLR, 'datatype': 'INT32'}
VAR_LEG_FORCE_MAX_POSTERIOR_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 13, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_force_max_posterior_average = {'name': 'LEG_FORCE_MAX_POSTERIOR_AVERAGE', 'description': 'Average max load posterior', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 13, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mN', 'value': VAR_LEG_FORCE_MAX_POSTERIOR_AVERAGE, 'datatype': 'INT32'}
VAR_LEG_FORCE_MAX_POSTERIOR_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 14, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_force_max_posterior_average_slr = {'name': 'LEG_FORCE_MAX_POSTERIOR_AVERAGE_SLR', 'description': 'Average max load posterior since last reset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 14, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mN', 'value': VAR_LEG_FORCE_MAX_POSTERIOR_AVERAGE_SLR, 'datatype': 'INT32'}
VAR_LEG_FORCE_RATIO_MAX_ANT_POST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 15, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_leg_force_ratio_max_ant_post = {'name': 'LEG_FORCE_RATIO_MAX_ANT_POST', 'description': 'Max load anterior vs. Max load posterior', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.LEG', 15, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '%', 'value': VAR_LEG_FORCE_RATIO_MAX_ANT_POST, 'datatype': 'UINT16'}
VAR_LEG_FORCE_RATIO_MAX_ANT_POST_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 16, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_leg_force_ratio_max_ant_post_slr = {'name': 'LEG_FORCE_RATIO_MAX_ANT_POST_SLR', 'description': 'Max load anterior vs. Max load posterior since last reset', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.LEG', 16, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_FORCE_RATIO_MAX_ANT_POST_SLR, 'datatype': 'UINT16'}
VAR_LEG_HEELSTRIKE_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 17, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_heelstrike_count = {'name': 'LEG_HEELSTRIKE_COUNT', 'description': 'Total heelstrike counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 17, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_LEG_HEELSTRIKE_COUNT, 'datatype': 'UINT32'}
VAR_LEG_HEELSTRIKE_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 18, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_heelstrike_count_slr = {'name': 'LEG_HEELSTRIKE_COUNT_SLR', 'description': 'Total heelstrike counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 18, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_HEELSTRIKE_COUNT_SLR, 'datatype': 'UINT32'}
VAR_LEG_MAX_ACCEL_DELTA = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 19, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_max_accel_delta = {'name': 'LEG_MAX_ACCEL_DELTA', 'description': 'Maximum value of Accel Delta', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 19, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_MAX_ACCEL_DELTA, 'datatype': 'UINT16'}
VAR_LEG_MAX_ACCEL_DELTA_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 20, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_max_accel_delta_slr = {'name': 'LEG_MAX_ACCEL_DELTA_SLR', 'description': 'Maximum value of Accel Delta since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 20, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_MAX_ACCEL_DELTA_SLR, 'datatype': 'UINT16'}
VAR_LEG_MIDSTANCE_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 21, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_midstance_count = {'name': 'LEG_MIDSTANCE_COUNT', 'description': 'Total midstance counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 21, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_LEG_MIDSTANCE_COUNT, 'datatype': 'UINT32'}
VAR_LEG_MIDSTANCE_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 22, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_midstance_count_slr = {'name': 'LEG_MIDSTANCE_COUNT_SLR', 'description': 'Total midstance counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 22, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_MIDSTANCE_COUNT_SLR, 'datatype': 'UINT32'}
VAR_LEG_MIDSWING_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 23, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_midswing_count = {'name': 'LEG_MIDSWING_COUNT', 'description': 'Total midswing counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 23, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_LEG_MIDSWING_COUNT, 'datatype': 'UINT32'}
VAR_LEG_MIDSWING_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 24, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_midswing_count_slr = {'name': 'LEG_MIDSWING_COUNT_SLR', 'description': 'Total midswing counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 24, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_MIDSWING_COUNT_SLR, 'datatype': 'UINT32'}
VAR_LEG_MODE_DOWNSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 25, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_leg_mode_downstairs = {'name': 'LEG_MODE_DOWNSTAIRS', 'description': 'Stairs up mode (0=disabled, 1=enabled, 2=enabled with alternate stairs response)', 'min': 0, 'max': 2, 'default': 1, 'valueBytes': ['DEVICE.LEG', 25, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_LEG_MODE_DOWNSTAIRS, 'datatype': 'UINT8'}
VAR_LEG_MODE_RELAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 26, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_leg_mode_relax = {'name': 'LEG_MODE_RELAX', 'description': 'Relax mode (0=disabled, 1=enabled, 2=relax exit mode only)', 'min': 0, 'max': 2, 'default': 0, 'valueBytes': ['DEVICE.LEG', 26, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_LEG_MODE_RELAX, 'datatype': 'UINT8'}
VAR_LEG_MODE_UPSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 27, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_leg_mode_upstairs = {'name': 'LEG_MODE_UPSTAIRS', 'description': 'Stairs down mode (0=disabled, 1=enabled, 2=enabled with alternate stairs response)', 'min': 0, 'max': 2, 'default': 1, 'valueBytes': ['DEVICE.LEG', 27, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_LEG_MODE_UPSTAIRS, 'datatype': 'UINT8'}
VAR_LEG_SPEED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 28, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed = {'name': 'LEG_SPEED', 'description': 'Speed', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 28, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SPEED, 'datatype': 'UINT16'}
VAR_LEG_SPEED_DOWNSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 29, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_downstairs = {'name': 'LEG_SPEED_DOWNSTAIRS', 'description': 'Accumilated speed downstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 29, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'value': VAR_LEG_SPEED_DOWNSTAIRS, 'datatype': 'UINT16'}
VAR_LEG_SPEED_DOWNSTAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 30, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_downstairs_slr = {'name': 'LEG_SPEED_DOWNSTAIRS_SLR', 'description': 'Accumiltated speed downstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 30, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SPEED_DOWNSTAIRS_SLR, 'datatype': 'UINT16'}
VAR_LEG_SPEED_DOWNSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 31, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_downstairs_average = {'name': 'LEG_SPEED_DOWNSTAIRS_AVERAGE', 'description': 'Average speed downstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 31, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'value': VAR_LEG_SPEED_DOWNSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_SPEED_DOWNSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 32, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_downstairs_average_slr = {'name': 'LEG_SPEED_DOWNSTAIRS_AVERAGE_SLR', 'description': 'Average speed downstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 32, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SPEED_DOWNSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_SPEED_UPSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 33, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_upstairs = {'name': 'LEG_SPEED_UPSTAIRS', 'description': 'Accumilated speed upstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 33, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'value': VAR_LEG_SPEED_UPSTAIRS, 'datatype': 'UINT16'}
VAR_LEG_SPEED_UPSTAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 34, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_upstairs_slr = {'name': 'LEG_SPEED_UPSTAIRS_SLR', 'description': 'Accumilated speed upstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 34, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SPEED_UPSTAIRS_SLR, 'datatype': 'UINT16'}
VAR_LEG_SPEED_UPSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 35, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_upstairs_average = {'name': 'LEG_SPEED_UPSTAIRS_AVERAGE', 'description': 'Average speed upstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 35, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'value': VAR_LEG_SPEED_UPSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_SPEED_UPSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 36, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_upstairs_average_slr = {'name': 'LEG_SPEED_UPSTAIRS_AVERAGE_SLR', 'description': 'Average speed upstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 36, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SPEED_UPSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_SPEED_WALK_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 37, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_walk_average = {'name': 'LEG_SPEED_WALK_AVERAGE', 'description': 'Average speed walking', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 37, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'value': VAR_LEG_SPEED_WALK_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_SPEED_WALK_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 38, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_speed_walk_average_slr = {'name': 'LEG_SPEED_WALK_AVERAGE_SLR', 'description': 'Average speed walking since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 38, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SPEED_WALK_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 39, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stance_time_downstairs_average = {'name': 'LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE', 'description': 'Average stance time downstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 39, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 40, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stance_time_downstairs_average_slr = {'name': 'LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE_SLR', 'description': 'Average stance time downstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 40, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_STANCE_TIME_UPSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 41, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stance_time_upstairs_average = {'name': 'LEG_STANCE_TIME_UPSTAIRS_AVERAGE', 'description': 'Average stance time upstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 41, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_STANCE_TIME_UPSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_STANCE_TIME_UPSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 42, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stance_time_upstairs_average_slr = {'name': 'LEG_STANCE_TIME_UPSTAIRS_AVERAGE_SLR', 'description': 'Average stance time upstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 42, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STANCE_TIME_UPSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_STANCE_TIME_WALK_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 43, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stance_time_walk_average = {'name': 'LEG_STANCE_TIME_WALK_AVERAGE', 'description': 'Average stance time walking', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 43, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_STANCE_TIME_WALK_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_STANCE_TIME_WALK_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 44, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stance_time_walk_average_slr = {'name': 'LEG_STANCE_TIME_WALK_AVERAGE_SLR', 'description': 'Average stance time walking since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 44, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STANCE_TIME_WALK_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_STEP_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 45, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count = {'name': 'LEG_STEP_COUNT', 'description': 'Total step count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 45, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_STEP_COUNT, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_DOWNSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 46, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_downstairs = {'name': 'LEG_STEP_COUNT_DOWNSTAIRS', 'description': 'Total step count downstairs', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 46, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'value': VAR_LEG_STEP_COUNT_DOWNSTAIRS, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_DOWNSTAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 47, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_downstairs_slr = {'name': 'LEG_STEP_COUNT_DOWNSTAIRS_SLR', 'description': 'Total step count downstairs since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 47, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_DOWNSTAIRS_SLR, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_IN_STAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 48, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_in_stairs = {'name': 'LEG_STEP_COUNT_IN_STAIRS', 'description': 'Total step count in stairs', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 48, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'value': VAR_LEG_STEP_COUNT_IN_STAIRS, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_IN_STAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 49, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_in_stairs_slr = {'name': 'LEG_STEP_COUNT_IN_STAIRS_SLR', 'description': 'Total step count in stairs since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 49, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'value': VAR_LEG_STEP_COUNT_IN_STAIRS_SLR, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_LAST_24_HOURS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 50, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_last_24_hours = {'name': 'LEG_STEP_COUNT_LAST_24_HOURS', 'description': 'Total step count last 24 hours', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 50, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_LAST_24_HOURS, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_LAST_30_DAYS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 51, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_last_30_days = {'name': 'LEG_STEP_COUNT_LAST_30_DAYS', 'description': 'Total step count last 30 days', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 51, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_LAST_30_DAYS, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_LAST_12_MONTHS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 52, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_last_12_months = {'name': 'LEG_STEP_COUNT_LAST_12_MONTHS', 'description': 'Total step count last 6 months', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 52, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_LAST_12_MONTHS, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 53, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_slr = {'name': 'LEG_STEP_COUNT_SLR', 'description': 'Total step count since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 53, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_SLR, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_UPSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 54, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_upstairs = {'name': 'LEG_STEP_COUNT_UPSTAIRS', 'description': 'Total step count upstairs', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 54, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'value': VAR_LEG_STEP_COUNT_UPSTAIRS, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_UPSTAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 55, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_upstairs_slr = {'name': 'LEG_STEP_COUNT_UPSTAIRS_SLR', 'description': 'Total step count upstairs since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 55, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_UPSTAIRS_SLR, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_WALKING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 56, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_walking = {'name': 'LEG_STEP_COUNT_WALKING', 'description': 'Total step count walking', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 56, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'value': VAR_LEG_STEP_COUNT_WALKING, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_WALKING_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 57, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_walking_slr = {'name': 'LEG_STEP_COUNT_WALKING_SLR', 'description': 'Total step count walking since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 57, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_WALKING_SLR, 'datatype': 'UINT32'}
VAR_LEG_STRIDE_AVERAGE_LENGTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 58, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_average_length = {'name': 'LEG_STRIDE_AVERAGE_LENGTH', 'description': 'Average stride length', 'min': 0, 'max': 2, 'default': 0, 'valueBytes': ['DEVICE.LEG', 58, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'm', 'value': VAR_LEG_STRIDE_AVERAGE_LENGTH, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_AVERAGE_LENGTH_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 59, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_average_length_slr = {'name': 'LEG_STRIDE_AVERAGE_LENGTH_SLR', 'description': 'Average stride length since last reset', 'min': 0, 'max': 2, 'default': 0, 'valueBytes': ['DEVICE.LEG', 59, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'm', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_AVERAGE_LENGTH_SLR, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_LENGTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 60, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_length = {'name': 'LEG_STRIDE_LENGTH', 'description': 'Stride length', 'min': 0, 'max': 2000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 60, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_LENGTH, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_TIME = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 61, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_time = {'name': 'LEG_STRIDE_TIME', 'description': 'Current stride time', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 61, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_TIME, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 62, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_time_downstairs_average = {'name': 'LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE', 'description': 'Average stride time downstairs', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 62, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 63, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_time_downstairs_average_slr = {'name': 'LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE_SLR', 'description': 'Average stride time downstairs since last reset', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 63, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_TIME_UPSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 64, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_time_upstairs_average = {'name': 'LEG_STRIDE_TIME_UPSTAIRS_AVERAGE', 'description': 'Average stride time upstairs', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 64, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_STRIDE_TIME_UPSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_TIME_UPSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 65, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_time_upstairs_average_slr = {'name': 'LEG_STRIDE_TIME_UPSTAIRS_AVERAGE_SLR', 'description': 'Average stride time upstairs since last reset', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 65, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_TIME_UPSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_TIME_WALK_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 66, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_time_walk_average = {'name': 'LEG_STRIDE_TIME_WALK_AVERAGE', 'description': 'Average stride time walking', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 66, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_STRIDE_TIME_WALK_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_TIME_WALK_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 67, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stride_time_walk_average_slr = {'name': 'LEG_STRIDE_TIME_WALK_AVERAGE_SLR', 'description': 'Average stride time walking since last reset', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.LEG', 67, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_TIME_WALK_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_STUMBLE_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 68, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stumble_count = {'name': 'LEG_STUMBLE_COUNT', 'description': '# of stumbles', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 68, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STUMBLE_COUNT, 'datatype': 'UINT16'}
VAR_LEG_STUMBLE_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 69, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_stumble_count_slr = {'name': 'LEG_STUMBLE_COUNT_SLR', 'description': '# of stumbles since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 69, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'value': VAR_LEG_STUMBLE_COUNT_SLR, 'datatype': 'UINT16'}
VAR_LEG_SURFACE_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 70, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_leg_surface_angle = {'name': 'LEG_SURFACE_ANGLE', 'description': 'Surface angle', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 70, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SURFACE_ANGLE, 'datatype': 'INT32'}
VAR_LEG_SWING_TIME_DOWNSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 71, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_swing_time_downstairs_average = {'name': 'LEG_SWING_TIME_DOWNSTAIRS_AVERAGE', 'description': 'Average swing time downstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 71, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_SWING_TIME_DOWNSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_SWING_TIME_DOWNSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 72, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_swing_time_downstairs_average_slr = {'name': 'LEG_SWING_TIME_DOWNSTAIRS_AVERAGE_SLR', 'description': 'Average swing time downstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 72, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SWING_TIME_DOWNSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_SWING_TIME_UPSTAIRS_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 73, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_swing_time_upstairs_average = {'name': 'LEG_SWING_TIME_UPSTAIRS_AVERAGE', 'description': 'Average swing time upstairs', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 73, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_SWING_TIME_UPSTAIRS_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_SWING_TIME_UPSTAIRS_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 74, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_swing_time_upstairs_average_slr = {'name': 'LEG_SWING_TIME_UPSTAIRS_AVERAGE_SLR', 'description': 'Average swing time upstairs since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 74, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SWING_TIME_UPSTAIRS_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_SWING_TIME_WALK_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 75, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_swing_time_walk_average = {'name': 'LEG_SWING_TIME_WALK_AVERAGE', 'description': 'Average swing time walking', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 75, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'value': VAR_LEG_SWING_TIME_WALK_AVERAGE, 'datatype': 'UINT16'}
VAR_LEG_SWING_TIME_WALK_AVERAGE_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 76, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_swing_time_walk_average_slr = {'name': 'LEG_SWING_TIME_WALK_AVERAGE_SLR', 'description': 'Average swing time walking since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 76, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SWING_TIME_WALK_AVERAGE_SLR, 'datatype': 'UINT16'}
VAR_LEG_TIME_DOWNSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 77, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_downstairs = {'name': 'LEG_TIME_DOWNSTAIRS', 'description': 'Time spent downstairs', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 77, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_LEG_TIME_DOWNSTAIRS, 'datatype': 'UINT32'}
VAR_LEG_TIME_DOWNSTAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 78, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_downstairs_slr = {'name': 'LEG_TIME_DOWNSTAIRS_SLR', 'description': 'Time spent downstairs since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 78, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_TIME_DOWNSTAIRS_SLR, 'datatype': 'UINT32'}
VAR_LEG_TIME_STAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 79, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_stairs = {'name': 'LEG_TIME_STAIRS', 'description': 'Time spent in stairs', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 79, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_LEG_TIME_STAIRS, 'datatype': 'UINT32'}
VAR_LEG_TIME_STAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 80, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_stairs_slr = {'name': 'LEG_TIME_STAIRS_SLR', 'description': 'Time spent in stairs since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 80, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_LEG_TIME_STAIRS_SLR, 'datatype': 'UINT32'}
VAR_LEG_TIME_STANDING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 81, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_standing = {'name': 'LEG_TIME_STANDING', 'description': 'Time spent standing', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 81, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_LEG_TIME_STANDING, 'datatype': 'UINT32'}
VAR_LEG_TIME_STANDING_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 82, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_standing_slr = {'name': 'LEG_TIME_STANDING_SLR', 'description': 'Time spent standing since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 82, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_TIME_STANDING_SLR, 'datatype': 'UINT32'}
VAR_LEG_TIME_UPSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 83, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_upstairs = {'name': 'LEG_TIME_UPSTAIRS', 'description': 'Time spent upstairs', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 83, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_LEG_TIME_UPSTAIRS, 'datatype': 'UINT32'}
VAR_LEG_TIME_UPSTAIRS_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 84, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_upstairs_slr = {'name': 'LEG_TIME_UPSTAIRS_SLR', 'description': 'Time spent upstairs since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 84, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_TIME_UPSTAIRS_SLR, 'datatype': 'UINT32'}
VAR_LEG_TIME_WALKING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 85, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_walking = {'name': 'LEG_TIME_WALKING', 'description': 'Time spent walking', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 85, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'value': VAR_LEG_TIME_WALKING, 'datatype': 'UINT32'}
VAR_LEG_TIME_WALKING_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 86, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_time_walking_slr = {'name': 'LEG_TIME_WALKING_SLR', 'description': 'Time spent walking since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 86, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 's', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_TIME_WALKING_SLR, 'datatype': 'UINT32'}
VAR_LEG_TOE_OFF_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 87, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_toe_off_count = {'name': 'LEG_TOE_OFF_COUNT', 'description': 'Total toe off counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 87, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_LEG_TOE_OFF_COUNT, 'datatype': 'UINT32'}
VAR_LEG_TOE_OFF_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 88, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_toe_off_count_slr = {'name': 'LEG_TOE_OFF_COUNT_SLR', 'description': 'Total toe off counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 88, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_TOE_OFF_COUNT_SLR, 'datatype': 'UINT32'}
VAR_LEG_USER_FOOT_CATEGORY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 89, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_user_foot_category = {'name': 'LEG_USER_FOOT_CATEGORY', 'description': 'User foot category', 'min': 1, 'max': 10, 'default': 5, 'valueBytes': ['DEVICE.LEG', 89, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_LEG_USER_FOOT_CATEGORY, 'datatype': 'UINT8'}
VAR_LEG_USER_FOOT_PRODUCT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 90, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_leg_user_foot_product = {'name': 'LEG_USER_FOOT_PRODUCT', 'description': 'User foot product', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 90, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'value': VAR_LEG_USER_FOOT_PRODUCT, 'datatype': 'TEXT'}
VAR_LEG_USER_FOOT_SIZE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 91, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_user_foot_size = {'name': 'LEG_USER_FOOT_SIZE', 'description': 'User foot size', 'min': 20, 'max': 30, 'default': 25, 'valueBytes': ['DEVICE.LEG', 91, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_USER_FOOT_SIZE, 'datatype': 'UINT16'}
VAR_LEG_USER_KNEE_HEIGHT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 92, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_leg_user_knee_height = {'name': 'LEG_USER_KNEE_HEIGHT', 'description': 'User knee height', 'min': 100, 'max': 800, 'default': 500, 'valueBytes': ['DEVICE.LEG', 92, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': 'mm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_USER_KNEE_HEIGHT, 'datatype': 'UINT16'}
VAR_LEG_USER_LEG_SIZE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 93, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_leg_user_leg_size = {'name': 'LEG_USER_LEG_SIZE', 'description': 'User leg size', 'min': 100, 'max': 1500, 'default': 1000, 'valueBytes': ['DEVICE.LEG', 93, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': 'mm', 'value': VAR_LEG_USER_LEG_SIZE, 'datatype': 'UINT16'}
VAR_LEG_USER_THIGH_LENGTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 94, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_leg_user_thigh_length = {'name': 'LEG_USER_THIGH_LENGTH', 'description': 'User thigh length', 'min': 100, 'max': 800, 'default': 500, 'valueBytes': ['DEVICE.LEG', 94, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': 'mm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_USER_THIGH_LENGTH, 'datatype': 'UINT16'}
VAR_LEG_USER_AMPUTATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 95, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_user_amputation = {'name': 'LEG_USER_AMPUTATION', 'description': 'User amputation level (TT = 0, TF = 1)', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.LEG', 95, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_USER_AMPUTATION, 'datatype': 'UINT8'}
VAR_LEG_VACUUM = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 96, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_vacuum = {'name': 'LEG_VACUUM', 'description': 'Current Socket vacuum, pressure below atmospheric pressure', 'min': -2000, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 96, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mBar', 'value': VAR_LEG_VACUUM, 'datatype': 'INT32'}
VAR_LEG_VACUUM_AMBULATING_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 97, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_vacuum_ambulating_average = {'name': 'LEG_VACUUM_AMBULATING_AVERAGE', 'description': 'Socket vacuum, pressure below atmospheric pressure while ambulating', 'min': -2000, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 97, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mBar', 'value': VAR_LEG_VACUUM_AMBULATING_AVERAGE, 'datatype': 'INT32'}
VAR_LEG_VACUUM_NON_AMBULATING_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 98, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_vacuum_non_ambulating_average = {'name': 'LEG_VACUUM_NON_AMBULATING_AVERAGE', 'description': 'Socket vacuum, pressure below atmospheric pressure while non-ambulating', 'min': -2000, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 98, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mBar', 'value': VAR_LEG_VACUUM_NON_AMBULATING_AVERAGE, 'datatype': 'INT32'}
VAR_LEG_VACUUM_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 99, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_vacuum_max = {'name': 'LEG_VACUUM_MAX', 'description': 'Maximum measured vacuum', 'min': -2000, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 99, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mBar', 'value': VAR_LEG_VACUUM_MAX, 'datatype': 'INT32'}
VAR_LEG_VACUUM_MAX_CHANGE_IN_STRIDE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 100, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_leg_vacuum_max_change_in_stride = {'name': 'LEG_VACUUM_MAX_CHANGE_IN_STRIDE', 'description': 'Max change in vacuum in a single stride', 'min': -2000, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 100, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mBar', 'value': VAR_LEG_VACUUM_MAX_CHANGE_IN_STRIDE, 'datatype': 'INT32'}
VAR_LEG_WALK_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 101, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_leg_walk_count = {'name': 'LEG_WALK_COUNT', 'description': 'Total walk count, walk sessions', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 101, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_WALK_COUNT, 'datatype': 'UINT32'}
VAR_LEG_STANCE_TIME_WALK_RATIO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 102, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_stance_time_walk_ratio = {'name': 'LEG_STANCE_TIME_WALK_RATIO', 'description': 'Stance time walking ratio', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.LEG', 102, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'value': VAR_LEG_STANCE_TIME_WALK_RATIO, 'datatype': 'UINT8'}
VAR_LEG_SWING_TIME_WALK_RATIO = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 103, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_swing_time_walk_ratio = {'name': 'LEG_SWING_TIME_WALK_RATIO', 'description': 'Swing time walking ratio', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.LEG', 103, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SWING_TIME_WALK_RATIO, 'datatype': 'UINT8'}
VAR_LEG_STANCE_TIME_WALK_RATIO_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 104, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_stance_time_walk_ratio_average = {'name': 'LEG_STANCE_TIME_WALK_RATIO_AVERAGE', 'description': 'Average stance time walking ratio', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.LEG', 104, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'value': VAR_LEG_STANCE_TIME_WALK_RATIO_AVERAGE, 'datatype': 'UINT8'}
VAR_LEG_SWING_TIME_WALK_RATIO_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 105, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_swing_time_walk_ratio_average = {'name': 'LEG_SWING_TIME_WALK_RATIO_AVERAGE', 'description': 'Average swing time walking ratio', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.LEG', 105, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'value': VAR_LEG_SWING_TIME_WALK_RATIO_AVERAGE, 'datatype': 'UINT8'}
VAR_LEG_STRIDE_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 106, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_stride_count = {'name': 'LEG_STRIDE_COUNT', 'description': 'Total strides', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 106, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_COUNT, 'datatype': 'UINT32'}
VAR_LEG_STRIDE_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 107, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_stride_count_slr = {'name': 'LEG_STRIDE_COUNT_SLR', 'description': 'Total strides since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 107, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_COUNT_SLR, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_TODAY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 108, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_today = {'name': 'LEG_STEP_COUNT_TODAY', 'description': 'Total steps since today, since midnight', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 108, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_TODAY, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_THIS_WEEK = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 109, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_this_week = {'name': 'LEG_STEP_COUNT_THIS_WEEK', 'description': 'Total steps since the beginning of this week', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 109, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_THIS_WEEK, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_THIS_MONTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 110, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_this_month = {'name': 'LEG_STEP_COUNT_THIS_MONTH', 'description': 'Total steps since the beginning of this month', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 110, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_THIS_MONTH, 'datatype': 'UINT32'}
VAR_LEG_STEP_COUNT_THIS_YEAR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 111, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_step_count_this_year = {'name': 'LEG_STEP_COUNT_THIS_YEAR', 'description': 'Total steps since the beginning of this year', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 111, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STEP_COUNT_THIS_YEAR, 'datatype': 'UINT32'}
VAR_LEG_CADENCE_MAX_PER_DAY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 112, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_BUFFER]), byteorder='little')
var_leg_cadence_max_per_day = {'name': 'LEG_CADENCE_MAX_PER_DAY', 'description': 'Max cadence per day over one year, uint8 array of 366', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 112, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.BUFFER'], 'unit': 'steps/min', 'value': VAR_LEG_CADENCE_MAX_PER_DAY, 'datatype': 'BUFFER'}
VAR_LEG_CADENCE_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 113, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_cadence_max = {'name': 'LEG_CADENCE_MAX', 'description': 'Max cadence', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 113, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'steps/min', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_CADENCE_MAX, 'datatype': 'UINT8'}
VAR_LEG_CADENCE_MAX_TODAY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 114, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_leg_cadence_max_today = {'name': 'LEG_CADENCE_MAX_TODAY', 'description': 'Max cadence today', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.LEG', 114, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'steps/min', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_CADENCE_MAX_TODAY, 'datatype': 'UINT8'}
VAR_LEG_USER_AGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 115, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_leg_user_age = {'name': 'LEG_USER_AGE', 'description': 'User age', 'min': 0, 'max': 110, 'default': 30, 'valueBytes': ['DEVICE.LEG', 115, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': 'yr', 'value': VAR_LEG_USER_AGE, 'datatype': 'UINT8'}
VAR_LEG_USER_WEIGHT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 116, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_leg_user_weight = {'name': 'LEG_USER_WEIGHT', 'description': 'User weight', 'min': 0, 'max': 255, 'default': 80, 'valueBytes': ['DEVICE.LEG', 116, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': 'kg', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_USER_WEIGHT, 'datatype': 'UINT8'}
VAR_LEG_ACCEL_DELTA_HEELSTRIKE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 117, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_accel_delta_heelstrike = {'name': 'LEG_ACCEL_DELTA_HEELSTRIKE', 'description': 'acceleration delta at heelstrike', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 117, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_ACCEL_DELTA_HEELSTRIKE, 'datatype': 'UINT32'}
VAR_LEG_ACCEL_DELTA_HEELSTRIKE_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 118, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_accel_delta_heelstrike_average = {'name': 'LEG_ACCEL_DELTA_HEELSTRIKE_AVERAGE', 'description': 'average acceleration delta at heelstrike', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 118, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'mm/s^2', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_ACCEL_DELTA_HEELSTRIKE_AVERAGE, 'datatype': 'UINT32'}
VAR_LEG_SURFACE_ANGLE_AVERAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 119, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_leg_surface_angle_average = {'name': 'LEG_SURFACE_ANGLE_AVERAGE', 'description': 'Average surface angle', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 119, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_SURFACE_ANGLE_AVERAGE, 'datatype': 'INT32'}
VAR_LEG_EARLY_STAIR_UP_DETECTION_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 120, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_early_stair_up_detection_count = {'name': 'LEG_EARLY_STAIR_UP_DETECTION_COUNT', 'description': 'early stair detection count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 120, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_EARLY_STAIR_UP_DETECTION_COUNT, 'datatype': 'UINT32'}
VAR_LEG_EARLY_STAIR_UP_EXIT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 121, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_early_stair_up_exit_count = {'name': 'LEG_EARLY_STAIR_UP_EXIT_COUNT', 'description': 'early stair exit count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 121, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_EARLY_STAIR_UP_EXIT_COUNT, 'datatype': 'UINT32'}
VAR_LEG_EARLY_STAIR_DOWN_DETECTION_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 122, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_early_stair_down_detection_count = {'name': 'LEG_EARLY_STAIR_DOWN_DETECTION_COUNT', 'description': 'early stair detection count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 122, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_EARLY_STAIR_DOWN_DETECTION_COUNT, 'datatype': 'UINT32'}
VAR_LEG_EARLY_STAIR_DOWN_EXIT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 123, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_early_stair_down_exit_count = {'name': 'LEG_EARLY_STAIR_DOWN_EXIT_COUNT', 'description': 'early stair exit count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 123, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_EARLY_STAIR_DOWN_EXIT_COUNT, 'datatype': 'UINT32'}
VAR_LEG_EARLY_RELAX_EXIT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 124, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_early_relax_exit_count = {'name': 'LEG_EARLY_RELAX_EXIT_COUNT', 'description': 'early relax exit count', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 124, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_EARLY_RELAX_EXIT_COUNT, 'datatype': 'UINT32'}
VAR_LEG_JOINT_ANGLE_AGC = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 125, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_leg_joint_angle_agc = {'name': 'LEG_JOINT_ANGLE_AGC', 'description': 'Joint sensor Automatic Gain Control', 'min': 0, 'max': 64, 'default': 32, 'valueBytes': ['DEVICE.LEG', 125, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_JOINT_ANGLE_AGC, 'datatype': 'UINT16'}
VAR_LEG_STRIDE_COUNT_MAX_PER_CHARGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 126, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_stride_count_max_per_charge = {'name': 'LEG_STRIDE_COUNT_MAX_PER_CHARGE', 'description': 'Maximum number of strides for a single battery charge ', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 126, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_STRIDE_COUNT_MAX_PER_CHARGE, 'datatype': 'UINT32'}
VAR_LEG_U_TURN_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 127, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_u_turn_count = {'name': 'LEG_U_TURN_COUNT', 'description': 'Total amount of u-turns detected', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 127, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_U_TURN_COUNT, 'datatype': 'UINT32'}
VAR_LEG_CURB_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 128, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_curb_count = {'name': 'LEG_CURB_COUNT', 'description': 'Total amount of curbs detected', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 128, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_LEG_CURB_COUNT, 'datatype': 'UINT32'}
VAR_LEG_FORCE_ANTERIOR_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 129, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_force_anterior_raw = {'name': 'LEG_FORCE_ANTERIOR_RAW', 'description': 'Load anterior in sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 129, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_FORCE_ANTERIOR_RAW, 'datatype': 'UINT32'}
VAR_LEG_FORCE_POSTERIOR_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 130, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_force_posterior_raw = {'name': 'LEG_FORCE_POSTERIOR_RAW', 'description': 'Load posterior in sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 130, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_FORCE_POSTERIOR_RAW, 'datatype': 'UINT32'}
VAR_LEG_FORCE_ANTERIOR_2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 131, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_leg_force_anterior_2 = {'name': 'LEG_FORCE_ANTERIOR_2', 'description': 'Load anterior on secondary sensor', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 131, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mN', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_FORCE_ANTERIOR_2, 'datatype': 'INT32'}
VAR_LEG_FORCE_ANTERIOR_2_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 132, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_force_anterior_2_raw = {'name': 'LEG_FORCE_ANTERIOR_2_RAW', 'description': 'Load anterior on secondary sensor in sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 132, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_FORCE_ANTERIOR_2_RAW, 'datatype': 'UINT32'}
VAR_LEG_FORCE_POSTERIOR_2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 133, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_leg_force_posterior_2 = {'name': 'LEG_FORCE_POSTERIOR_2', 'description': 'Load posterior on secondary sensor', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 133, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mN', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_FORCE_POSTERIOR_2, 'datatype': 'INT32'}
VAR_LEG_FORCE_POSTERIOR_2_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 134, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_force_posterior_2_raw = {'name': 'LEG_FORCE_POSTERIOR_2_RAW', 'description': 'Load posterior on secondary sensor in sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 134, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_FORCE_POSTERIOR_2_RAW, 'datatype': 'UINT32'}
VAR_LEG_FORCE_SENSOR_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 135, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_leg_force_sensor_status = {'name': 'LEG_FORCE_SENSOR_STATUS', 'description': 'Status of the ground reaction sensor', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 135, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_FORCE_SENSOR_STATUS, 'datatype': 'UINT32'}
VAR_LEG_GROUND_REACTION_FORCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 136, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_leg_ground_reaction_force = {'name': 'LEG_GROUND_REACTION_FORCE', 'description': 'Measured ground reaction force from all sensors', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 136, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP | DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_GROUND_REACTION_FORCE, 'datatype': 'INT32'}
VAR_LEG_SHANK_ANGLE_SAGITAL_PLANE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 137, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL32]), byteorder='little')
var_leg_shank_angle_sagital_plane = {'name': 'LEG_SHANK_ANGLE_SAGITAL_PLANE', 'description': 'Shank angle compared to vertical in sagital plane, positive when ankle anterior to knee', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 137, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_SHANK_ANGLE_SAGITAL_PLANE, 'datatype': 'REAL32'}
VAR_LEG_SHANK_ANGLE_ROTATION_WITHIN_PHASE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 138, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL32]), byteorder='little')
var_leg_shank_angle_rotation_within_phase = {'name': 'LEG_SHANK_ANGLE_ROTATION_WITHIN_PHASE', 'description': 'Shank angle progression in sagital plane during gait phase, same orientation as shank angle.', 'min': 'REAL32_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 138, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_SHANK_ANGLE_ROTATION_WITHIN_PHASE, 'datatype': 'REAL32'}
VAR_LEG_THIGH_ANGLE_IN_SAGITAL_PLANE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 139, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL32]), byteorder='little')
var_leg_thigh_angle_in_sagital_plane = {'name': 'LEG_THIGH_ANGLE_IN_SAGITAL_PLANE', 'description': 'Thigh angle compared to vertical in sagital plane. Positive when knee anterior to hip.', 'min': 'REAL32_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 139, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_LEG_THIGH_ANGLE_IN_SAGITAL_PLANE, 'datatype': 'REAL32'}
VAR_LEG_THIGH_ANGLE_ROTATION_WITHIN_PHASE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_LEG, 140, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL32]), byteorder='little')
var_leg_thigh_angle_rotation_within_phase = {'name': 'LEG_THIGH_ANGLE_ROTATION_WITHIN_PHASE', 'description': 'Thigh angle progression in sagital plane during gait phase. Same orientation as thigh angle.', 'min': 'REAL32_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.LEG', 140, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_LEG_THIGH_ANGLE_ROTATION_WITHIN_PHASE, 'datatype': 'REAL32'}
VAR_KNEE_EXTENSION_HOLD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 1, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_knee_extension_hold = {'name': 'KNEE_EXTENSION_HOLD', 'description': 'When turned on, the user can kick the knee into extension after which a lock is activated which prevents the knee from flexing. After 5 seconds, the knee automatically unlocks again', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.KNEE', 1, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_EXTENSION_HOLD, 'datatype': 'BOOL'}
VAR_KNEE_FLEXION_TARGET_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 2, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_flexion_target_angle = {'name': 'KNEE_FLEXION_TARGET_ANGLE', 'description': 'The flexion target angle controls the knee flexion angle during the swing phase. Increasing the value means the knee will flex more during walking, decreasing will make the knee flex less.', 'min': 45, 'max': 80, 'default': 60, 'valueBytes': ['DEVICE.KNEE', 2, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_FLEXION_TARGET_ANGLE, 'datatype': 'UINT32'}
VAR_KNEE_JOINT_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 3, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_knee_joint_angle = {'name': 'KNEE_JOINT_ANGLE', 'description': 'TBD', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 3, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_JOINT_ANGLE, 'datatype': 'INT16'}
VAR_KNEE_JOINT_RANGE_OF_MOTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 4, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_knee_joint_range_of_motion = {'name': 'KNEE_JOINT_RANGE_OF_MOTION', 'description': 'TBD', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 4, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '°', 'value': VAR_KNEE_JOINT_RANGE_OF_MOTION, 'datatype': 'INT16'}
VAR_KNEE_JOINT_RANGE_OF_MOTION_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 5, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_knee_joint_range_of_motion_max = {'name': 'KNEE_JOINT_RANGE_OF_MOTION_MAX', 'description': 'TBD', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 5, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '°', 'value': VAR_KNEE_JOINT_RANGE_OF_MOTION_MAX, 'datatype': 'INT16'}
VAR_KNEE_JOINT_RANGE_OF_MOTION_MIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 6, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_knee_joint_range_of_motion_min = {'name': 'KNEE_JOINT_RANGE_OF_MOTION_MIN', 'description': 'TBD', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 6, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '°', 'value': VAR_KNEE_JOINT_RANGE_OF_MOTION_MIN, 'datatype': 'INT16'}
VAR_KNEE_ACTUATOR_POSITION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 7, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_knee_actuator_position = {'name': 'KNEE_ACTUATOR_POSITION', 'description': 'Angle of the knee joint actuator from fully extended.', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 7, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_POSITION, 'datatype': 'REAL32'}
VAR_KNEE_ACTUATOR_RANGE_OF_MOTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 8, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_knee_actuator_range_of_motion = {'name': 'KNEE_ACTUATOR_RANGE_OF_MOTION', 'description': 'TBD', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 8, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'value': VAR_KNEE_ACTUATOR_RANGE_OF_MOTION, 'datatype': 'INT16'}
VAR_KNEE_ACTUATOR_TEMPERATURE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 9, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_knee_actuator_temperature = {'name': 'KNEE_ACTUATOR_TEMPERATURE', 'description': 'Temperature of the actuator', 'min': 0, 'max': '5000', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 9, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°C', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_TEMPERATURE, 'datatype': 'REAL32'}
VAR_KNEE_SITTING_DOWN_RESISTANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 10, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_sitting_down_resistance = {'name': 'KNEE_SITTING_DOWN_RESISTANCE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 10, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_SITTING_DOWN_RESISTANCE, 'datatype': 'UINT32'}
VAR_KNEE_SITTING_DOWN_SIT_INITIATION_TRIGGER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 11, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_sitting_down_sit_initiation_trigger = {'name': 'KNEE_SITTING_DOWN_SIT_INITIATION_TRIGGER', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 11, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_SITTING_DOWN_SIT_INITIATION_TRIGGER, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_ASSISTANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 12, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_assistance = {'name': 'KNEE_STANCE_ASSISTANCE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 12, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_STANCE_ASSISTANCE, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_EXTENSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 13, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_extension = {'name': 'KNEE_STANCE_EXTENSION', 'description': 'Stance extension controls the prosthetic limb in stance phase and moving in to extension. A higher value means more resistance a lower value less resistance when standing on the knee and extending it.', 'min': 10, 'max': 90, 'default': 30, 'valueBytes': ['DEVICE.KNEE', 13, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_STANCE_EXTENSION, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_EXTENSION_COMPLETION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 14, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_extension_completion = {'name': 'KNEE_STANCE_EXTENSION_COMPLETION', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 14, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_STANCE_EXTENSION_COMPLETION, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_FLEXION_LEVEL_GROUND = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 15, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_flexion_level_ground = {'name': 'KNEE_STANCE_FLEXION_LEVEL_GROUND', 'description': 'Stance flexion (level ground) controls the prosthetic limb in stance phase moving into knee flexion. A higher value means more resistance a lower value less resistance when standing on the knee and flexing it.', 'min': 15, 'max': 80, 'default': 50, 'valueBytes': ['DEVICE.KNEE', 15, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_STANCE_FLEXION_LEVEL_GROUND, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_FLEXION_STAIRS_AND_RAMPS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 16, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_flexion_stairs_and_ramps = {'name': 'KNEE_STANCE_FLEXION_STAIRS_AND_RAMPS', 'description': 'Stance flexion (stairs) controls the prosthetic limb in stance phase moving into knee flexion when walking on stairs or ramps. A higher value means more resistance a lower value less resistance when walking down stairs.', 'min': 15, 'max': 80, 'default': 50, 'valueBytes': ['DEVICE.KNEE', 16, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_STANCE_FLEXION_STAIRS_AND_RAMPS, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_PRE_SWING_THIGH_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 17, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_pre_swing_thigh_angle = {'name': 'KNEE_STANCE_PRE_SWING_THIGH_ANGLE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 17, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '°', 'value': VAR_KNEE_STANCE_PRE_SWING_THIGH_ANGLE, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_RAMP_INITIATION_TRIGGER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 18, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_ramp_initiation_trigger = {'name': 'KNEE_STANCE_RAMP_INITIATION_TRIGGER', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 18, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_STANCE_RAMP_INITIATION_TRIGGER, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_RAMP_RESISTANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 19, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_ramp_resistance = {'name': 'KNEE_STANCE_RAMP_RESISTANCE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 19, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_STANCE_RAMP_RESISTANCE, 'datatype': 'UINT32'}
VAR_KNEE_STANCE_RESISTANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 20, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_stance_resistance = {'name': 'KNEE_STANCE_RESISTANCE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 20, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_STANCE_RESISTANCE, 'datatype': 'UINT32'}
VAR_KNEE_STANDING_UP_ASSISTANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 21, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_standing_up_assistance = {'name': 'KNEE_STANDING_UP_ASSISTANCE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 21, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_STANDING_UP_ASSISTANCE, 'datatype': 'UINT32'}
VAR_KNEE_SWING_EXTENSION_LEVEL_GROUND = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 22, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_swing_extension_level_ground = {'name': 'KNEE_SWING_EXTENSION_LEVEL_GROUND', 'description': 'Swing extension (level ground) controls how fast the prosthetic knee moves into extension during the swing phase when walking on level ground. A higher value means more resistance and a lower value less resistance when swinging the knee forward', 'min': 0, 'max': 100, 'default': 13, 'valueBytes': ['DEVICE.KNEE', 22, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_SWING_EXTENSION_LEVEL_GROUND, 'datatype': 'UINT32'}
VAR_KNEE_SWING_EXTENSION_SPEED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 23, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_swing_extension_speed = {'name': 'KNEE_SWING_EXTENSION_SPEED', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 23, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_SWING_EXTENSION_SPEED, 'datatype': 'UINT32'}
VAR_KNEE_SWING_EXTENSION_STAIRS_AND_RAMPS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 24, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_swing_extension_stairs_and_ramps = {'name': 'KNEE_SWING_EXTENSION_STAIRS_AND_RAMPS', 'description': 'Swing extension (stairs) controls how fast the prosthetic knee moves into extension during the swing phase when walking on stairs or ramps. A higher value means more resistance and a lower value less resistance when swinging the knee forward', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.KNEE', 24, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_SWING_EXTENSION_STAIRS_AND_RAMPS, 'datatype': 'UINT32'}
VAR_KNEE_SWING_FOOT_PLACEMENT_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 25, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_swing_foot_placement_angle = {'name': 'KNEE_SWING_FOOT_PLACEMENT_ANGLE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 25, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '°', 'value': VAR_KNEE_SWING_FOOT_PLACEMENT_ANGLE, 'datatype': 'UINT32'}
VAR_KNEE_SWING_INITIATION_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 26, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_swing_initiation_angle = {'name': 'KNEE_SWING_INITIATION_ANGLE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 26, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '°', 'value': VAR_KNEE_SWING_INITIATION_ANGLE, 'datatype': 'UINT32'}
VAR_KNEE_SWING_MAXIMUM_FLEXION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 27, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_knee_swing_maximum_flexion = {'name': 'KNEE_SWING_MAXIMUM_FLEXION', 'description': 'Control how far into the flexion the knee is able to go while swinging during walking. Higher values indicatie lower resistance (more flexion), lower values higher resistance (less flexion)', 'min': 40, 'max': 80, 'default': 60, 'valueBytes': ['DEVICE.KNEE', 27, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_SWING_MAXIMUM_FLEXION, 'datatype': 'UINT16'}
VAR_KNEE_SWING_STEP_CLERANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 28, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_swing_step_clerance = {'name': 'KNEE_SWING_STEP_CLERANCE', 'description': 'TBD', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 28, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_SWING_STEP_CLERANCE, 'datatype': 'UINT32'}
VAR_KNEE_TERMINAL_SWING_POINT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 29, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_terminal_swing_point = {'name': 'KNEE_TERMINAL_SWING_POINT', 'description': 'When the knee is swinging forward and is almost in full extension additional resistance is applied to facilitate a smooth impact. Terminal swing point controls when this additional resistance is applied. A higher value means the resistance is applied earlier a lower value means it is applied later', 'min': 0, 'max': 45, 'default': 23, 'valueBytes': ['DEVICE.KNEE', 29, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_TERMINAL_SWING_POINT, 'datatype': 'UINT32'}
VAR_KNEE_TERMINAL_SWING_RESISTANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 30, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_terminal_swing_resistance = {'name': 'KNEE_TERMINAL_SWING_RESISTANCE', 'description': 'When the knee is swinging forward and is almost in full extension additional resistance is applied to facilitate a smooth impact. The amount of additional resistance is controlled by this parameter. A higer value means more resistance a lower value less resistance', 'min': 0, 'max': 100, 'default': 27, 'valueBytes': ['DEVICE.KNEE', 30, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_TERMINAL_SWING_RESISTANCE, 'datatype': 'UINT32'}
VAR_KNEE_SWING_INITIATION_MOMENT_POINT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 31, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_knee_swing_initiation_moment_point = {'name': 'KNEE_SWING_INITIATION_MOMENT_POINT', 'description': 'Swing initiation from rheologic, slider without values just earlier and later', 'min': 0, 'max': 25, 'default': 5, 'valueBytes': ['DEVICE.KNEE', 31, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_SWING_INITIATION_MOMENT_POINT, 'datatype': 'UINT32'}
VAR_KNEE_BIKEMODE_ENABLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 32, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_knee_bikemode_enable = {'name': 'KNEE_BIKEMODE_ENABLE', 'description': 'BikeMode enabled', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.KNEE', 32, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'value': VAR_KNEE_BIKEMODE_ENABLE, 'datatype': 'BOOL'}
VAR_KNEE_BIKEMODE_FEEDBACK = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 33, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_knee_bikemode_feedback = {'name': 'KNEE_BIKEMODE_FEEDBACK', 'description': 'BikeMode feedback enabled', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.KNEE', 33, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_BIKEMODE_FEEDBACK, 'datatype': 'BOOL'}
VAR_KNEE_CONFIG_1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 34, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_config_1 = {'name': 'KNEE_CONFIG_1', 'description': 'Kneeconfig variable, includes deviceID', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 34, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_CONFIG_1, 'datatype': 'UINT32'}
VAR_KNEE_CONFIG_2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 35, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_config_2 = {'name': 'KNEE_CONFIG_2', 'description': 'Kneeconfig variable, in use', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 35, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_CONFIG_2, 'datatype': 'UINT32'}
VAR_KNEE_CONFIG_3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 36, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_config_3 = {'name': 'KNEE_CONFIG_3', 'description': 'Kneeconfig variable, for future use', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 36, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_CONFIG_3, 'datatype': 'UINT32'}
VAR_KNEE_AVERAGE_MASS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 37, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_knee_average_mass = {'name': 'KNEE_AVERAGE_MASS', 'description': 'Average mass for standing force activity report', 'min': 0, 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 37, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'kg', 'value': VAR_KNEE_AVERAGE_MASS, 'datatype': 'INT32'}
VAR_KNEE_ACTUATOR_CURRENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 38, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_knee_actuator_current = {'name': 'KNEE_ACTUATOR_CURRENT', 'description': 'Knee joint actuator current ', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 38, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_CURRENT, 'datatype': 'INT32'}
VAR_KNEE_STABILITY_FEATURE_HOLD_AT_HEELSTRIKE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 39, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_knee_stability_feature_hold_at_heelstrike = {'name': 'KNEE_STABILITY_FEATURE_HOLD_AT_HEELSTRIKE', 'description': 'Stability feature setting, hold at heel strike', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.KNEE', 39, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_STABILITY_FEATURE_HOLD_AT_HEELSTRIKE, 'datatype': 'BOOL'}
VAR_KNEE_STABILITY_FEATURE_HOLD_AT_LIFT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 40, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_knee_stability_feature_hold_at_lift = {'name': 'KNEE_STABILITY_FEATURE_HOLD_AT_LIFT', 'description': 'Stability feature setting, hold at heel strike', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.KNEE', 40, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_STABILITY_FEATURE_HOLD_AT_LIFT, 'datatype': 'BOOL'}
VAR_KNEE_CT_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 41, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_knee_ct_angle = {'name': 'KNEE_CT_ANGLE', 'description': 'Angle of the compliant transmission associated with the knee joint', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.KNEE', 41, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_CT_ANGLE, 'datatype': 'REAL32'}
VAR_KNEE_CT_ANGLE_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 42, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_knee_ct_angle_raw = {'name': 'KNEE_CT_ANGLE_RAW', 'description': 'Compliant transmission angle associated with the knee joint in sensor units.', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 42, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_CT_ANGLE_RAW, 'datatype': 'UINT16'}
VAR_KNEE_CT_SENSOR_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 43, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_ct_sensor_status = {'name': 'KNEE_CT_SENSOR_STATUS', 'description': 'Compliant transmission angle senosr status.', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 43, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': VAR_KNEE_CT_SENSOR_STATUS, 'datatype': 'UINT32'}
VAR_KNEE_ACTUATOR_POSITION_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 44, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_knee_actuator_position_raw = {'name': 'KNEE_ACTUATOR_POSITION_RAW', 'description': 'Joint actuator angle in sensor units. Zero when joint is fully extended.', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 44, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_POSITION_RAW, 'datatype': 'UINT16'}
VAR_KNEE_ACTUATOR_SENSOR_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 45, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_actuator_sensor_status = {'name': 'KNEE_ACTUATOR_SENSOR_STATUS', 'description': 'Joint actuator angle sensor status.', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 45, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_SENSOR_STATUS, 'datatype': 'UINT32'}
VAR_KNEE_ACTUATOR_APPLIED_TORQUE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 46, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_knee_actuator_applied_torque = {'name': 'KNEE_ACTUATOR_APPLIED_TORQUE', 'description': 'Applied torque by knee joint actuator.', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 46, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mNm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_APPLIED_TORQUE, 'datatype': 'REAL32'}
VAR_KNEE_ACTUATOR_APPLIED_TORQUE_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 47, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_actuator_applied_torque_raw = {'name': 'KNEE_ACTUATOR_APPLIED_TORQUE_RAW', 'description': 'Applied torque by knee joint actuator.', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 47, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': VAR_KNEE_ACTUATOR_APPLIED_TORQUE_RAW, 'datatype': 'UINT32'}
VAR_KNEE_ACTUATOR_TEMPERATURE_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 48, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_actuator_temperature_raw = {'name': 'KNEE_ACTUATOR_TEMPERATURE_RAW', 'description': 'Joint actuator temperature raw.', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 48, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_TEMPERATURE_RAW, 'datatype': 'UINT32'}
VAR_KNEE_ACTUATOR_MOSFET_TEMP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 49, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_knee_actuator_mosfet_temp = {'name': 'KNEE_ACTUATOR_MOSFET_TEMP', 'description': 'Joint actuator Mostfet temperature.', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 49, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°C', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_MOSFET_TEMP, 'datatype': 'REAL32'}
VAR_KNEE_ACTUATOR_MOSFET_TEMP_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 50, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_actuator_mosfet_temp_raw = {'name': 'KNEE_ACTUATOR_MOSFET_TEMP_RAW', 'description': 'Joint actuator Mostfet temperature raw.', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 50, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '°C', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': VAR_KNEE_ACTUATOR_MOSFET_TEMP_RAW, 'datatype': 'UINT32'}
VAR_KNEE_ACTUATOR_STATUS_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 51, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_actuator_status_raw = {'name': 'KNEE_ACTUATOR_STATUS_RAW', 'description': 'Joint actuator driver status (motor driver).', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 51, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_KNEE_ACTUATOR_STATUS_RAW, 'datatype': 'UINT32'}
VAR_KNEE_JOINT_ROTATIONAL_VELOCITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 52, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_knee_joint_rotational_velocity = {'name': 'KNEE_JOINT_ROTATIONAL_VELOCITY', 'description': 'Knee joint rotational velocity.', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 52, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_JOINT_ROTATIONAL_VELOCITY, 'datatype': 'INT32'}
VAR_KNEE_ACTUATOR_ROTATIONAL_VELOCITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 53, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_knee_actuator_rotational_velocity = {'name': 'KNEE_ACTUATOR_ROTATIONAL_VELOCITY', 'description': 'Knee actuator rotational velocity.', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 53, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_ROTATIONAL_VELOCITY, 'datatype': 'REAL32'}
VAR_KNEE_ACTUATOR_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_KNEE, 54, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_knee_actuator_status = {'name': 'KNEE_ACTUATOR_STATUS', 'description': 'Knee actuator status (motor status).', 'min': '0', 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.KNEE', 54, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_KNEE_ACTUATOR_STATUS, 'datatype': 'UINT32'}
VAR_POWER_KNEE_TORQUE_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 1, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_torque_est = {'name': 'POWER_KNEE_TORQUE_EST', 'description': 'Calculated applied torque to knee joint.', 'min': -200, 'max': 200, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 1, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_TORQUE_EST, 'datatype': 'REAL32'}
VAR_POWER_KNEE_MDB_ADC_CH0 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 2, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_mdb_adc_ch0 = {'name': 'POWER_KNEE_MDB_ADC_CH0', 'description': 'Power knee motor drive board adc channel 0', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 2, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH0, 'datatype': 'REAL32'}
VAR_POWER_KNEE_MDB_ADC_CH0_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 3, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_mdb_adc_ch0_raw = {'name': 'POWER_KNEE_MDB_ADC_CH0_RAW', 'description': 'Power knee motor drive board adc channel 0 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 3, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH0_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_MDB_ADC_CH1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 4, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_mdb_adc_ch1 = {'name': 'POWER_KNEE_MDB_ADC_CH1', 'description': 'Power knee motor drive board adc channel 1', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 4, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH1, 'datatype': 'REAL32'}
VAR_POWER_KNEE_MDB_ADC_CH1_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 5, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_mdb_adc_ch1_raw = {'name': 'POWER_KNEE_MDB_ADC_CH1_RAW', 'description': 'Power knee motor drive board adc channel 1 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 5, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH1_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_MDB_ADC_CH2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 6, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_mdb_adc_ch2 = {'name': 'POWER_KNEE_MDB_ADC_CH2', 'description': 'Power knee motor drive board adc channel 2', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 6, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH2, 'datatype': 'REAL32'}
VAR_POWER_KNEE_MDB_ADC_CH2_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 7, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_mdb_adc_ch2_raw = {'name': 'POWER_KNEE_MDB_ADC_CH2_RAW', 'description': 'Power knee motor drive board adc channel 2 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 7, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH2_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_MDB_ADC_CH3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 8, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_mdb_adc_ch3 = {'name': 'POWER_KNEE_MDB_ADC_CH3', 'description': 'Power knee motor drive board adc channel 3', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 8, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH3, 'datatype': 'REAL32'}
VAR_POWER_KNEE_MDB_ADC_CH3_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 9, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_mdb_adc_ch3_raw = {'name': 'POWER_KNEE_MDB_ADC_CH3_RAW', 'description': 'Power knee motor drive board adc channel 3 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 9, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_MDB_ADC_CH3_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_MDB_ADC_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 10, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_mdb_adc_status = {'name': 'POWER_KNEE_MDB_ADC_STATUS', 'description': 'Power knee motor drive board adc status', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 10, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_POWER_KNEE_MDB_ADC_STATUS, 'datatype': 'UINT32'}
VAR_POWER_KNEE_EXP_ADC_CH0 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 11, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_exp_adc_ch0 = {'name': 'POWER_KNEE_EXP_ADC_CH0', 'description': 'Power knee expansion board adc channel 0', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 11, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH0, 'datatype': 'REAL32'}
VAR_POWER_KNEE_EXP_ADC_CH0_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 12, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_exp_adc_ch0_raw = {'name': 'POWER_KNEE_EXP_ADC_CH0_RAW', 'description': 'Power knee expansion board adc channel 0 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 12, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH0_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_EXP_ADC_CH1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 13, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_exp_adc_ch1 = {'name': 'POWER_KNEE_EXP_ADC_CH1', 'description': 'Power knee expansion board adc channel 1', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 13, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH1, 'datatype': 'REAL32'}
VAR_POWER_KNEE_EXP_ADC_CH1_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 14, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_exp_adc_ch1_raw = {'name': 'POWER_KNEE_EXP_ADC_CH1_RAW', 'description': 'Power knee expansion board adc channel 1 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 14, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH1_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_EXP_ADC_CH2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 15, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_exp_adc_ch2 = {'name': 'POWER_KNEE_EXP_ADC_CH2', 'description': 'Power knee expansion board adc channel 2', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 15, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH2, 'datatype': 'REAL32'}
VAR_POWER_KNEE_EXP_ADC_CH2_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 16, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_exp_adc_ch2_raw = {'name': 'POWER_KNEE_EXP_ADC_CH2_RAW', 'description': 'Power knee expansion board adc channel 2 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 16, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH2_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_EXP_ADC_CH3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 17, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_exp_adc_ch3 = {'name': 'POWER_KNEE_EXP_ADC_CH3', 'description': 'Power knee expansion board adc channel 3', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 17, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH3, 'datatype': 'REAL32'}
VAR_POWER_KNEE_EXP_ADC_CH3_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 18, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_exp_adc_ch3_raw = {'name': 'POWER_KNEE_EXP_ADC_CH3_RAW', 'description': 'Power knee expansion board adc channel 3 sensor units', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 18, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_CH3_RAW, 'datatype': 'UINT32'}
VAR_POWER_KNEE_EXP_ADC_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 19, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_power_knee_exp_adc_status = {'name': 'POWER_KNEE_EXP_ADC_STATUS', 'description': 'Power knee expansion board adc status', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 19, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_POWER_KNEE_EXP_ADC_STATUS, 'datatype': 'UINT32'}
VAR_POWER_KNEE_ACTUATOR_SETPOINT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 20, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_actuator_setpoint = {'name': 'POWER_KNEE_ACTUATOR_SETPOINT', 'description': 'The setpoint for the power knee motor', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 20, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_ACTUATOR_SETPOINT, 'datatype': 'REAL32'}
VAR_POWER_KNEE_ACTUATOR_SETPOINT_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 21, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_power_knee_actuator_setpoint_raw = {'name': 'POWER_KNEE_ACTUATOR_SETPOINT_RAW', 'description': 'The setpoint for the power knee motor in drive units', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 21, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_ACTUATOR_SETPOINT_RAW, 'datatype': 'INT16'}
VAR_POWER_KNEE_MAX_EXT_TORQ_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 22, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_max_ext_torq_est = {'name': 'POWER_KNEE_MAX_EXT_TORQ_EST', 'description': 'The estimated maximum extension torque in stance phase while walking', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 22, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_MAX_EXT_TORQ_EST, 'datatype': 'REAL32'}
VAR_POWER_KNEE_THIGH_ANG_AT_MAX_EXT_TORQ_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 23, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_thigh_ang_at_max_ext_torq_est = {'name': 'POWER_KNEE_THIGH_ANG_AT_MAX_EXT_TORQ_EST', 'description': 'The thigh angle at estimated max extesion torque', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 23, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_THIGH_ANG_AT_MAX_EXT_TORQ_EST, 'datatype': 'REAL32'}
VAR_POWER_KNEE_BRK_ANGLE_TRIGGER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 24, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_brk_angle_trigger = {'name': 'POWER_KNEE_BRK_ANGLE_TRIGGER', 'description': 'The trigger angle for break subphase', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 24, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_BRK_ANGLE_TRIGGER, 'datatype': 'REAL32'}
VAR_POWER_KNEE_BA_ANGLE_TRIGGER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 25, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_ba_angle_trigger = {'name': 'POWER_KNEE_BA_ANGLE_TRIGGER', 'description': 'The trigger angle for bumper avoidance subphase', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 25, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_BA_ANGLE_TRIGGER, 'datatype': 'REAL32'}
VAR_POWER_KNEE_LIN_VEL_EST_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 26, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_lin_vel_est_x = {'name': 'POWER_KNEE_LIN_VEL_EST_X', 'description': 'The estimated velocity of the prostesis center in direction x in global ref frame', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 26, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_LIN_VEL_EST_X, 'datatype': 'REAL32'}
VAR_POWER_KNEE_LIN_VEL_EST_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 27, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_lin_vel_est_y = {'name': 'POWER_KNEE_LIN_VEL_EST_Y', 'description': 'The estimated velocity of the prostesis center in direction y in global ref frame', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 27, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_LIN_VEL_EST_Y, 'datatype': 'REAL32'}
VAR_POWER_KNEE_LIN_POS_EST_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 28, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_lin_pos_est_x = {'name': 'POWER_KNEE_LIN_POS_EST_X', 'description': 'The estimated horizontal displacement from mid stance', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 28, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_LIN_POS_EST_X, 'datatype': 'REAL32'}
VAR_POWER_KNEE_LIN_POS_EST_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 29, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_lin_pos_est_y = {'name': 'POWER_KNEE_LIN_POS_EST_Y', 'description': 'The estimated verital displacement from mid stance', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 29, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_LIN_POS_EST_Y, 'datatype': 'REAL32'}
VAR_POWER_KNEE_PHASE_TIMEOUT_DEC_COUNTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 30, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_power_knee_phase_timeout_dec_counter = {'name': 'POWER_KNEE_PHASE_TIMEOUT_DEC_COUNTER', 'description': 'Timeout counter for activity within gait phase', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 30, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_PHASE_TIMEOUT_DEC_COUNTER, 'datatype': 'UINT16'}
VAR_POWER_KNEE_THIGH_ANG_AT_STANCE_FLEX_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 31, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_thigh_ang_at_stance_flex_est = {'name': 'POWER_KNEE_THIGH_ANG_AT_STANCE_FLEX_EST', 'description': 'Thigh angle at estimated point of max stance flexion', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 31, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_THIGH_ANG_AT_STANCE_FLEX_EST, 'datatype': 'REAL32'}
VAR_POWER_KNEE_MAX_STANCE_FLEX_TORQUE_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 32, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_max_stance_flex_torque_est = {'name': 'POWER_KNEE_MAX_STANCE_FLEX_TORQUE_EST', 'description': 'Maximum stance flexion torque estimate.', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 32, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_MAX_STANCE_FLEX_TORQUE_EST, 'datatype': 'REAL32'}
VAR_POWER_KNEE_TOE_OFF_CRITERIA_MET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 33, VARFLAGS_READ, DATATYPE_BOOL]), byteorder='little')
var_power_knee_toe_off_criteria_met = {'name': 'POWER_KNEE_TOE_OFF_CRITERIA_MET', 'description': 'All criterias for toe off assist are met.', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 33, 'VARFLAGS.READ', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_TOE_OFF_CRITERIA_MET, 'datatype': 'BOOL'}
VAR_POWER_KNEE_JOINT_ANGLE_FROM_CT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 34, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_joint_angle_from_ct = {'name': 'POWER_KNEE_JOINT_ANGLE_FROM_CT', 'description': 'Knee joint angle contribution from ct.', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 34, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_JOINT_ANGLE_FROM_CT, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_GAIN_KP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 35, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_gain_kp = {'name': 'POWER_KNEE_CONT_GAIN_KP', 'description': 'Controller Position Gain', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 35, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_GAIN_KP, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_GAIN_KD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 36, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_gain_kd = {'name': 'POWER_KNEE_CONT_GAIN_KD', 'description': 'Controller Velocity Gain', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 36, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_GAIN_KD, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_GAIN_KM = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 37, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_gain_km = {'name': 'POWER_KNEE_CONT_GAIN_KM', 'description': 'Controller Torque Gain', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 37, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_GAIN_KM, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_MIN_OUTPUT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 38, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_min_output = {'name': 'POWER_KNEE_CONT_MIN_OUTPUT', 'description': 'Minimum output to the motor', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 38, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_MIN_OUTPUT, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_TARGET_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 39, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_target_angle = {'name': 'POWER_KNEE_CONT_TARGET_ANGLE', 'description': 'Controller Target Angle', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 39, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_TARGET_ANGLE, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_TARGET_VELOCITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 40, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_target_velocity = {'name': 'POWER_KNEE_CONT_TARGET_VELOCITY', 'description': 'Controller Target Velocity', 'min': -1000, 'max': 1000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 40, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_TARGET_VELOCITY, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_MINIMUM_INPUT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 41, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_minimum_input = {'name': 'POWER_KNEE_CONT_MINIMUM_INPUT', 'description': 'Controller Minimum input value', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 41, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_MINIMUM_INPUT, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_POS_ERROR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 42, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_pos_error = {'name': 'POWER_KNEE_CONT_POS_ERROR', 'description': 'Controller position error', 'min': -360, 'max': 360, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 42, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_POS_ERROR, 'datatype': 'REAL32'}
VAR_POWER_KNEE_CONT_VEL_ERROR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 43, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_cont_vel_error = {'name': 'POWER_KNEE_CONT_VEL_ERROR', 'description': 'Controller Velocity error', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 43, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_CONT_VEL_ERROR, 'datatype': 'REAL32'}
VAR_POWER_KNEE_THIGH_ROT_VEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 44, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_thigh_rot_vel = {'name': 'POWER_KNEE_THIGH_ROT_VEL', 'description': 'Rotational velocity of the thigh segment', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 44, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_THIGH_ROT_VEL, 'datatype': 'REAL32'}
VAR_POWER_KNEE_SHANK_ROT_VEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 45, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_shank_rot_vel = {'name': 'POWER_KNEE_SHANK_ROT_VEL', 'description': 'Rotational velocity of the shank segment', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 45, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_SHANK_ROT_VEL, 'datatype': 'REAL32'}
VAR_POWER_KNEE_THIGH_ROT_VEL_STANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 46, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_thigh_rot_vel_stance = {'name': 'POWER_KNEE_THIGH_ROT_VEL_STANCE', 'description': 'Rotational velocity of the thigh segment in stance', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 46, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_THIGH_ROT_VEL_STANCE, 'datatype': 'REAL32'}
VAR_POWER_KNEE_HIP_CONST_EXT_IN_STANCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 47, VARFLAGS_READ, DATATYPE_BOOL]), byteorder='little')
var_power_knee_hip_const_ext_in_stance = {'name': 'POWER_KNEE_HIP_CONST_EXT_IN_STANCE', 'description': 'Hip continously extends in stance', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 47, 'VARFLAGS.READ', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_HIP_CONST_EXT_IN_STANCE, 'datatype': 'BOOL'}
VAR_POWER_KNEE_VERT_DISPL_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 48, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_power_knee_vert_displ_est = {'name': 'POWER_KNEE_VERT_DISPL_EST', 'description': 'Power knee vertical displacement estimate after toe off.', 'min': -100000, 'max': 100000, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 48, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_VERT_DISPL_EST, 'datatype': 'REAL32'}
VAR_POWER_KNEE_HORIZ_DISPL_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 49, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_power_knee_horiz_displ_est = {'name': 'POWER_KNEE_HORIZ_DISPL_EST', 'description': 'Power knee horizontal displacement estimate after toe off.', 'min': 0, 'max': 100, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 49, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': 'm', 'value': VAR_POWER_KNEE_HORIZ_DISPL_EST, 'datatype': 'UINT8'}
VAR_POWER_KNEE_PROFILE_ID = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 50, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_profile_id = {'name': 'POWER_KNEE_PROFILE_ID', 'description': 'Control profile Id.', 'min': 1, 'max': '3', 'default': 1, 'valueBytes': ['DEVICE.POWER_KNEE', 50, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_PROFILE_ID, 'datatype': 'UINT8'}
VAR_POWER_KNEE_STANCE_FLEXION_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 51, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_stance_flexion_level = {'name': 'POWER_KNEE_STANCE_FLEXION_LEVEL', 'description': 'Amount of stance flexion for the knee during walking.', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.POWER_KNEE', 51, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_STANCE_FLEXION_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_TOA_TORQUE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 52, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_toa_torque_level = {'name': 'POWER_KNEE_TOA_TORQUE_LEVEL', 'description': 'Amount of unloading before triggering TOA subphase during walking.', 'min': 0, 'max': 100, 'default': 100, 'valueBytes': ['DEVICE.POWER_KNEE', 52, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_TOA_TORQUE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_MAX_SWING_FLEXION_ANGLE_WALKING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 53, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_max_swing_flexion_angle_walking = {'name': 'POWER_KNEE_MAX_SWING_FLEXION_ANGLE_WALKING', 'description': 'The targeted flexion angle of knee during swing while walking.', 'min': 40, 'max': 75, 'default': 60, 'valueBytes': ['DEVICE.POWER_KNEE', 53, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_MAX_SWING_FLEXION_ANGLE_WALKING, 'datatype': 'UINT8'}
VAR_POWER_KNEE_FA_FP_WALKING_SPEED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 54, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_fa_fp_walking_speed = {'name': 'POWER_KNEE_FA_FP_WALKING_SPEED', 'description': 'The thigh rotation speed during walking to transition from slow walking to fast walking.', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.POWER_KNEE', 54, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '°/s', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_FA_FP_WALKING_SPEED, 'datatype': 'UINT8'}
VAR_POWER_KNEE_FA_FP_STEP_LIMIT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 55, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_fa_fp_step_limit = {'name': 'POWER_KNEE_FA_FP_STEP_LIMIT', 'description': 'The min step count meeting speed criteria needed to transition from slow walking to fast walking.', 'min': 0, 'max': 4, 'default': 2, 'valueBytes': ['DEVICE.POWER_KNEE', 55, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': 'steps', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_FA_FP_STEP_LIMIT, 'datatype': 'UINT8'}
VAR_POWER_KNEE_SDN_TORQUE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 56, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_sdn_torque_level = {'name': 'POWER_KNEE_SDN_TORQUE_LEVEL', 'description': 'The min torque level needed to trigger the kne to yield.', 'min': 5, 'max': 60, 'default': 30, 'valueBytes': ['DEVICE.POWER_KNEE', 56, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_SDN_TORQUE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_SDN_RESISTANCE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 59, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_sdn_resistance_level = {'name': 'POWER_KNEE_SDN_RESISTANCE_LEVEL', 'description': 'The resistance level during sit down activity.', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.POWER_KNEE', 59, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_SDN_RESISTANCE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_SUP_ASSISTANCE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 60, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_sup_assistance_level = {'name': 'POWER_KNEE_SUP_ASSISTANCE_LEVEL', 'description': 'The assistance level during standing up activity.', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.POWER_KNEE', 60, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_SUP_ASSISTANCE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_DIS_RESISTANCE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 61, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_dis_resistance_level = {'name': 'POWER_KNEE_DIS_RESISTANCE_LEVEL', 'description': 'The resistance level during stairs down activity.', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.POWER_KNEE', 61, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_DIS_RESISTANCE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_DIS_EXT_SPEED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 62, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_dis_ext_speed = {'name': 'POWER_KNEE_DIS_EXT_SPEED', 'description': 'The extension speed of the knee in swing during stairs down actiivty.', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.POWER_KNEE', 62, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_DIS_EXT_SPEED, 'datatype': 'UINT8'}
VAR_POWER_KNEE_RAMP_RESISTANCE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 63, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_ramp_resistance_level = {'name': 'POWER_KNEE_RAMP_RESISTANCE_LEVEL', 'description': 'The resistance level during ramp descent.', 'min': 0, 'max': 100, 'default': 50, 'valueBytes': ['DEVICE.POWER_KNEE', 63, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_RAMP_RESISTANCE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_GEN_ASSISTANCE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 64, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_gen_assistance_level = {'name': 'POWER_KNEE_GEN_ASSISTANCE_LEVEL', 'description': 'The assistance level during stair ascent activity.', 'min': 0, 'max': 100, 'default': 20, 'valueBytes': ['DEVICE.POWER_KNEE', 64, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_GEN_ASSISTANCE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_GEN_FLEXION_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 65, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_gen_flexion_angle = {'name': 'POWER_KNEE_GEN_FLEXION_ANGLE', 'description': 'The flexion angle of the knee in swing during stair ascent.', 'min': 50, 'max': 100, 'default': 70, 'valueBytes': ['DEVICE.POWER_KNEE', 65, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_GEN_FLEXION_ANGLE, 'datatype': 'UINT8'}
VAR_POWER_KNEE_GEN_FOOT_PLACEMENT_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 66, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_gen_foot_placement_angle = {'name': 'POWER_KNEE_GEN_FOOT_PLACEMENT_ANGLE', 'description': 'The foot placement angle of the knee during stair ascent.', 'min': 30, 'max': 70, 'default': 55, 'valueBytes': ['DEVICE.POWER_KNEE', 66, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_GEN_FOOT_PLACEMENT_ANGLE, 'datatype': 'UINT8'}
VAR_POWER_KNEE_RAMP_TORQUE_LEVEL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 67, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_ramp_torque_level = {'name': 'POWER_KNEE_RAMP_TORQUE_LEVEL', 'description': 'The flexion torque level needed to get knee to detect ramps.', 'min': 5, 'max': 60, 'default': 30, 'valueBytes': ['DEVICE.POWER_KNEE', 67, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_RAMP_TORQUE_LEVEL, 'datatype': 'UINT8'}
VAR_POWER_KNEE_EXERCISE_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 68, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_power_knee_exercise_mode = {'name': 'POWER_KNEE_EXERCISE_MODE', 'description': 'Enable exercise mode.', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 68, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_EXERCISE_MODE, 'datatype': 'BOOL'}
VAR_POWER_KNEE_GAIT_CONTROL_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 69, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_power_knee_gait_control_mode = {'name': 'POWER_KNEE_GAIT_CONTROL_MODE', 'description': 'Gait Overwrite control mode', 'min': 0, 'max': 255, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 69, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_GAIT_CONTROL_MODE, 'datatype': 'UINT8'}
VAR_POWER_KNEE_DISABLE_STAIR_ASCENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 70, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_power_knee_disable_stair_ascent = {'name': 'POWER_KNEE_DISABLE_STAIR_ASCENT', 'description': 'Enables or disables stair ascent activity', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 70, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_DISABLE_STAIR_ASCENT, 'datatype': 'BOOL'}
VAR_POWER_KNEE_AUTO_ADJUSTMENT_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 71, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_power_knee_auto_adjustment_status = {'name': 'POWER_KNEE_AUTO_ADJUSTMENT_STATUS', 'description': 'Display the status of the automatic adjustment process', 'min': 0, 'max': 9, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 71, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_AUTO_ADJUSTMENT_STATUS, 'datatype': 'UINT8'}
VAR_POWER_KNEE_AUTO_ADJUSTMENT_VALID_STEPS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 72, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_power_knee_auto_adjustment_valid_steps = {'name': 'POWER_KNEE_AUTO_ADJUSTMENT_VALID_STEPS', 'description': 'Display the number of valid steps encountered in the process', 'min': 0, 'max': 255, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 72, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_AUTO_ADJUSTMENT_VALID_STEPS, 'datatype': 'UINT8'}
VAR_POWER_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 73, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_power_knee_auto_adjustment_invalid_steps = {'name': 'POWER_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS', 'description': 'Display the number of invalid steps encountered in the process', 'min': 0, 'max': 255, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 73, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS, 'datatype': 'UINT8'}
VAR_POWER_KNEE_AMPUTATION_TYPE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 74, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_power_knee_amputation_type = {'name': 'POWER_KNEE_AMPUTATION_TYPE', 'description': 'States the amputation type of the user', 'min': 0, 'max': 255, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 74, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_AMPUTATION_TYPE, 'datatype': 'UINT8'}
VAR_POWER_KNEE_IMU_DRIFT_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 75, VARFLAGS_READ, DATATYPE_BOOL]), byteorder='little')
var_power_knee_imu_drift_status = {'name': 'POWER_KNEE_IMU_DRIFT_STATUS', 'description': ' true when IMU status is unknown', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 75, 'VARFLAGS.READ', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_IMU_DRIFT_STATUS, 'datatype': 'BOOL'}
VAR_POWER_KNEE_DEBUG_ANGLES = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 76, VARFLAGS_READ, DATATYPE_UINT64]), byteorder='little')
var_power_knee_debug_angles = {'name': 'POWER_KNEE_DEBUG_ANGLES', 'description': 'PACKED ANGLES (TH_ABS, TH_REL, SH_ABS, SH_REL)', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 76, 'VARFLAGS.READ', 'DATATYPE.UINT64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_DEBUG_ANGLES, 'datatype': 'UINT64'}
VAR_POWER_KNEE_DEBUG_LOADCELL_TORQUE_FLAGS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 77, VARFLAGS_READ, DATATYPE_UINT64]), byteorder='little')
var_power_knee_debug_loadcell_torque_flags = {'name': 'POWER_KNEE_DEBUG_LOADCELL_TORQUE_FLAGS', 'description': 'LOADCELL TORQUE AND FLAGS', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 77, 'VARFLAGS.READ', 'DATATYPE.UINT64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_DEBUG_LOADCELL_TORQUE_FLAGS, 'datatype': 'UINT64'}
VAR_POWER_KNEE_DEBUG_VELOCITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 78, VARFLAGS_READ, DATATYPE_UINT64]), byteorder='little')
var_power_knee_debug_velocity = {'name': 'POWER_KNEE_DEBUG_VELOCITY', 'description': 'THIGH_SHANK_KNEE_MOTOR VELOCITY', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 78, 'VARFLAGS.READ', 'DATATYPE.UINT64'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_DEBUG_VELOCITY, 'datatype': 'UINT64'}
VAR_POWER_KNEE_TOE_LOAD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 79, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_power_knee_toe_load = {'name': 'POWER_KNEE_TOE_LOAD', 'description': 'Toe-heal loadcell value', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 79, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_TOE_LOAD, 'datatype': 'INT16'}
VAR_POWER_KNEE_TOE_LOAD_DURATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 80, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_power_knee_toe_load_duration = {'name': 'POWER_KNEE_TOE_LOAD_DURATION', 'description': 'ToeLoad Duration', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 80, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_TOE_LOAD_DURATION, 'datatype': 'INT16'}
VAR_POWER_KNEE_VIRTUAL_EXT_SPRING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 81, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_power_knee_virtual_ext_spring = {'name': 'POWER_KNEE_VIRTUAL_EXT_SPRING', 'description': 'Min ext torque while walking', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 81, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': 'mNm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_VIRTUAL_EXT_SPRING, 'datatype': 'UINT16'}
VAR_POWER_KNEE_VIRTUAL_FLEX_SPRING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 82, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_power_knee_virtual_flex_spring = {'name': 'POWER_KNEE_VIRTUAL_FLEX_SPRING', 'description': 'Min flex torque while walking', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 82, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': 'mNm', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_VIRTUAL_FLEX_SPRING, 'datatype': 'UINT16'}
VAR_POWER_KNEE_STEP_SECTION_INDEX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 83, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_power_knee_step_section_index = {'name': 'POWER_KNEE_STEP_SECTION_INDEX', 'description': 'Step Section Index', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.POWER_KNEE', 83, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_POWER_KNEE_STEP_SECTION_INDEX, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_HBDRV_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 1, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_rheo_knee_hbdrv_status = {'name': 'RHEO_KNEE_HBDRV_STATUS', 'description': 'Status feedback of the H-bridge driver', 'min': 0, 'max': 255, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 1, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_HBDRV_STATUS, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_ACTUATOR_SETPOINT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 2, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_actuator_setpoint = {'name': 'RHEO_KNEE_ACTUATOR_SETPOINT', 'description': 'The setpoint for the rheo knee actuator', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 2, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ACTUATOR_SETPOINT, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_ACTUATOR_SETPOINT_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 3, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_rheo_knee_actuator_setpoint_raw = {'name': 'RHEO_KNEE_ACTUATOR_SETPOINT_RAW', 'description': 'The setpoint for the rheo knee actuator in mA units', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 3, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ACTUATOR_SETPOINT_RAW, 'datatype': 'INT16'}
VAR_RHEO_KNEE_ACTUATOR_DIRECTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 4, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_actuator_direction = {'name': 'RHEO_KNEE_ACTUATOR_DIRECTION', 'description': 'The direction for the rheo knee actuator', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 4, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ACTUATOR_DIRECTION, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_ACTUATOR_DIRECTION_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 5, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_rheo_knee_actuator_direction_raw = {'name': 'RHEO_KNEE_ACTUATOR_DIRECTION_RAW', 'description': 'The direction for the rheo knee actuator', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 5, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ACTUATOR_DIRECTION_RAW, 'datatype': 'INT16'}
VAR_RHEO_KNEE_KB_MOMENT_MIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 6, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_kb_moment_min = {'name': 'RHEO_KNEE_KB_MOMENT_MIN', 'description': 'min kb moment', 'min': 0, 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 6, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_KB_MOMENT_MIN, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_MEASURED_CURRENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 7, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_measured_current = {'name': 'RHEO_KNEE_MEASURED_CURRENT', 'description': 'The measured current of the rheo knee actuator', 'min': 0, 'max': 3000, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 7, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_MEASURED_CURRENT, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_MEASURED_CURRENT_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 8, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_rheo_knee_measured_current_raw = {'name': 'RHEO_KNEE_MEASURED_CURRENT_RAW', 'description': 'The measured current of the rheo knee actuator in mA units', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 8, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_MEASURED_CURRENT_RAW, 'datatype': 'INT16'}
VAR_RHEO_KNEE_CHG_FAULT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 9, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_rheo_knee_chg_fault = {'name': 'RHEO_KNEE_CHG_FAULT', 'description': 'The FAULT register of the rheo knee charger', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 9, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_CHG_FAULT, 'datatype': 'INT16'}
VAR_RHEO_KNEE_CHG_ACP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 10, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_rheo_knee_chg_acp = {'name': 'RHEO_KNEE_CHG_ACP', 'description': 'The ACP register of the rheo knee charger', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 10, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_CHG_ACP, 'datatype': 'INT16'}
VAR_RHEO_KNEE_CHG_CHG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 11, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_rheo_knee_chg_chg = {'name': 'RHEO_KNEE_CHG_CHG', 'description': 'The CHG register of the rheo knee charger', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 11, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_CHG_CHG, 'datatype': 'INT16'}
VAR_RHEO_KNEE_BIKE_MODE_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 12, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_rheo_knee_bike_mode_status = {'name': 'RHEO_KNEE_BIKE_MODE_STATUS', 'description': 'The bike mode monitoring status', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 12, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_BIKE_MODE_STATUS, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_DEBUG_F1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 13, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_debug_f1 = {'name': 'RHEO_KNEE_DEBUG_F1', 'description': 'Debug variable, floating point', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 13, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DEBUG_F1, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_DEBUG_F2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 14, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_debug_f2 = {'name': 'RHEO_KNEE_DEBUG_F2', 'description': 'Debug variable, floating point', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 14, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DEBUG_F2, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_DEBUG_U1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 15, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_rheo_knee_debug_u1 = {'name': 'RHEO_KNEE_DEBUG_U1', 'description': 'Debug variable, uint32', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 15, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DEBUG_U1, 'datatype': 'UINT32'}
VAR_RHEO_KNEE_DEBUG_U2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 16, VARFLAGS_RW, DATATYPE_UINT32]), byteorder='little')
var_rheo_knee_debug_u2 = {'name': 'RHEO_KNEE_DEBUG_U2', 'description': 'Debug variable, uint32', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 16, 'VARFLAGS.RW', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DEBUG_U2, 'datatype': 'UINT32'}
VAR_RHEO_KNEE_DEBUG_I1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 17, VARFLAGS_RW, DATATYPE_INT32]), byteorder='little')
var_rheo_knee_debug_i1 = {'name': 'RHEO_KNEE_DEBUG_I1', 'description': 'Debug variable, int32', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 17, 'VARFLAGS.RW', 'DATATYPE.INT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DEBUG_I1, 'datatype': 'INT32'}
VAR_RHEO_KNEE_DEBUG_I2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 18, VARFLAGS_RW, DATATYPE_INT32]), byteorder='little')
var_rheo_knee_debug_i2 = {'name': 'RHEO_KNEE_DEBUG_I2', 'description': 'Debug variable, int32', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 18, 'VARFLAGS.RW', 'DATATYPE.INT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DEBUG_I2, 'datatype': 'INT32'}
VAR_RHEO_KNEE_DEBUG_B1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 19, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_rheo_knee_debug_b1 = {'name': 'RHEO_KNEE_DEBUG_B1', 'description': 'Debug variable, BOOL', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 19, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DEBUG_B1, 'datatype': 'BOOL'}
VAR_RHEO_KNEE_CHG_FLAG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 20, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_rheo_knee_chg_flag = {'name': 'RHEO_KNEE_CHG_FLAG', 'description': 'The FLAG register of the rheo knee charger', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 20, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_CHG_FLAG, 'datatype': 'INT16'}
VAR_RHEO_KNEE_LOADCELL_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 21, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_loadcell_rate = {'name': 'RHEO_KNEE_LOADCELL_RATE', 'description': 'Derivative of the total load cell signal', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 21, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'N/s', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_LOADCELL_RATE, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_AUTO_ADJUSTMENT_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 22, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_rheo_knee_auto_adjustment_status = {'name': 'RHEO_KNEE_AUTO_ADJUSTMENT_STATUS', 'description': 'Display the status of the automatic adjustment process', 'min': 0, 'max': 9, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 22, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_AUTO_ADJUSTMENT_STATUS, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_AUTO_ADJUSTMENT_VALID_STEPS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 23, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_rheo_knee_auto_adjustment_valid_steps = {'name': 'RHEO_KNEE_AUTO_ADJUSTMENT_VALID_STEPS', 'description': 'Display the number of valid steps encountered in the process', 'min': 0, 'max': 255, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 23, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_AUTO_ADJUSTMENT_VALID_STEPS, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 24, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_rheo_knee_auto_adjustment_invalid_steps = {'name': 'RHEO_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS', 'description': 'Display the number of invalid steps encountered in the process', 'min': 0, 'max': 255, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 24, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_WALKING_SPEED_ESTIMATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 25, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_walking_speed_estimation = {'name': 'RHEO_KNEE_WALKING_SPEED_ESTIMATION', 'description': 'Estimate of the walking speed of the user', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 25, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'km/h', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_WALKING_SPEED_ESTIMATION, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_MAGNETIC_MAGNITUDE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 26, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_magnetic_magnitude = {'name': 'RHEO_KNEE_MAGNETIC_MAGNITUDE', 'description': 'Magnitude of the magnetic output by the angle sensor', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 26, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_RHEO_KNEE_MAGNETIC_MAGNITUDE, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_MAGNETIC_MAGNITUDE_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 27, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_rheo_knee_magnetic_magnitude_raw = {'name': 'RHEO_KNEE_MAGNETIC_MAGNITUDE_RAW', 'description': 'Raw magnitude of the magnetic output by the angle sensor', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 27, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_RHEO_KNEE_MAGNETIC_MAGNITUDE_RAW, 'datatype': 'UINT16'}
VAR_RHEO_KNEE_STATIC_TORQUE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 28, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_static_torque = {'name': 'RHEO_KNEE_STATIC_TORQUE', 'description': 'The static torque part of the rheo knee current setpoint', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 28, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_STATIC_TORQUE, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_MOUNTAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 29, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_mountain = {'name': 'RHEO_KNEE_MOUNTAIN', 'description': 'The contribution of the mountain part of the rheo knee current setpoint', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 29, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '-', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_MOUNTAIN, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_WALKING_SPEED_BIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 30, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_rheo_knee_walking_speed_bin = {'name': 'RHEO_KNEE_WALKING_SPEED_BIN', 'description': 'The cadence estimation as used in RKN3', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 30, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '-', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_WALKING_SPEED_BIN, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_RUNNING_ACTIVE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 31, VARFLAGS_READ, DATATYPE_BOOL]), byteorder='little')
var_rheo_knee_running_active = {'name': 'RHEO_KNEE_RUNNING_ACTIVE', 'description': 'Whether the knee has triggered running mode or not', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 31, 'VARFLAGS.READ', 'DATATYPE.BOOL'], 'unit': '-', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_RUNNING_ACTIVE, 'datatype': 'BOOL'}
VAR_RHEO_KNEE_TORQUE_VELOCITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 32, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_torque_velocity = {'name': 'RHEO_KNEE_TORQUE_VELOCITY', 'description': 'The contribution of the velocity proportional part of the rheo knee current setpoint', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 32, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '-', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_TORQUE_VELOCITY, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_INDEPENDENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 33, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_independent = {'name': 'RHEO_KNEE_INDEPENDENT', 'description': 'The contribution of the indepenent part of the rheo knee current setpoint', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 33, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '-', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_INDEPENDENT, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_DISABLE_STAIR_ASCENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 34, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_rheo_knee_disable_stair_ascent = {'name': 'RHEO_KNEE_DISABLE_STAIR_ASCENT', 'description': 'Enables or disables stair ascent activity', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 34, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_DISABLE_STAIR_ASCENT, 'datatype': 'BOOL'}
VAR_RHEO_KNEE_ACC_Z_POSITION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 35, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_acc_z_position = {'name': 'RHEO_KNEE_ACC_Z_POSITION', 'description': 'The double-integrated value of the Accelerometer in Z-direction', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 35, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ACC_Z_POSITION, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_ACC_Z_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 36, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_acc_z_max = {'name': 'RHEO_KNEE_ACC_Z_MAX', 'description': 'The maximum value of the Accelerometer in Z-direction', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 36, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ACC_Z_MAX, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_ACC_Y_VELOCITY_DIFFERENCE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 37, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_acc_y_velocity_difference = {'name': 'RHEO_KNEE_ACC_Y_VELOCITY_DIFFERENCE', 'description': 'The difference in peaks of the integrated accelerometer Y-direction', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 37, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ACC_Y_VELOCITY_DIFFERENCE, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_LOAD_CELL_ANTERIOR_AUTO_CALIB_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 38, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_load_cell_anterior_auto_calib_offset = {'name': 'RHEO_KNEE_LOAD_CELL_ANTERIOR_AUTO_CALIB_OFFSET', 'description': 'The value of the offset for the anterior loadcell due to auto-calibration', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 38, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'N', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_LOAD_CELL_ANTERIOR_AUTO_CALIB_OFFSET, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_LOAD_CELL_POSTERIOR_AUTO_CALIB_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 39, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_load_cell_posterior_auto_calib_offset = {'name': 'RHEO_KNEE_LOAD_CELL_POSTERIOR_AUTO_CALIB_OFFSET', 'description': 'The value of the offset for the anterior loadcell due to auto-calibration', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 39, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'N', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_LOAD_CELL_POSTERIOR_AUTO_CALIB_OFFSET, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_LOAD_CELL_AUTO_CALIB_STEPS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 40, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_rheo_knee_load_cell_auto_calib_steps = {'name': 'RHEO_KNEE_LOAD_CELL_AUTO_CALIB_STEPS', 'description': 'The steps taken for the current load-cell auto calibration cycle', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 40, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_LOAD_CELL_AUTO_CALIB_STEPS, 'datatype': 'UINT8'}
VAR_RHEO_KNEE_ESTIMATED_WEIGHT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 41, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_estimated_weight = {'name': 'RHEO_KNEE_ESTIMATED_WEIGHT', 'description': 'Estimated weight of the user ', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 41, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'N', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_ESTIMATED_WEIGHT, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_RELATIVE_THIGH_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 42, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_relative_thigh_angle = {'name': 'RHEO_KNEE_RELATIVE_THIGH_ANGLE', 'description': 'Thigh angle progression since heel-strike', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 42, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_RELATIVE_THIGH_ANGLE, 'datatype': 'REAL32'}
VAR_RHEO_KNEE_RELATIVE_SHANK_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 43, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_rheo_knee_relative_shank_angle = {'name': 'RHEO_KNEE_RELATIVE_SHANK_ANGLE', 'description': 'Shank angle progression since heel-strike', 'min': 'REAL32_MIN', 'max': 'REAL32_MAX', 'default': 0, 'valueBytes': ['DEVICE.RHEO_KNEE', 43, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': VAR_RHEO_KNEE_RELATIVE_SHANK_ANGLE, 'datatype': 'REAL32'}
VAR_FOOT_ENABLE_ADAPTIVE_STANCE_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 1, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_adaptive_stance_angle = {'name': 'FOOT_ENABLE_ADAPTIVE_STANCE_ANGLE', 'description': 'Enable adaptive stance angle with regards to speed', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 1, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_ADAPTIVE_STANCE_ANGLE, 'datatype': 'BOOL'}
VAR_FOOT_ENABLE_SURFACE_ADAPTATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 2, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_surface_adaptation = {'name': 'FOOT_ENABLE_SURFACE_ADAPTATION', 'description': 'Enable surface adaptation', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.FOOT', 2, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_SURFACE_ADAPTATION, 'datatype': 'BOOL'}
VAR_FOOT_ENABLE_TOELIFT_IN_SWING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 3, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_toelift_in_swing = {'name': 'FOOT_ENABLE_TOELIFT_IN_SWING', 'description': 'Enable toelift in swing', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.FOOT', 3, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_TOELIFT_IN_SWING, 'datatype': 'BOOL'}
VAR_FOOT_ENABLE_EARLY_STAIR_UP_DETECTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 4, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_early_stair_up_detection = {'name': 'FOOT_ENABLE_EARLY_STAIR_UP_DETECTION', 'description': 'Enable early stair up detection and adaptation', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.FOOT', 4, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_EARLY_STAIR_UP_DETECTION, 'datatype': 'BOOL'}
VAR_FOOT_ENABLE_U_TURN_DETECTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 5, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_u_turn_detection = {'name': 'FOOT_ENABLE_U_TURN_DETECTION', 'description': 'Enable u-turn detection', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.FOOT', 5, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_U_TURN_DETECTION, 'datatype': 'BOOL'}
VAR_FOOT_FLAT_WALK_CALIBRATION_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 6, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_flat_walk_calibration_angle = {'name': 'FOOT_FLAT_WALK_CALIBRATION_ANGLE', 'description': 'Calibration angle for surface angle', 'min': -360000, 'max': 360000, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 6, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_FLAT_WALK_CALIBRATION_ANGLE, 'datatype': 'INT32'}
VAR_FOOT_FLAT_WALK_CALIBRATION_SPEED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 7, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_flat_walk_calibration_speed = {'name': 'FOOT_FLAT_WALK_CALIBRATION_SPEED', 'description': 'average speed during flat walk calibration', 'min': 0, 'max': 5000, 'default': 1000, 'valueBytes': ['DEVICE.FOOT', 7, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_FLAT_WALK_CALIBRATION_SPEED, 'datatype': 'UINT16'}
VAR_FOOT_HEEL_HEIGHT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 8, VARFLAGS_RW | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_heel_height = {'name': 'FOOT_HEEL_HEIGHT', 'description': 'Heel height calibrated value, a.k.a Neutral angle', 'min': -2000, 'max': 14000, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 8, 'VARFLAGS.RW | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_HEEL_HEIGHT, 'datatype': 'INT32'}
VAR_FOOT_JOINT_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 9, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_foot_joint_angle = {'name': 'FOOT_JOINT_ANGLE', 'description': 'Joint angle', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 9, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_JOINT_ANGLE, 'datatype': 'INT32'}
VAR_FOOT_JOINT_ANGLE_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 10, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_foot_joint_angle_gain = {'name': 'FOOT_JOINT_ANGLE_GAIN', 'description': 'Joint angle gain', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 10, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_JOINT_ANGLE_GAIN, 'datatype': 'INT32'}
VAR_FOOT_JOINT_ANGLE_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 11, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_foot_joint_angle_offset = {'name': 'FOOT_JOINT_ANGLE_OFFSET', 'description': 'Joint angle offset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 11, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm°', 'value': VAR_FOOT_JOINT_ANGLE_OFFSET, 'datatype': 'INT32'}
VAR_FOOT_JOINT_ANGLE_UNCALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 12, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_joint_angle_uncalibrated = {'name': 'FOOT_JOINT_ANGLE_UNCALIBRATED', 'description': 'Joint angle uncalibrated', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 12, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_JOINT_ANGLE_UNCALIBRATED, 'datatype': 'UINT16'}
VAR_FOOT_JOINT_RANGE_OF_MOTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 13, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_joint_range_of_motion = {'name': 'FOOT_JOINT_RANGE_OF_MOTION', 'description': 'Joint angle range of motion', 'min': 0, 'max': 'UINT32_MAX', 'default': 30000, 'valueBytes': ['DEVICE.FOOT', 13, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_JOINT_RANGE_OF_MOTION, 'datatype': 'UINT32'}
VAR_FOOT_JOINT_RANGE_OF_MOTION_MARGIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 14, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_joint_range_of_motion_margin = {'name': 'FOOT_JOINT_RANGE_OF_MOTION_MARGIN', 'description': 'Joint angle movement margin at the mechanical ends', 'min': 0, 'max': 'UINT16_MAX', 'default': 1500, 'valueBytes': ['DEVICE.FOOT', 14, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_JOINT_RANGE_OF_MOTION_MARGIN, 'datatype': 'UINT16'}
VAR_FOOT_JOINT_RANGE_OF_MOTION_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 15, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_foot_joint_range_of_motion_max = {'name': 'FOOT_JOINT_RANGE_OF_MOTION_MAX', 'description': 'Joint angle maximun degree', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 15000, 'valueBytes': ['DEVICE.FOOT', 15, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_JOINT_RANGE_OF_MOTION_MAX, 'datatype': 'INT32'}
VAR_FOOT_JOINT_RANGE_OF_MOTION_MIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 16, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_foot_joint_range_of_motion_min = {'name': 'FOOT_JOINT_RANGE_OF_MOTION_MIN', 'description': 'Joint angle minimum degree', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': -15000, 'valueBytes': ['DEVICE.FOOT', 16, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_JOINT_RANGE_OF_MOTION_MIN, 'datatype': 'INT32'}
VAR_FOOT_ENABLE_MANUAL_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 17, VARFLAGS_RW, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_manual_mode = {'name': 'FOOT_ENABLE_MANUAL_MODE', 'description': 'Enable manual mode', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 17, 'VARFLAGS.RW', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_MANUAL_MODE, 'datatype': 'BOOL'}
VAR_FOOT_MOTOR_FAILED_RETRIES = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 18, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_failed_retries = {'name': 'FOOT_MOTOR_FAILED_RETRIES', 'description': 'Total failed retries of motor movement', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 18, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_FOOT_MOTOR_FAILED_RETRIES, 'datatype': 'UINT32'}
VAR_FOOT_MOTOR_POSITION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 19, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_position = {'name': 'FOOT_MOTOR_POSITION', 'description': 'Current motor position', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 19, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'value': VAR_FOOT_MOTOR_POSITION, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_RANGE_LIMIT_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 20, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_foot_motor_range_limit_max = {'name': 'FOOT_MOTOR_RANGE_LIMIT_MAX', 'description': 'Joint sensor higher endstop value', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 20, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_RANGE_LIMIT_MAX, 'datatype': 'INT32'}
VAR_FOOT_MOTOR_RANGE_LIMIT_MIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 21, VARFLAGS_READ, DATATYPE_INT32]), byteorder='little')
var_foot_motor_range_limit_min = {'name': 'FOOT_MOTOR_RANGE_LIMIT_MIN', 'description': 'Joint sensor lower endstop value', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 21, 'VARFLAGS.READ', 'DATATYPE.INT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_RANGE_LIMIT_MIN, 'datatype': 'INT32'}
VAR_FOOT_MOTOR_RANGE_OF_MOTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 22, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_range_of_motion = {'name': 'FOOT_MOTOR_RANGE_OF_MOTION', 'description': 'Motor range of motion in counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 22, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_FOOT_MOTOR_RANGE_OF_MOTION, 'datatype': 'UINT32'}
VAR_FOOT_MOTOR_MOVE_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 23, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_move_count = {'name': 'FOOT_MOTOR_MOVE_COUNT', 'description': 'Total motor movement counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 23, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_MOVE_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_MOTOR_RAMP_UP_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 24, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_foot_motor_ramp_up_rate = {'name': 'FOOT_MOTOR_RAMP_UP_RATE', 'description': 'Total motor rotation counts since last reset', 'min': 0, 'max': 'UINT8_MAX', 'default': 10, 'valueBytes': ['DEVICE.FOOT', 24, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_RAMP_UP_RATE, 'datatype': 'UINT8'}
VAR_FOOT_MOTOR_SLIP_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 25, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_slip_count = {'name': 'FOOT_MOTOR_SLIP_COUNT', 'description': 'Total count of slips occurred', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 25, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_SLIP_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_MOTOR_START_FREQUENCY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 26, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_start_frequency = {'name': 'FOOT_MOTOR_START_FREQUENCY', 'description': 'Total motor rotation counts since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 240, 'valueBytes': ['DEVICE.FOOT', 26, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': 'Hz', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_START_FREQUENCY, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_TOP_FREQUENCY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 27, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_top_frequency = {'name': 'FOOT_MOTOR_TOP_FREQUENCY', 'description': 'Total motor rotation counts since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 460, 'valueBytes': ['DEVICE.FOOT', 27, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': 'Hz', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_TOP_FREQUENCY, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_MOVED_DEGREES = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 28, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_moved_degrees = {'name': 'FOOT_MOTOR_MOVED_DEGREES', 'description': 'Total amount of degrees the motor has moved', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 28, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_MOVED_DEGREES, 'datatype': 'UINT32'}
VAR_FOOT_RELAX_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 29, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_relax_count = {'name': 'FOOT_RELAX_COUNT', 'description': 'Total relax counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 29, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_FOOT_RELAX_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_RELAX_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 30, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_relax_count_slr = {'name': 'FOOT_RELAX_COUNT_SLR', 'description': 'Total relax counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 30, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_RELAX_COUNT_SLR, 'datatype': 'UINT32'}
VAR_FOOT_SET_HEEL_HEIGHT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 31, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_set_heel_height_count = {'name': 'FOOT_SET_HEEL_HEIGHT_COUNT', 'description': 'Total set heel heigth calibration counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 31, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_FOOT_SET_HEEL_HEIGHT_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_SET_HEEL_HEIGHT_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 32, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_set_heel_height_count_slr = {'name': 'FOOT_SET_HEEL_HEIGHT_COUNT_SLR', 'description': 'Total set heel heigth calibration counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 32, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_SET_HEEL_HEIGHT_COUNT_SLR, 'datatype': 'UINT32'}
VAR_FOOT_STANCE_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 33, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_foot_stance_angle = {'name': 'FOOT_STANCE_ANGLE', 'description': 'Desired stance angle', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 33, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_STANCE_ANGLE, 'datatype': 'INT16'}
VAR_FOOT_ADAPTATION_INCLINE_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 34, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_foot_adaptation_incline_rate = {'name': 'FOOT_ADAPTATION_INCLINE_RATE', 'description': 'Incline response rate for surface angle', 'min': 0, 'max': 200, 'default': 70, 'valueBytes': ['DEVICE.FOOT', 34, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ADAPTATION_INCLINE_RATE, 'datatype': 'UINT8'}
VAR_FOOT_ADAPTATION_DECLINE_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 35, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_foot_adaptation_decline_rate = {'name': 'FOOT_ADAPTATION_DECLINE_RATE', 'description': 'Decline response rate for surface angle', 'min': 0, 'max': 200, 'default': 65, 'valueBytes': ['DEVICE.FOOT', 35, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ADAPTATION_DECLINE_RATE, 'datatype': 'UINT8'}
VAR_FOOT_SWING_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 36, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_foot_swing_angle = {'name': 'FOOT_SWING_ANGLE', 'description': 'Desired swing angle', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 36, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_SWING_ANGLE, 'datatype': 'INT16'}
VAR_FOOT_TIMEOUT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 37, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_timeout_count = {'name': 'FOOT_TIMEOUT_COUNT', 'description': 'Total timeout counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 37, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_FOOT_TIMEOUT_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_TIMEOUT_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 38, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_timeout_count_slr = {'name': 'FOOT_TIMEOUT_COUNT_SLR', 'description': 'Total timeout counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 38, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_TIMEOUT_COUNT_SLR, 'datatype': 'UINT32'}
VAR_FOOT_TOELIFT_ABORT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 39, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_toelift_abort_count = {'name': 'FOOT_TOELIFT_ABORT_COUNT', 'description': 'Total toelift abort counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 39, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_FOOT_TOELIFT_ABORT_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_TOELIFT_ABORT_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 40, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_toelift_abort_count_slr = {'name': 'FOOT_TOELIFT_ABORT_COUNT_SLR', 'description': 'Total toelift abort counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 40, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_TOELIFT_ABORT_COUNT_SLR, 'datatype': 'UINT32'}
VAR_FOOT_TOELIFT_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 41, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_toelift_count = {'name': 'FOOT_TOELIFT_COUNT', 'description': 'Total toelift counts', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 41, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'value': VAR_FOOT_TOELIFT_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_TOELIFT_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 42, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_toelift_count_slr = {'name': 'FOOT_TOELIFT_COUNT_SLR', 'description': 'Total toelift counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 42, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_TOELIFT_COUNT_SLR, 'datatype': 'UINT32'}
VAR_FOOT_SET_FLAT_WALK_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 43, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_set_flat_walk_count = {'name': 'FOOT_SET_FLAT_WALK_COUNT', 'description': 'Total toelift counts since last reset', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 43, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'value': VAR_FOOT_SET_FLAT_WALK_COUNT, 'datatype': 'UINT16'}
VAR_FOOT_SET_FLAT_WALK_COUNT_SLR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 44, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_foot_set_flat_walk_count_slr = {'name': 'FOOT_SET_FLAT_WALK_COUNT_SLR', 'description': 'Total toelift counts since last reset', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 44, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_SET_FLAT_WALK_COUNT_SLR, 'datatype': 'UINT32'}
VAR_FOOT_ADAPTATION_RELAX_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 45, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_foot_adaptation_relax_rate = {'name': 'FOOT_ADAPTATION_RELAX_RATE', 'description': 'Relax response percentage', 'min': 0, 'max': 100, 'default': 100, 'valueBytes': ['DEVICE.FOOT', 45, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'value': VAR_FOOT_ADAPTATION_RELAX_RATE, 'datatype': 'UINT8'}
VAR_FOOT_ADAPTATION_CHAIR_EXIT_RATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 46, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_foot_adaptation_chair_exit_rate = {'name': 'FOOT_ADAPTATION_CHAIR_EXIT_RATE', 'description': 'Chair exit response percentage', 'min': 0, 'max': 200, 'default': 100, 'valueBytes': ['DEVICE.FOOT', 46, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '%', 'value': VAR_FOOT_ADAPTATION_CHAIR_EXIT_RATE, 'datatype': 'UINT8'}
VAR_FOOT_ADAPTATION_STAIRS_UP_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 47, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT8]), byteorder='little')
var_foot_adaptation_stairs_up_angle = {'name': 'FOOT_ADAPTATION_STAIRS_UP_ANGLE', 'description': 'Stairs up response in angle', 'min': -2, 'max': 6, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 47, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT8'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ADAPTATION_STAIRS_UP_ANGLE, 'datatype': 'INT8'}
VAR_FOOT_ADAPTATION_STAIRS_DOWN_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 48, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_foot_adaptation_stairs_down_angle = {'name': 'FOOT_ADAPTATION_STAIRS_DOWN_ANGLE', 'description': 'Stairs down response in angle', 'min': 0, 'max': 6, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 48, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ADAPTATION_STAIRS_DOWN_ANGLE, 'datatype': 'UINT8'}
VAR_FOOT_MOTOR_VOLTAGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 49, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_voltage = {'name': 'FOOT_MOTOR_VOLTAGE', 'description': 'Motor voltage', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 49, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'mV', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_VOLTAGE, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_CURRENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 50, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_current = {'name': 'FOOT_MOTOR_CURRENT', 'description': 'Motor current', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 50, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': 'mA', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_CURRENT, 'datatype': 'UINT16'}
VAR_FOOT_RELAX_ENABLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 51, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_foot_relax_enable = {'name': 'FOOT_RELAX_ENABLE', 'description': 'Enable relax', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 51, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_RELAX_ENABLE, 'datatype': 'BOOL'}
VAR_FOOT_CHAIR_EXIT_ENABLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 52, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_foot_chair_exit_enable = {'name': 'FOOT_CHAIR_EXIT_ENABLE', 'description': 'Enable chair exit', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 52, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_CHAIR_EXIT_ENABLE, 'datatype': 'BOOL'}
VAR_FOOT_MOTOR_VOLTAGE_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 53, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_voltage_raw = {'name': 'FOOT_MOTOR_VOLTAGE_RAW', 'description': 'Raw count of Motor voltage', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 53, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_VOLTAGE_RAW, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_CURRENT_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 54, VARFLAGS_READ, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_current_raw = {'name': 'FOOT_MOTOR_CURRENT_RAW', 'description': 'Raw count of Motor current', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 54, 'VARFLAGS.READ', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_CURRENT_RAW, 'datatype': 'UINT16'}
VAR_FOOT_HEEL_HEIGHT_BAREFOOT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 55, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_heel_height_barefoot = {'name': 'FOOT_HEEL_HEIGHT_BAREFOOT', 'description': 'Heel height calibrated value, a.k.a Neutral angle', 'min': 0, 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 55, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_HEEL_HEIGHT_BAREFOOT, 'datatype': 'INT32'}
VAR_FOOT_MOTOR_MOVE_TIME = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 56, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_move_time = {'name': 'FOOT_MOTOR_MOVE_TIME', 'description': 'Motor movement time last movement', 'min': 0, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 56, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_MOVE_TIME, 'datatype': 'UINT32'}
VAR_FOOT_MOTOR_MOVE_TIME_PER_DEGREE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 57, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_move_time_per_degree = {'name': 'FOOT_MOTOR_MOVE_TIME_PER_DEGREE', 'description': 'Motor movement time per degree', 'min': 0, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 57, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_MOVE_TIME_PER_DEGREE, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_MOVE_TIME_TOTAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 58, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_move_time_total = {'name': 'FOOT_MOTOR_MOVE_TIME_TOTAL', 'description': 'Total motor movement time', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 58, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_MOVE_TIME_TOTAL, 'datatype': 'UINT32'}
VAR_FOOT_DEVICE_CALIBRATED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 59, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_foot_device_calibrated = {'name': 'FOOT_DEVICE_CALIBRATED', 'description': 'Device calibration status, 0x00 Uncalibrated, 0x01 Heel Height Calibrated, 0x10 Flat Walk Calibration', 'min': 0, 'max': 17, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 59, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_DEVICE_CALIBRATED, 'datatype': 'UINT8'}
VAR_FOOT_MOTOR_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 60, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_angle = {'name': 'FOOT_MOTOR_ANGLE', 'description': 'Motor angle', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 60, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_ANGLE, 'datatype': 'UINT32'}
VAR_FOOT_U_TURN_DETECTION_GYRO_FORWARD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 61, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_u_turn_detection_gyro_forward = {'name': 'FOOT_U_TURN_DETECTION_GYRO_FORWARD', 'description': 'U-turn detection threshold for gyroscope forward', 'min': 0, 'max': 'UINT16_MAX', 'default': 100, 'valueBytes': ['DEVICE.FOOT', 61, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_U_TURN_DETECTION_GYRO_FORWARD, 'datatype': 'UINT16'}
VAR_FOOT_U_TURN_DETECTION_GYRO_UP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 62, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_u_turn_detection_gyro_up = {'name': 'FOOT_U_TURN_DETECTION_GYRO_UP', 'description': 'U-turn detection threshold for gyroscope up', 'min': 0, 'max': 'UINT16_MAX', 'default': 100, 'valueBytes': ['DEVICE.FOOT', 62, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_U_TURN_DETECTION_GYRO_UP, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_STEP_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 63, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_foot_motor_step_mode = {'name': 'FOOT_MOTOR_STEP_MODE', 'description': 'Motor Step Mode (0=Half Step, 1=Full Step, 2=Wave Step)', 'min': 0, 'max': 2, 'default': 1, 'valueBytes': ['DEVICE.FOOT', 63, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_STEP_MODE, 'datatype': 'UINT8'}
VAR_FOOT_MOTOR_BACKDRIVE_COUNT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 64, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_foot_motor_backdrive_count = {'name': 'FOOT_MOTOR_BACKDRIVE_COUNT', 'description': 'Number of detected motor backdrives', 'min': 0, 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 64, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_BACKDRIVE_COUNT, 'datatype': 'UINT32'}
VAR_FOOT_MOTOR_POSITION_STATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 65, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_foot_motor_position_state = {'name': 'FOOT_MOTOR_POSITION_STATE', 'description': 'Motor Position State (0=Idle, 1=Accel, 2=Top Speed, 3=Motor Cal. - Start, 4=Motor Cal. - Move to Lower end, 5=Motor Cal. - Move to Higher end, 6=Motor Cal. - End)', 'min': 0, 'max': 10, 'default': 0, 'valueBytes': ['DEVICE.FOOT', 65, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_FOOT_MOTOR_POSITION_STATE, 'datatype': 'UINT8'}
VAR_FOOT_MOTOR_TARGET_WINDOW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 66, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_target_window = {'name': 'FOOT_MOTOR_TARGET_WINDOW', 'description': 'Motor Target Window size', 'min': 0, 'max': 'UINT16_MAX', 'default': 500, 'valueBytes': ['DEVICE.FOOT', 66, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'm°', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_TARGET_WINDOW, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_CURRENT_FREQUENCY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 67, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_current_frequency = {'name': 'FOOT_MOTOR_CURRENT_FREQUENCY', 'description': 'Current Motor Frequency', 'min': 0, 'max': 'UINT16_MAX', 'default': 240, 'valueBytes': ['DEVICE.FOOT', 67, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'Hz', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_CURRENT_FREQUENCY, 'datatype': 'UINT16'}
VAR_FOOT_EARLY_STAIR_VEL_FORW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 68, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_early_stair_vel_forw = {'name': 'FOOT_EARLY_STAIR_VEL_FORW', 'description': 'Forward velocity at midswing for early stair detection', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 68, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_EARLY_STAIR_VEL_FORW, 'datatype': 'INT32'}
VAR_FOOT_EARLY_STAIR_VEL_UP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 69, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_early_stair_vel_up = {'name': 'FOOT_EARLY_STAIR_VEL_UP', 'description': 'Upward velocity at midswing for early stair detection', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 69, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_EARLY_STAIR_VEL_UP, 'datatype': 'INT32'}
VAR_FOOT_EARLY_STAIR_POS_FORW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 70, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_early_stair_pos_forw = {'name': 'FOOT_EARLY_STAIR_POS_FORW', 'description': 'Forward position at midswing for early stair detection', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 70, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_EARLY_STAIR_POS_FORW, 'datatype': 'INT32'}
VAR_FOOT_EARLY_STAIR_POS_UP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 71, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_early_stair_pos_up = {'name': 'FOOT_EARLY_STAIR_POS_UP', 'description': 'Upward position at midswing for early stair detection', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 71, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_EARLY_STAIR_POS_UP, 'datatype': 'INT32'}
VAR_FOOT_EARLY_STAIR_VELOCITY_UP_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 72, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_early_stair_velocity_up_offset = {'name': 'FOOT_EARLY_STAIR_VELOCITY_UP_OFFSET', 'description': 'Velocity Up Offset at midswing for early stair detection from level ground walking', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 72, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm/s', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_EARLY_STAIR_VELOCITY_UP_OFFSET, 'datatype': 'INT32'}
VAR_FOOT_EARLY_STAIR_POSITION_UP_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 73, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_foot_early_stair_position_up_offset = {'name': 'FOOT_EARLY_STAIR_POSITION_UP_OFFSET', 'description': 'Position Up Offset at midswing for early stair detection from level ground walking', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.FOOT', 73, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'mm', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_EARLY_STAIR_POSITION_UP_OFFSET, 'datatype': 'INT32'}
VAR_FOOT_MOTOR_RAMP_UP_RATE_FAST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 74, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_foot_motor_ramp_up_rate_fast = {'name': 'FOOT_MOTOR_RAMP_UP_RATE_FAST', 'description': 'Motor ramp up rate for fast movements', 'min': 0, 'max': 'UINT8_MAX', 'default': 10, 'valueBytes': ['DEVICE.FOOT', 74, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_RAMP_UP_RATE_FAST, 'datatype': 'UINT8'}
VAR_FOOT_MOTOR_START_FREQUENCY_FAST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 75, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_start_frequency_fast = {'name': 'FOOT_MOTOR_START_FREQUENCY_FAST', 'description': 'Motor start frequency for fast movements', 'min': 0, 'max': 'UINT16_MAX', 'default': 360, 'valueBytes': ['DEVICE.FOOT', 75, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'Hz', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_START_FREQUENCY_FAST, 'datatype': 'UINT16'}
VAR_FOOT_MOTOR_TOP_FREQUENCY_FAST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 76, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_foot_motor_top_frequency_fast = {'name': 'FOOT_MOTOR_TOP_FREQUENCY_FAST', 'description': 'Motor top frequency for fast movements', 'min': 0, 'max': 'UINT16_MAX', 'default': 480, 'valueBytes': ['DEVICE.FOOT', 76, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': 'Hz', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_MOTOR_TOP_FREQUENCY_FAST, 'datatype': 'UINT16'}
VAR_FOOT_ENABLE_EARLY_STAIR_DOWN_DETECTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 77, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_early_stair_down_detection = {'name': 'FOOT_ENABLE_EARLY_STAIR_DOWN_DETECTION', 'description': 'Enable early stair down detection and adaptation', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.FOOT', 77, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_EARLY_STAIR_DOWN_DETECTION, 'datatype': 'BOOL'}
VAR_FOOT_ENABLE_CURB_DETECTION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 78, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_foot_enable_curb_detection = {'name': 'FOOT_ENABLE_CURB_DETECTION', 'description': 'Enable curb detection and adaptation', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.FOOT', 78, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': VAR_FOOT_ENABLE_CURB_DETECTION, 'datatype': 'BOOL'}
VAR_HIP_LEFT_JOINT_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_HIP, 1, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL32]), byteorder='little')
var_hip_left_joint_angle = {'name': 'HIP_LEFT_JOINT_ANGLE', 'min': -180, 'max': 180, 'default': 1, 'valueBytes': ['DEVICE.HIP', 1, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_HIP_LEFT_JOINT_ANGLE, 'datatype': 'REAL32'}
VAR_HIP_RIGHT_JOINT_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_HIP, 2, VARFLAGS_READ | VARFLAGS_MANDATORY, DATATYPE_REAL32]), byteorder='little')
var_hip_right_joint_angle = {'name': 'HIP_RIGHT_JOINT_ANGLE', 'description': 'Angle of the right hip joint', 'min': -180, 'max': 180, 'default': 1, 'valueBytes': ['DEVICE.HIP', 2, 'VARFLAGS.READ | VARFLAGS.MANDATORY', 'DATATYPE.REAL32'], 'unit': '°', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_HIP_RIGHT_JOINT_ANGLE, 'datatype': 'REAL32'}
VAR_HEART_RATE_MONITOR_VALUE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_HEART_RATE_MONITOR, 1, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_heart_rate_monitor_value = {'name': 'HEART_RATE_MONITOR_VALUE', 'description': 'Heart rate beats per minute (bpm)', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.HEART_RATE_MONITOR', 1, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_HEART_RATE_MONITOR_VALUE, 'datatype': 'UINT8'}
VAR_HEART_RATE_MONITOR_FLAGS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_HEART_RATE_MONITOR, 2, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_heart_rate_monitor_flags = {'name': 'HEART_RATE_MONITOR_FLAGS', 'description': 'Flags', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.HEART_RATE_MONITOR', 2, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_HEART_RATE_MONITOR_FLAGS, 'datatype': 'UINT8'}
VAR_HEART_RATE_MONITOR_LOCATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_HEART_RATE_MONITOR, 3, VARFLAGS_READ, DATATYPE_UINT8]), byteorder='little')
var_heart_rate_monitor_location = {'name': 'HEART_RATE_MONITOR_LOCATION', 'description': 'Location of the sensor', 'min': 0, 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.HEART_RATE_MONITOR', 3, 'VARFLAGS.READ', 'DATATYPE.UINT8'], 'unit': '', 'value': VAR_HEART_RATE_MONITOR_LOCATION, 'datatype': 'UINT8'}
VAR_BSMB_CONNECT_TO_DEVICE_1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 1, VARFLAGS_RW, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_1 = {'name': 'BSMB_CONNECT_TO_DEVICE_1', 'description': 'Name of the device BSMB should connect to', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 1, 'VARFLAGS.RW', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_1, 'datatype': 'TEXT'}
VAR_BSMB_CONNECT_TO_DEVICE_2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 2, VARFLAGS_RW, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_2 = {'name': 'BSMB_CONNECT_TO_DEVICE_2', 'description': 'Name of the device BSMB should NOT connect to', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 2, 'VARFLAGS.RW', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_2, 'datatype': 'TEXT'}
VAR_BSMB_CONNECT_TO_DEVICE_3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 3, VARFLAGS_RW, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_3 = {'name': 'BSMB_CONNECT_TO_DEVICE_3', 'description': 'Name of the device BSMB should connect to', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 3, 'VARFLAGS.RW', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_3, 'datatype': 'TEXT'}
VAR_BSMB_CONNECT_TO_DEVICE_4 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 4, VARFLAGS_RW, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_4 = {'name': 'BSMB_CONNECT_TO_DEVICE_4', 'description': 'Name of the device BSMB should connect to', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 4, 'VARFLAGS.RW', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_4, 'datatype': 'TEXT'}
VAR_BSMB_CONNECT_TO_DEVICE_1_PASSKEY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 94, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_1_passkey = {'name': 'BSMB_CONNECT_TO_DEVICE_1_PASSKEY', 'description': 'Passkey for device 1', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 94, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_1_PASSKEY, 'datatype': 'TEXT'}
VAR_BSMB_CONNECT_TO_DEVICE_2_PASSKEY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 95, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_2_passkey = {'name': 'BSMB_CONNECT_TO_DEVICE_2_PASSKEY', 'description': 'Passkey for device 2', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 95, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_2_PASSKEY, 'datatype': 'TEXT'}
VAR_BSMB_CONNECT_TO_DEVICE_3_PASSKEY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 96, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_3_passkey = {'name': 'BSMB_CONNECT_TO_DEVICE_3_PASSKEY', 'description': 'Passkey for device 3', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 96, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_3_PASSKEY, 'datatype': 'TEXT'}
VAR_BSMB_CONNECT_TO_DEVICE_4_PASSKEY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 97, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_TEXT]), byteorder='little')
var_bsmb_connect_to_device_4_passkey = {'name': 'BSMB_CONNECT_TO_DEVICE_4_PASSKEY', 'description': 'Passkey for device 4', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 97, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICE_4_PASSKEY, 'datatype': 'TEXT'}
VAR_BSMB_MUSCLE_FLEX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 5, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_flex = {'name': 'BSMB_MUSCLE_FLEX', 'description': 'Muscle flex', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 5, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_FLEX, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_EXTEND = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 6, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_extend = {'name': 'BSMB_MUSCLE_EXTEND', 'description': 'Muscle extend', 'min': 0, 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 6, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EXTEND, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_FLEX_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 118, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_flex_gain = {'name': 'BSMB_MUSCLE_FLEX_GAIN', 'description': 'Muscle Flex Gain', 'min': '0', 'max': 'UINT16_MAX', 'default': 100, 'valueBytes': ['DEVICE.BSMB', 118, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_FLEX_GAIN, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_EXTEND_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 119, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_extend_gain = {'name': 'BSMB_MUSCLE_EXTEND_GAIN', 'description': 'Muscle Extend Gain', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 119, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EXTEND_GAIN, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_FLEX_AVG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 120, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_bsmb_muscle_flex_avg = {'name': 'BSMB_MUSCLE_FLEX_AVG', 'description': 'Muscle Flex Average', 'min': '0', 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 120, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_FLEX_AVG, 'datatype': 'UINT32'}
VAR_BSMB_MUSCLE_EXTEND_AVG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 121, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT32]), byteorder='little')
var_bsmb_muscle_extend_avg = {'name': 'BSMB_MUSCLE_EXTEND_AVG', 'description': 'Muscle Extend Average', 'min': '0', 'max': 'UINT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 121, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EXTEND_AVG, 'datatype': 'UINT32'}
VAR_BSMB_EMG_CONTROL_NORMALIZED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 113, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_emg_control_normalized = {'name': 'BSMB_EMG_CONTROL_NORMALIZED', 'description': 'Use normalized EMG signals', 'min': '0', 'max': '1', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 113, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_EMG_CONTROL_NORMALIZED, 'datatype': 'BOOL'}
VAR_BSMB_MUSCLE_1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 7, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_bsmb_muscle_1 = {'name': 'BSMB_MUSCLE_1', 'description': 'Muscle 1', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 7, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_1, 'datatype': 'INT16'}
VAR_BSMB_MUSCLE_2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 8, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_bsmb_muscle_2 = {'name': 'BSMB_MUSCLE_2', 'description': 'Muscle 2', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 8, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_2, 'datatype': 'INT16'}
VAR_BSMB_MUSCLE_3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 9, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_bsmb_muscle_3 = {'name': 'BSMB_MUSCLE_3', 'description': 'Muscle 3', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 9, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_3, 'datatype': 'INT16'}
VAR_BSMB_MUSCLE_4 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 10, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_bsmb_muscle_4 = {'name': 'BSMB_MUSCLE_4', 'description': 'Muscle 4', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 10, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_4, 'datatype': 'INT16'}
VAR_BSMB_MUSCLE_1_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 11, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_1_gain = {'name': 'BSMB_MUSCLE_1_GAIN', 'description': 'Muscle 1 gain', 'min': 0, 'max': 'UINT16_MAX', 'default': 1, 'valueBytes': ['DEVICE.BSMB', 11, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_1_GAIN, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_2_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 12, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_2_gain = {'name': 'BSMB_MUSCLE_2_GAIN', 'description': 'Muscle 2 gain', 'min': 0, 'max': 'UINT16_MAX', 'default': 1, 'valueBytes': ['DEVICE.BSMB', 12, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_2_GAIN, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_3_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 13, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_3_gain = {'name': 'BSMB_MUSCLE_3_GAIN', 'description': 'Muscle 3 gain', 'min': 0, 'max': 'UINT16_MAX', 'default': 1, 'valueBytes': ['DEVICE.BSMB', 13, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_3_GAIN, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_4_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 14, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_4_gain = {'name': 'BSMB_MUSCLE_4_GAIN', 'description': 'Muscle 4 gain', 'min': 0, 'max': 'UINT16_MAX', 'default': 1, 'valueBytes': ['DEVICE.BSMB', 14, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_4_GAIN, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_FLEX_SELECT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 106, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_muscle_flex_select = {'name': 'BSMB_MUSCLE_FLEX_SELECT', 'description': 'Flex Muscle select signal', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 106, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_FLEX_SELECT, 'datatype': 'UINT8'}
VAR_BSMB_MUSCLE_EXTEND_SELECT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 107, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_muscle_extend_select = {'name': 'BSMB_MUSCLE_EXTEND_SELECT', 'description': 'Extend Muscle select signal', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 107, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EXTEND_SELECT, 'datatype': 'UINT8'}
VAR_BSMB_MUSCLE_FLEX_THRESHOLD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 108, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_flex_threshold = {'name': 'BSMB_MUSCLE_FLEX_THRESHOLD', 'description': 'Flex Muscle threshold', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 108, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_FLEX_THRESHOLD, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_EXTEND_THRESHOLD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 109, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_extend_threshold = {'name': 'BSMB_MUSCLE_EXTEND_THRESHOLD', 'description': 'Extend Muscle threshold', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 109, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EXTEND_THRESHOLD, 'datatype': 'UINT16'}
VAR_BSMB_ENABLE_EMG_AMBULATION_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 110, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_enable_emg_ambulation_control = {'name': 'BSMB_ENABLE_EMG_AMBULATION_CONTROL', 'description': 'Enable control during ambulation', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 110, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_ENABLE_EMG_AMBULATION_CONTROL, 'datatype': 'UINT8'}
VAR_BSMB_EMG_CONTROL_METHOD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 111, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_emg_control_method = {'name': 'BSMB_EMG_CONTROL_METHOD', 'description': 'Emg control method', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 111, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_EMG_CONTROL_METHOD, 'datatype': 'UINT8'}
VAR_BSMB_EMG_CONTROL_RETURN_TO_NEUTRAL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 112, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_emg_control_return_to_neutral = {'name': 'BSMB_EMG_CONTROL_RETURN_TO_NEUTRAL', 'description': 'Enable return to neutral angle after muscle contraction', 'min': '0', 'max': 'UINT8_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 112, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_EMG_CONTROL_RETURN_TO_NEUTRAL, 'datatype': 'UINT8'}
VAR_BSMB_CONNECT_TO_DEVICES = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 16, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_bsmb_connect_to_devices = {'name': 'BSMB_CONNECT_TO_DEVICES', 'description': 'Connect to devices (peripherals)', 'min': 0, 'max': 'UINT8_MAX', 'default': 30, 'valueBytes': ['DEVICE.BSMB', 16, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_CONNECT_TO_DEVICES, 'datatype': 'UINT8'}
VAR_BSMB_TRANCEIVE_DATA = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 15, VARFLAGS_RW, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tranceive_data = {'name': 'BSMB_TRANCEIVE_DATA', 'description': 'Tranceive data between central and peripheral', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 15, 'VARFLAGS.RW', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TRANCEIVE_DATA, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP1_FIFTY_HZ_NOTCH_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 17, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_fifty_hz_notch_filter = {'name': 'BSMB_TB_AMP1_FIFTY_HZ_NOTCH_FILTER', 'description': 'Enable 50 Hz notch filter', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BSMB', 17, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_FIFTY_HZ_NOTCH_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_SIXTY_HZ_NOTCH_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 18, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_sixty_hz_notch_filter = {'name': 'BSMB_TB_AMP1_SIXTY_HZ_NOTCH_FILTER', 'description': 'Enable 60 Hz notch filter', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 18, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_SIXTY_HZ_NOTCH_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_THREE_HZ_HIGH_PASS_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 19, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_three_hz_high_pass_filter = {'name': 'BSMB_TB_AMP1_THREE_HZ_HIGH_PASS_FILTER', 'description': 'Enable 3 hz high pass filter', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 19, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_THREE_HZ_HIGH_PASS_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_TWENTY_HZ_HIGH_PASS_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 20, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_twenty_hz_high_pass_filter = {'name': 'BSMB_TB_AMP1_TWENTY_HZ_HIGH_PASS_FILTER', 'description': 'Enable 20 hz high pass filter', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BSMB', 20, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_TWENTY_HZ_HIGH_PASS_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_PROPORTIONAL_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 21, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_proportional_control = {'name': 'BSMB_TB_AMP1_PROPORTIONAL_CONTROL', 'description': 'Enable proportional control output|DEVICE_APPS.BSMB_MAIN_APP', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 21, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_PROPORTIONAL_CONTROL, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_EMG_FILTERED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 22, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_emg_filtered = {'name': 'BSMB_TB_AMP1_EMG_FILTERED', 'description': 'Send EMG data after filtering', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BSMB', 22, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_EMG_FILTERED, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_MAV = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 23, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_mav = {'name': 'BSMB_TB_AMP1_MAV', 'description': 'Send mean absolute value (MAV), to be sent once available depending on the buffer length and overlap parameters. ', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 23, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_MAV, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_WFL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 24, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp1_wfl = {'name': 'BSMB_TB_AMP1_WFL', 'description': 'Send waveform length (WL), to be sent once available depending on the buffer length and overlap parameters.', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 24, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_WFL, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP1_CHANNEL_0_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 25, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp1_channel_0_gain = {'name': 'BSMB_TB_AMP1_CHANNEL_0_GAIN', 'description': 'EMG channel 0 gain', 'min': 0, 'max': 'UINT8_MAX', 'default': 100, 'valueBytes': ['DEVICE.BSMB', 25, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_CHANNEL_0_GAIN, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP1_CHANNEL_1_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 26, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp1_channel_1_gain = {'name': 'BSMB_TB_AMP1_CHANNEL_1_GAIN', 'description': 'EMG channel 1 gain', 'min': 0, 'max': 'UINT8_MAX', 'default': 100, 'valueBytes': ['DEVICE.BSMB', 26, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_CHANNEL_1_GAIN, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP1_BUFFER_LENGTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 27, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp1_buffer_length = {'name': 'BSMB_TB_AMP1_BUFFER_LENGTH', 'description': 'Buffer Length (x10 samples). Valid values are in the range 1..255, e.g. setting this to 20 gives a buffer length of 200 samples.', 'min': 0, 'max': 'UINT8_MAX', 'default': 20, 'valueBytes': ['DEVICE.BSMB', 27, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_BUFFER_LENGTH, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP1_TRANSMIT_PERIOD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 28, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp1_transmit_period = {'name': 'BSMB_TB_AMP1_TRANSMIT_PERIOD', 'description': 'Transmit Period (ms). Valid values are in the range 1..255. Note acquisitions are always done on a 1kHz period. The transmit period specifies every nth sample should be transmitted. Note: 0 does the same as 1.', 'min': 0, 'max': 'UINT8_MAX', 'default': 1, 'valueBytes': ['DEVICE.BSMB', 28, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_TRANSMIT_PERIOD, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP1_OVERLAP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 29, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp1_overlap = {'name': 'BSMB_TB_AMP1_OVERLAP', 'description': 'Overlap (%). Valid values are in the range 0..99. Values outside this range will be ignored.', 'min': 0, 'max': 99, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 29, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_OVERLAP, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP1_EMG1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 30, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_bsmb_tb_amp1_emg1 = {'name': 'BSMB_TB_AMP1_EMG1', 'description': 'EMG output 1', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 30, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_EMG1, 'datatype': 'INT16'}
VAR_BSMB_TB_AMP1_EMG2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 31, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_bsmb_tb_amp1_emg2 = {'name': 'BSMB_TB_AMP1_EMG2', 'description': 'EMG output 2', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 31, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_EMG2, 'datatype': 'INT16'}
VAR_BSMB_TB_AMP1_ID = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 47, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp1_id = {'name': 'BSMB_TB_AMP1_ID', 'description': 'Amplifier 1 ID', 'min': 0, 'max': 16, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 47, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP1_ID, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP2_FIFTY_HZ_NOTCH_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 32, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_fifty_hz_notch_filter = {'name': 'BSMB_TB_AMP2_FIFTY_HZ_NOTCH_FILTER', 'description': 'Enable 50 Hz notch filter', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BSMB', 32, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_FIFTY_HZ_NOTCH_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_SIXTY_HZ_NOTCH_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 33, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_sixty_hz_notch_filter = {'name': 'BSMB_TB_AMP2_SIXTY_HZ_NOTCH_FILTER', 'description': 'Enable 60 Hz notch filter', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 33, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_SIXTY_HZ_NOTCH_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_THREE_HZ_HIGH_PASS_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 34, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_three_hz_high_pass_filter = {'name': 'BSMB_TB_AMP2_THREE_HZ_HIGH_PASS_FILTER', 'description': 'Enable 3 hz high pass filter', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 34, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_THREE_HZ_HIGH_PASS_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_TWENTY_HZ_HIGH_PASS_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 35, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_twenty_hz_high_pass_filter = {'name': 'BSMB_TB_AMP2_TWENTY_HZ_HIGH_PASS_FILTER', 'description': 'Enable 20 hz high pass filter', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BSMB', 35, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_TWENTY_HZ_HIGH_PASS_FILTER, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_PROPORTIONAL_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 36, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_proportional_control = {'name': 'BSMB_TB_AMP2_PROPORTIONAL_CONTROL', 'description': 'Enable proportional control output', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 36, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_PROPORTIONAL_CONTROL, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_EMG_FILTERED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 37, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_emg_filtered = {'name': 'BSMB_TB_AMP2_EMG_FILTERED', 'description': 'Send EMG data after filtering', 'min': 0, 'max': 1, 'default': 1, 'valueBytes': ['DEVICE.BSMB', 37, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_EMG_FILTERED, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_MAV = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 38, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_mav = {'name': 'BSMB_TB_AMP2_MAV', 'description': 'Send mean absolute value (MAV), to be sent once available depending on the buffer length and overlap parameters. ', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 38, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_MAV, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_WFL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 39, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_BOOL]), byteorder='little')
var_bsmb_tb_amp2_wfl = {'name': 'BSMB_TB_AMP2_WFL', 'description': 'Send waveform length (WL), to be sent once available depending on the buffer length and overlap parameters.', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 39, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_WFL, 'datatype': 'BOOL'}
VAR_BSMB_TB_AMP2_CHANNEL_0_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 40, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp2_channel_0_gain = {'name': 'BSMB_TB_AMP2_CHANNEL_0_GAIN', 'description': 'EMG channel 0 gain', 'min': 0, 'max': 'UINT8_MAX', 'default': 100, 'valueBytes': ['DEVICE.BSMB', 40, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_CHANNEL_0_GAIN, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP2_CHANNEL_1_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 41, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp2_channel_1_gain = {'name': 'BSMB_TB_AMP2_CHANNEL_1_GAIN', 'description': 'EMG channel 1 gain', 'min': 0, 'max': 'UINT8_MAX', 'default': 100, 'valueBytes': ['DEVICE.BSMB', 41, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_CHANNEL_1_GAIN, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP2_BUFFER_LENGTH = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 42, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp2_buffer_length = {'name': 'BSMB_TB_AMP2_BUFFER_LENGTH', 'description': 'Buffer Length (x10 samples). Valid values are in the range 1..255, e.g. setting this to 20 gives a buffer length of 200 samples.', 'min': 0, 'max': 'UINT8_MAX', 'default': 20, 'valueBytes': ['DEVICE.BSMB', 42, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_BUFFER_LENGTH, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP2_TRANSMIT_PERIOD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 43, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp2_transmit_period = {'name': 'BSMB_TB_AMP2_TRANSMIT_PERIOD', 'description': 'Transmit Period (ms). Valid values are in the range 1..255. Note acquisitions are always done on a 1kHz period. The transmit period specifies every nth sample should be transmitted. Note: 0 does the same as 1.', 'min': 0, 'max': 'UINT8_MAX', 'default': 1, 'valueBytes': ['DEVICE.BSMB', 43, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': 'ms', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_TRANSMIT_PERIOD, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP2_OVERLAP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 44, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp2_overlap = {'name': 'BSMB_TB_AMP2_OVERLAP', 'description': 'Overlap (%). Valid values are in the range 0..99. Values outside this range will be ignored.', 'min': 0, 'max': 99, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 44, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '%', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_OVERLAP, 'datatype': 'UINT8'}
VAR_BSMB_TB_AMP2_EMG1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 45, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_bsmb_tb_amp2_emg1 = {'name': 'BSMB_TB_AMP2_EMG1', 'description': 'EMG output 1', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 45, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_EMG1, 'datatype': 'INT16'}
VAR_BSMB_TB_AMP2_EMG2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 46, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT16]), byteorder='little')
var_bsmb_tb_amp2_emg2 = {'name': 'BSMB_TB_AMP2_EMG2', 'description': 'EMG output 2', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 46, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_EMG2, 'datatype': 'INT16'}
VAR_BSMB_TB_AMP2_ID = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 48, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_tb_amp2_id = {'name': 'BSMB_TB_AMP2_ID', 'description': 'Amplifier 2 ID', 'min': 0, 'max': 16, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 48, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_TB_AMP2_ID, 'datatype': 'UINT8'}
VAR_BSMB_HALL_EFFECT_1_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 76, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_1_x = {'name': 'BSMB_HALL_EFFECT_1_X', 'description': 'Hall Effect 1 X-axis', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 76, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_X, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_1_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 77, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_1_y = {'name': 'BSMB_HALL_EFFECT_1_Y', 'description': 'Hall Effect 1 Y-axis', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 77, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_Y, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_1_Z = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 78, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_1_z = {'name': 'BSMB_HALL_EFFECT_1_Z', 'description': 'Hall Effect 1 Z-axis', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 78, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_Z, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_1_X_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 79, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_1_x_offset = {'name': 'BSMB_HALL_EFFECT_1_X_OFFSET', 'description': 'Hall Effect 1 X-axis offset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 79, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_X_OFFSET, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_1_Y_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 80, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_1_y_offset = {'name': 'BSMB_HALL_EFFECT_1_Y_OFFSET', 'description': 'Hall Effect 1 Y-axis offset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 80, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_Y_OFFSET, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_1_Z_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 81, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_1_z_offset = {'name': 'BSMB_HALL_EFFECT_1_Z_OFFSET', 'description': 'Hall Effect 1 Z-axis offset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 81, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_Z_OFFSET, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_1_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 82, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_hall_effect_1_gain = {'name': 'BSMB_HALL_EFFECT_1_GAIN', 'description': 'Hall Effect 1 Gain', 'min': 0, 'max': 7, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 82, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_GAIN, 'datatype': 'UINT8'}
VAR_BSMB_HALL_EFFECT_1_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 83, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_hall_effect_1_filter = {'name': 'BSMB_HALL_EFFECT_1_FILTER', 'description': 'Hall Effect 1 Filter', 'min': 0, 'max': 7, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 83, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_FILTER, 'datatype': 'UINT8'}
VAR_BSMB_HALL_EFFECT_1_OSR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 84, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_hall_effect_1_osr = {'name': 'BSMB_HALL_EFFECT_1_OSR', 'description': 'Hall Effect 1 Oversampling', 'min': 0, 'max': 3, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 84, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_1_OSR, 'datatype': 'UINT8'}
VAR_BSMB_HALL_EFFECT_2_X = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 85, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_2_x = {'name': 'BSMB_HALL_EFFECT_2_X', 'description': 'Hall Effect 2 X-axis', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 85, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_X, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_2_Y = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 86, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_2_y = {'name': 'BSMB_HALL_EFFECT_2_Y', 'description': 'Hall Effect 2 Y-axis', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 86, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_Y, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_2_Z = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 87, VARFLAGS_READ  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_2_z = {'name': 'BSMB_HALL_EFFECT_2_Z', 'description': 'Hall Effect 2 Z-axis', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 87, 'VARFLAGS.READ  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_Z, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_2_X_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 88, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_2_x_offset = {'name': 'BSMB_HALL_EFFECT_2_X_OFFSET', 'description': 'Hall Effect 2 X-axis offset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 88, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_X_OFFSET, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_2_Y_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 89, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_2_y_offset = {'name': 'BSMB_HALL_EFFECT_2_Y_OFFSET', 'description': 'Hall Effect 2 Y-axis offset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 89, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_Y_OFFSET, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_2_Z_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 90, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_INT32]), byteorder='little')
var_bsmb_hall_effect_2_z_offset = {'name': 'BSMB_HALL_EFFECT_2_Z_OFFSET', 'description': 'Hall Effect 2 Z-axis offset', 'min': 'INT32_MIN', 'max': 'INT32_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 90, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.INT32'], 'unit': 'uT', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_Z_OFFSET, 'datatype': 'INT32'}
VAR_BSMB_HALL_EFFECT_2_GAIN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 91, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_hall_effect_2_gain = {'name': 'BSMB_HALL_EFFECT_2_GAIN', 'description': 'Hall Effect 2 Gain', 'min': 0, 'max': 7, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 91, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_GAIN, 'datatype': 'UINT8'}
VAR_BSMB_HALL_EFFECT_2_FILTER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 92, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_hall_effect_2_filter = {'name': 'BSMB_HALL_EFFECT_2_FILTER', 'description': 'Hall Effect 2 Filter', 'min': 0, 'max': 7, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 92, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_FILTER, 'datatype': 'UINT8'}
VAR_BSMB_HALL_EFFECT_2_OSR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 93, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT8]), byteorder='little')
var_bsmb_hall_effect_2_osr = {'name': 'BSMB_HALL_EFFECT_2_OSR', 'description': 'Hall Effect 2 Oversampling', 'min': 0, 'max': 3, 'default': 0, 'valueBytes': ['DEVICE.BSMB', 93, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT8'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_HALL_EFFECT_2_OSR, 'datatype': 'UINT8'}
VAR_BSMB_MUSCLE_EC_1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 98, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_ec_1 = {'name': 'BSMB_MUSCLE_EC_1', 'description': 'Muscle 1 Error Checked', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 98, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EC_1, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_EC_2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 99, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_ec_2 = {'name': 'BSMB_MUSCLE_EC_2', 'description': 'Muscle 2 Error Checked', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 99, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EC_2, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_EC_3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 100, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_ec_3 = {'name': 'BSMB_MUSCLE_EC_3', 'description': 'Muscle 3 Error Checked', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 100, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EC_3, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_EC_4 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 101, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_ec_4 = {'name': 'BSMB_MUSCLE_EC_4', 'description': 'Muscle 4 Error Checked', 'min': 'INT16_MIN', 'max': 'INT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 101, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_EC_4, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_1 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 102, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_1 = {'name': 'BSMB_MUSCLE_CONTROL_1', 'description': 'Muscle 1 Control signal', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 102, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_1, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_2 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 103, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_2 = {'name': 'BSMB_MUSCLE_CONTROL_2', 'description': 'Muscle 2 Control signal', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 103, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_2, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_3 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 104, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_3 = {'name': 'BSMB_MUSCLE_CONTROL_3', 'description': 'Muscle 3 Control signal', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 104, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_3, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_4 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 105, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_4 = {'name': 'BSMB_MUSCLE_CONTROL_4', 'description': 'Muscle 4 Control signal', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 105, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_4, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_1_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 114, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_1_max = {'name': 'BSMB_MUSCLE_CONTROL_1_MAX', 'description': 'Muscle 1 Control signal Max value for normalization', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 114, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_1_MAX, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_2_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 115, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_2_max = {'name': 'BSMB_MUSCLE_CONTROL_2_MAX', 'description': 'Muscle 2 Control signal Max value for normalization', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 115, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_2_MAX, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_3_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 116, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_3_max = {'name': 'BSMB_MUSCLE_CONTROL_3_MAX', 'description': 'Muscle 3 Control signal Max value for normalization', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 116, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_3_MAX, 'datatype': 'UINT16'}
VAR_BSMB_MUSCLE_CONTROL_4_MAX = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 117, VARFLAGS_RW  | VARFLAGS_MANDATORY, DATATYPE_UINT16]), byteorder='little')
var_bsmb_muscle_control_4_max = {'name': 'BSMB_MUSCLE_CONTROL_4_MAX', 'description': 'Muscle 4 Control signal Max value for normalization', 'min': '0', 'max': 'UINT16_MAX', 'default': 0, 'valueBytes': ['DEVICE.BSMB', 117, 'VARFLAGS.RW  | VARFLAGS.MANDATORY', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': VAR_BSMB_MUSCLE_CONTROL_4_MAX, 'datatype': 'UINT16'}
VAR_APO_HIP_LEFT_ACTUATOR_SETPOINT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 1, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_actuator_setpoint = {'name': 'APO_HIP_LEFT_ACTUATOR_SETPOINT', 'description': 'The setpoint to the left hip actuator', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.APO', 1, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_ACTUATOR_SETPOINT, 'datatype': 'REAL32'}
VAR_APO_HIP_LEFT_ACTUATOR_SETPOINT_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 2, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_apo_hip_left_actuator_setpoint_raw = {'name': 'APO_HIP_LEFT_ACTUATOR_SETPOINT_RAW', 'description': 'The raw setpoint to the left hip actuator', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.APO', 2, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_ACTUATOR_SETPOINT_RAW, 'datatype': 'INT16'}
VAR_APO_HIP_RIGHT_ACTUATOR_SETPOINT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 3, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_right_actuator_setpoint = {'name': 'APO_HIP_RIGHT_ACTUATOR_SETPOINT', 'description': 'The setpoint to the right hip actuator', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.APO', 3, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_ACTUATOR_SETPOINT, 'datatype': 'REAL32'}
VAR_APO_HIP_RIGHT_ACTUATOR_SETPOINT_RAW = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 4, VARFLAGS_READ, DATATYPE_INT16]), byteorder='little')
var_apo_hip_right_actuator_setpoint_raw = {'name': 'APO_HIP_RIGHT_ACTUATOR_SETPOINT_RAW', 'description': 'The raw setpoint to the right hip actuator', 'min': -10000, 'max': 10000, 'default': 0, 'valueBytes': ['DEVICE.APO', 4, 'VARFLAGS.READ', 'DATATYPE.INT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_ACTUATOR_SETPOINT_RAW, 'datatype': 'INT16'}
VAR_APO_HIP_LEFT_GAIT_PHASE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 5, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_gait_phase = {'name': 'APO_HIP_LEFT_GAIT_PHASE', 'description': 'The estimated gait phase of the left hip', 'min': 0, 'max': 4, 'default': 0, 'valueBytes': ['DEVICE.APO', 5, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_GAIT_PHASE, 'datatype': 'REAL32'}
VAR_APO_HIP_RIGHT_GAIT_PHASE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 6, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_right_gait_phase = {'name': 'APO_HIP_RIGHT_GAIT_PHASE', 'description': 'The estimated gait phase of the right hip', 'min': 0, 'max': 4, 'default': 0, 'valueBytes': ['DEVICE.APO', 6, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_GAIT_PHASE, 'datatype': 'REAL32'}
VAR_APO_HIP_LEFT_AO_HIP_ANGLE_EST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 7, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_ao_hip_angle_est = {'name': 'APO_HIP_LEFT_AO_HIP_ANGLE_EST', 'description': 'The estimated hip angle of the left hip', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.APO', 7, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'rad', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AO_HIP_ANGLE_EST, 'datatype': 'REAL32'}
VAR_APO_HIP_LEFT_AO_HIP_ANGLE_EST_DERIVATIVE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 8, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_ao_hip_angle_est_derivative = {'name': 'APO_HIP_LEFT_AO_HIP_ANGLE_EST_DERIVATIVE', 'description': 'The derivative of the estimated hip angle of the left hip', 'min': -180, 'max': 180, 'default': 0, 'valueBytes': ['DEVICE.APO', 8, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': 'rad/s', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AO_HIP_ANGLE_EST_DERIVATIVE, 'datatype': 'REAL32'}
VAR_APO_HIP_LEFT_AO_FUNDAMENTAL_NORMALIZED_PHI = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 9, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_ao_fundamental_normalized_phi = {'name': 'APO_HIP_LEFT_AO_FUNDAMENTAL_NORMALIZED_PHI', 'description': "The phase of the fundamental frequency from AO's of the left hip", 'min': 0, 'max': 4, 'default': 0, 'valueBytes': ['DEVICE.APO', 9, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AO_FUNDAMENTAL_NORMALIZED_PHI, 'datatype': 'REAL32'}
VAR_APO_HIP_LEFT_GAIT_EVENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 10, VARFLAGS_READ, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_gait_event = {'name': 'APO_HIP_LEFT_GAIT_EVENT', 'description': 'The maximum hip angle events of the left hip', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 10, 'VARFLAGS.READ', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_GAIT_EVENT, 'datatype': 'REAL32'}
VAR_APO_SYNCHRONIZATION_ENABLED = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 11, VARFLAGS_READ, DATATYPE_BOOL]), byteorder='little')
var_apo_synchronization_enabled = {'name': 'APO_SYNCHRONIZATION_ENABLED', 'description': 'States if synchronization is enabled', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 11, 'VARFLAGS.READ', 'DATATYPE.BOOL'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_SYNCHRONIZATION_ENABLED, 'datatype': 'BOOL'}
VAR_APO_HIP_LEFT_AM_FLEXION_AMP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 12, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_apo_hip_left_am_flexion_amp = {'name': 'APO_HIP_LEFT_AM_FLEXION_AMP', 'description': 'Amplitude of the assist in flexion', 'min': -10, 'max': 10, 'default': 0, 'valueBytes': ['DEVICE.APO', 12, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AM_FLEXION_AMP, 'datatype': 'INT16'}
VAR_APO_HIP_LEFT_AM_FLEXION_PHI = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 13, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_apo_hip_left_am_flexion_phi = {'name': 'APO_HIP_LEFT_AM_FLEXION_PHI', 'description': 'Phase of the assist in flexion', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 13, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AM_FLEXION_PHI, 'datatype': 'UINT16'}
VAR_APO_HIP_LEFT_AM_FLEXION_DT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 14, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_am_flexion_dt = {'name': 'APO_HIP_LEFT_AM_FLEXION_DT', 'description': 'Width of the assist in flexion', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 14, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AM_FLEXION_DT, 'datatype': 'REAL32'}
VAR_APO_HIP_RIGHT_AM_FLEXION_AMP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 15, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_apo_hip_right_am_flexion_amp = {'name': 'APO_HIP_RIGHT_AM_FLEXION_AMP', 'description': 'Amplitude of the assist in flexion', 'min': -10, 'max': 10, 'default': 0, 'valueBytes': ['DEVICE.APO', 15, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_AM_FLEXION_AMP, 'datatype': 'INT16'}
VAR_APO_HIP_RIGHT_AM_FLEXION_PHI = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 16, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_apo_hip_right_am_flexion_phi = {'name': 'APO_HIP_RIGHT_AM_FLEXION_PHI', 'description': 'Phase of the assist in flexion', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 16, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_AM_FLEXION_PHI, 'datatype': 'UINT16'}
VAR_APO_HIP_RIGHT_AM_FLEXION_DT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 17, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_right_am_flexion_dt = {'name': 'APO_HIP_RIGHT_AM_FLEXION_DT', 'description': 'Width of the assist in flexion', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 17, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_AM_FLEXION_DT, 'datatype': 'REAL32'}
VAR_APO_HIP_LEFT_AM_EXTENSION_AMP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 18, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_apo_hip_left_am_extension_amp = {'name': 'APO_HIP_LEFT_AM_EXTENSION_AMP', 'description': 'Amplitude of the assist in extension', 'min': -10, 'max': 10, 'default': 0, 'valueBytes': ['DEVICE.APO', 18, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AM_EXTENSION_AMP, 'datatype': 'INT16'}
VAR_APO_HIP_LEFT_AM_EXTENSION_PHI = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 19, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_apo_hip_left_am_extension_phi = {'name': 'APO_HIP_LEFT_AM_EXTENSION_PHI', 'description': 'Phase of the assist in extension', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 19, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AM_EXTENSION_PHI, 'datatype': 'UINT16'}
VAR_APO_HIP_LEFT_AM_EXTENSION_DT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 20, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_left_am_extension_dt = {'name': 'APO_HIP_LEFT_AM_EXTENSION_DT', 'description': 'Width of the assist in extension', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 20, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_LEFT_AM_EXTENSION_DT, 'datatype': 'REAL32'}
VAR_APO_HIP_RIGHT_AM_EXTENSION_AMP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 21, VARFLAGS_RW, DATATYPE_INT16]), byteorder='little')
var_apo_hip_right_am_extension_amp = {'name': 'APO_HIP_RIGHT_AM_EXTENSION_AMP', 'description': 'Amplitude of the assist in extension', 'min': -10, 'max': 10, 'default': 0, 'valueBytes': ['DEVICE.APO', 21, 'VARFLAGS.RW', 'DATATYPE.INT16'], 'unit': 'Nm', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_AM_EXTENSION_AMP, 'datatype': 'INT16'}
VAR_APO_HIP_RIGHT_AM_EXTENSION_PHI = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 22, VARFLAGS_RW, DATATYPE_UINT16]), byteorder='little')
var_apo_hip_right_am_extension_phi = {'name': 'APO_HIP_RIGHT_AM_EXTENSION_PHI', 'description': 'Phase of the assist in extension', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 22, 'VARFLAGS.RW', 'DATATYPE.UINT16'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_AM_EXTENSION_PHI, 'datatype': 'UINT16'}
VAR_APO_HIP_RIGHT_AM_EXTENSION_DT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 23, VARFLAGS_RW, DATATYPE_REAL32]), byteorder='little')
var_apo_hip_right_am_extension_dt = {'name': 'APO_HIP_RIGHT_AM_EXTENSION_DT', 'description': 'Width of the assist in extension', 'min': 0, 'max': 1, 'default': 0, 'valueBytes': ['DEVICE.APO', 23, 'VARFLAGS.RW', 'DATATYPE.REAL32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': VAR_APO_HIP_RIGHT_AM_EXTENSION_DT, 'datatype': 'REAL32'}
VAR_B3C_SW_PLATFORM_VERSION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_B3C_DEVICE, 1, VARFLAGS_READ, DATATYPE_TEXT]), byteorder='little')
var_b3c_sw_platform_version = {'name': 'B3C_SW_PLATFORM_VERSION', 'description': 'Version of the B3C SW Platform', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.B3C_DEVICE', 1, 'VARFLAGS.READ', 'DATATYPE.TEXT'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_BOOTLOADER|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': VAR_B3C_SW_PLATFORM_VERSION, 'datatype': 'TEXT'}
VAR_B3C_DUMMY_VAR1_UINT32 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_B3C_DEVICE, 2, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_b3c_dummy_var1_uint32 = {'name': 'B3C_DUMMY_VAR1_UINT32', 'description': 'Dummy uint32 variable used in verification but is up for grabs', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.B3C_DEVICE', 2, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_B3C_DUMMY_VAR1_UINT32, 'datatype': 'UINT32'}
VAR_B3C_DUMMY_VAR2_UINT32 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_B3C_DEVICE, 3, VARFLAGS_READ, DATATYPE_UINT32]), byteorder='little')
var_b3c_dummy_var2_uint32 = {'name': 'B3C_DUMMY_VAR2_UINT32', 'description': 'Dummy uint32 variable used in verification but is up for grabs', 'min': 0, 'max': 0, 'default': 0, 'valueBytes': ['DEVICE.B3C_DEVICE', 3, 'VARFLAGS.READ', 'DATATYPE.UINT32'], 'unit': '', 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': VAR_B3C_DUMMY_VAR2_UINT32, 'datatype': 'UINT32'}
BIT_INDEX_ACTION_DEVICE = 0
bit_index_action_device = {'name': 'DEVICE', 'description': 'Bit index for action device', 'value': BIT_INDEX_ACTION_DEVICE}
BIT_INDEX_ACTION_ID = 8
bit_index_action_id = {'name': 'ID', 'description': 'Bit index for action id', 'value': BIT_INDEX_ACTION_ID}
BIT_INDEX_CHR_SERVICE = 0
bit_index_chr_service = {'name': 'SERVICE', 'description': 'Bit index for chr service', 'value': BIT_INDEX_CHR_SERVICE}
BIT_INDEX_CHR_ID = 8
bit_index_chr_id = {'name': 'ID', 'description': 'Bit index for chr id', 'value': BIT_INDEX_CHR_ID}
BIT_INDEX_CHR_FLAGS = 16
bit_index_chr_flags = {'name': 'FLAGS', 'description': 'Bit index for chr flags', 'value': BIT_INDEX_CHR_FLAGS}
BIT_INDEX_CHR_SIZE = 24
bit_index_chr_size = {'name': 'SIZE', 'description': 'Bit index for chr size', 'value': BIT_INDEX_CHR_SIZE}
BIT_INDEX_VAR_DEVICE = 0
bit_index_var_device = {'name': 'DEVICE', 'description': 'Bit index for var device', 'value': BIT_INDEX_VAR_DEVICE}
BIT_INDEX_VAR_ID = 8
bit_index_var_id = {'name': 'ID', 'description': 'Bit index for var id', 'value': BIT_INDEX_VAR_ID}
BIT_INDEX_VAR_FLAGS = 16
bit_index_var_flags = {'name': 'FLAGS', 'description': 'Bit index for var flags', 'value': BIT_INDEX_VAR_FLAGS}
BIT_INDEX_VAR_DATATYPE = 24
bit_index_var_datatype = {'name': 'DATATYPE', 'description': 'Bit index for var datatype', 'value': BIT_INDEX_VAR_DATATYPE}
CHR_TXRX = int.from_bytes(bytearray(v & 0xff for v in [SRV_COMM, 1, CHRFLAGS_WRITE|CHRFLAGS_NOTIFY, 20]), byteorder='little')
chr_txrx = {'name': 'TXRX', 'description': 'Request data from bionic peripheral', 'valueBytes': ['SRV.COMM', 1, 'CHRFLAGS.WRITE|CHRFLAGS.NOTIFY', 20], 'value': CHR_TXRX}
CHR_BULK_SEND = int.from_bytes(bytearray(v & 0xff for v in [SRV_COMM, 2, CHRFLAGS_WRITE|CHRFLAGS_NOTIFY, 20]), byteorder='little')
chr_bulk_send = {'name': 'BULK_SEND', 'description': 'Bulk data to and from bionic peripheral', 'valueBytes': ['SRV.COMM', 2, 'CHRFLAGS.WRITE|CHRFLAGS.NOTIFY', 20], 'value': CHR_BULK_SEND}
CHR_COUNT__ = int.from_bytes(bytearray(v & 0xff for v in [2, 0, 0, 0]), byteorder='little')
chr_count__ = {'name': 'COUNT__', 'description': 'Internal, how many characteristics are there', 'valueBytes': [2, 0, 0, 0], 'value': CHR_COUNT__}
WARNING_LOW = 16
warning_low = {'name': 'LOW', 'description': 'Low warning', 'value': WARNING_LOW}
WARNING_MEDIUM = 32
warning_medium = {'name': 'MEDIUM', 'description': 'Medium warning', 'value': WARNING_MEDIUM}
WARNING_HIGH = 64
warning_high = {'name': 'HIGH', 'description': 'High warning', 'value': WARNING_HIGH}
WARNING_BATTERY_LOW = WARNING_LOW + 1
warning_battery_low = {'name': 'BATTERY_LOW', 'description': 'Battery low warning, 15% left', 'value': WARNING_BATTERY_LOW}
WARNING_BATTERY_CRITICAL = WARNING_MEDIUM +2
warning_battery_critical = {'name': 'BATTERY_CRITICAL', 'description': 'Battery low warning, 5% left', 'value': WARNING_BATTERY_CRITICAL}
WARNING_BATTERY_EMPTY = WARNING_HIGH + 3
warning_battery_empty = {'name': 'BATTERY_EMPTY', 'description': 'Battery depleated, 0% left', 'value': WARNING_BATTERY_EMPTY}
FATAL_TYPE_HARDWARE = 0
fatal_type_hardware = {'name': 'HARDWARE', 'description': 'it happened in the hardware', 'value': FATAL_TYPE_HARDWARE}
FATAL_TYPE_FIRMWARE = 0x1000
fatal_type_firmware = {'name': 'FIRMWARE', 'description': 'it happened in the firmware', 'value': FATAL_TYPE_FIRMWARE}
FATAL_TYPE_APP = 0x2000
fatal_type_app = {'name': 'APP', 'description': 'it happened in the app', 'value': FATAL_TYPE_APP}
RESET_SOURCE_COLD_START = 0xFF
reset_source_cold_start = {'name': 'COLD_START', 'description': 'Cold start', 'value': RESET_SOURCE_COLD_START}
RESET_SOURCE_USER_M3_RESET = 0x80
reset_source_user_m3_reset = {'name': 'USER_M3_RESET', 'description': 'User M3 reset', 'value': RESET_SOURCE_USER_M3_RESET}
RESET_SOURCE_USER_RESET = 0x40
reset_source_user_reset = {'name': 'USER_RESET', 'description': 'User reset', 'value': RESET_SOURCE_USER_RESET}
RESET_SOURCE_WDOG_RESET = 0x20
reset_source_wdog_reset = {'name': 'WDOG_RESET', 'description': 'Watch Dog reset', 'value': RESET_SOURCE_WDOG_RESET}
RESET_SOURCE_LOCKUP_RESET = 0x10
reset_source_lockup_reset = {'name': 'LOCKUP_RESET', 'description': 'Lockup reset', 'value': RESET_SOURCE_LOCKUP_RESET}
RESET_SOURCE_SOFT_RESET = 0x08
reset_source_soft_reset = {'name': 'SOFT_RESET', 'description': 'Soft reset', 'value': RESET_SOURCE_SOFT_RESET}
RESET_SOURCE_CONTROLLER_M3_RESET = 0x04
reset_source_controller_m3_reset = {'name': 'CONTROLLER_M3_RESET', 'description': 'Controller M3 reset', 'value': RESET_SOURCE_CONTROLLER_M3_RESET}
RESET_SOURCE_CONTROLLER_RESET = 0x02
reset_source_controller_reset = {'name': 'CONTROLLER_RESET', 'description': 'Controller reset', 'value': RESET_SOURCE_CONTROLLER_RESET}
RESET_SOURCE_PO_RESET = 0x01
reset_source_po_reset = {'name': 'PO_RESET', 'description': 'Power-On reset', 'value': RESET_SOURCE_PO_RESET}
OPERATING_MODE_INIT = 0
operating_mode_init = {'name': 'INIT', 'description': 'Init', 'value': OPERATING_MODE_INIT}
OPERATING_MODE_INIT_ERROR = 1
operating_mode_init_error = {'name': 'INIT_ERROR', 'description': 'Init error', 'value': OPERATING_MODE_INIT_ERROR}
OPERATING_MODE_NORMAL = 2
operating_mode_normal = {'name': 'NORMAL', 'description': 'Normal', 'value': OPERATING_MODE_NORMAL}
OPERATING_MODE_WARNING = 3
operating_mode_warning = {'name': 'WARNING', 'description': 'Warning', 'value': OPERATING_MODE_WARNING}
OPERATING_MODE_FATAL_NON_CRITICAL = 4
operating_mode_fatal_non_critical = {'name': 'FATAL_NON_CRITICAL', 'description': 'Fatal non-critical', 'value': OPERATING_MODE_FATAL_NON_CRITICAL}
OPERATING_MODE_FATAL_CRITICAL = 5
operating_mode_fatal_critical = {'name': 'FATAL_CRITICAL', 'description': 'Fatal critical', 'value': OPERATING_MODE_FATAL_CRITICAL}
OPERATING_MODE_FATAL_CRITICAL_SHUTDOWN = 6
operating_mode_fatal_critical_shutdown = {'name': 'FATAL_CRITICAL_SHUTDOWN', 'description': 'Fatal critical shutdown', 'value': OPERATING_MODE_FATAL_CRITICAL_SHUTDOWN}
FATAL_SEVERITY_NON_CRITICAL = 0
fatal_severity_non_critical = {'name': 'NON_CRITICAL', 'description': 'Device operatable', 'value': FATAL_SEVERITY_NON_CRITICAL}
FATAL_SEVERITY_CRITICAL = 0x0400
fatal_severity_critical = {'name': 'CRITICAL', 'description': 'Special precautions taken', 'value': FATAL_SEVERITY_CRITICAL}
FATAL_SEVERITY_SHUTDOWN = 0x0800
fatal_severity_shutdown = {'name': 'SHUTDOWN', 'description': 'Requires immediate shutdown', 'value': FATAL_SEVERITY_SHUTDOWN}
FATAL_ASSERT = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 1
fatal_assert = {'name': 'ASSERT', 'description': 'Assert (Line number, FileName1, FileName2, FileName3)', 'value': FATAL_ASSERT}
FATAL_INVALID_DATABASE = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 2
fatal_invalid_database = {'name': 'INVALID_DATABASE', 'description': 'Database corrupted (Database Index)', 'value': FATAL_INVALID_DATABASE}
FATAL_STACK_OVERFLOW = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 4
fatal_stack_overflow = {'name': 'STACK_OVERFLOW', 'description': 'Stack has overflown', 'value': FATAL_STACK_OVERFLOW}
FATAL_HEAP_OVERFLOW = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 5
fatal_heap_overflow = {'name': 'HEAP_OVERFLOW', 'description': 'Heap has overflown', 'value': FATAL_HEAP_OVERFLOW}
FATAL_HIGH_CPU_USAGE = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 6
fatal_high_cpu_usage = {'name': 'HIGH_CPU_USAGE', 'description': 'High CPU usage (HRT dutycycle)', 'value': FATAL_HIGH_CPU_USAGE}
FATAL_SENSOR_INPUT = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 7
fatal_sensor_input = {'name': 'SENSOR_INPUT', 'description': 'Sensor input (Input ID, Status, Input Ready, Raw value)', 'value': FATAL_SENSOR_INPUT}
FATAL_EMC = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 8
fatal_emc = {'name': 'EMC', 'description': 'EMC (Input ID, Status, Input Ready, Engineering value)', 'value': FATAL_EMC}
FATAL_ACTUATOR_OUTPUT = FATAL_TYPE_FIRMWARE | FATAL_SEVERITY_NON_CRITICAL | 9
fatal_actuator_output = {'name': 'ACTUATOR_OUTPUT', 'description': 'Actuator output (Output ID, Status, Output Ready, Raw value)', 'value': FATAL_ACTUATOR_OUTPUT}
FATAL_APP_MOTOR_ENABLE = FATAL_TYPE_APP | FATAL_SEVERITY_NON_CRITICAL | 1
fatal_app_motor_enable = {'name': 'APP_MOTOR_ENABLE', 'description': 'Motor enable', 'value': FATAL_APP_MOTOR_ENABLE}
FATAL_APP_MOTOR_WINDING_TEMP = FATAL_TYPE_APP | FATAL_SEVERITY_SHUTDOWN | 1
fatal_app_motor_winding_temp = {'name': 'APP_MOTOR_WINDING_TEMP', 'description': 'Motor winding temp', 'value': FATAL_APP_MOTOR_WINDING_TEMP}
FATAL_APP_SELF_TEST_ERROR = FATAL_TYPE_APP | FATAL_SEVERITY_NON_CRITICAL | 2
fatal_app_self_test_error = {'name': 'APP_SELF_TEST_ERROR', 'description': 'Self test (Test ID, Data0, Data1, Data2)', 'value': FATAL_APP_SELF_TEST_ERROR}
FATAL_APP_LOW_BATTERY_FORCED_SHUTDOWN = FATAL_TYPE_APP | FATAL_SEVERITY_CRITICAL | 1
fatal_app_low_battery_forced_shutdown = {'name': 'APP_LOW_BATTERY_FORCED_SHUTDOWN', 'description': 'Low battery (Battery Level Critically Low, Safe State Found, Battery Level)', 'value': FATAL_APP_LOW_BATTERY_FORCED_SHUTDOWN}
ERROR_TYPE_INTERNAL = 16
error_type_internal = {'name': 'INTERNAL', 'description': 'Without feedback', 'value': ERROR_TYPE_INTERNAL}
ERROR_TYPE_CRITICAL_LOW = 32
error_type_critical_low = {'name': 'CRITICAL_LOW', 'description': 'Feedback', 'value': ERROR_TYPE_CRITICAL_LOW}
ERROR_TYPE_CRITICAL_MED = 64
error_type_critical_med = {'name': 'CRITICAL_MED', 'description': 'Feedback with limited functionality', 'value': ERROR_TYPE_CRITICAL_MED}
ERROR_TYPE_CRITICAL_HIGH = 128
error_type_critical_high = {'name': 'CRITICAL_HIGH', 'description': 'Feedback and then shutdown', 'value': ERROR_TYPE_CRITICAL_HIGH}
ERROR_TYPE_CRITICAL_LOG_ONCE = 1
error_type_critical_log_once = {'name': 'CRITICAL_LOG_ONCE', 'description': 'Logged only once', 'value': ERROR_TYPE_CRITICAL_LOG_ONCE}
ERROR_ACTION_FAILED = 1
error_action_failed = {'name': 'ACTION_FAILED', 'description': 'Action failed', 'value': ERROR_ACTION_FAILED}
ERROR_ADC = 2
error_adc = {'name': 'ADC', 'description': 'adc read failed', 'value': ERROR_ADC}
ERROR_BATTERY_CHARGING_BAD_BATTERY = 3
error_battery_charging_bad_battery = {'name': 'BATTERY_CHARGING_BAD_BATTERY', 'description': 'Battery charging error due to bad battery', 'value': ERROR_BATTERY_CHARGING_BAD_BATTERY}
ERROR_BATTERY_CHARGING_TEMPERATURE = 4
error_battery_charging_temperature = {'name': 'BATTERY_CHARGING_TEMPERATURE', 'description': 'Battery charging error due to high temperature', 'value': ERROR_BATTERY_CHARGING_TEMPERATURE}
ERROR_BATTERY_CURRENT = 5
error_battery_current = {'name': 'BATTERY_CURRENT', 'description': 'Battery current too high', 'value': ERROR_BATTERY_CURRENT}
ERROR_BATTERY_EMPTY = 6
error_battery_empty = {'name': 'BATTERY_EMPTY', 'description': 'Battery empty, device shutting down', 'value': ERROR_BATTERY_EMPTY}
ERROR_BATTERY_TEMPERATURE_HIGH = 7
error_battery_temperature_high = {'name': 'BATTERY_TEMPERATURE_HIGH', 'description': 'Battery temperature too hight', 'value': ERROR_BATTERY_TEMPERATURE_HIGH}
ERROR_BATTERY_TEMPERATURE_LOW = 8
error_battery_temperature_low = {'name': 'BATTERY_TEMPERATURE_LOW', 'description': 'Battery temperature too low', 'value': ERROR_BATTERY_TEMPERATURE_LOW}
ERROR_BIST_CODE_CRC = 9
error_bist_code_crc = {'name': 'BIST_CODE_CRC', 'description': 'CRC check for code failed', 'value': ERROR_BIST_CODE_CRC}
ERROR_BIST_CONFIG_DEVICE_CRC = 10
error_bist_config_device_crc = {'name': 'BIST_CONFIG_DEVICE_CRC', 'description': 'CRC check for device config failed', 'value': ERROR_BIST_CONFIG_DEVICE_CRC}
ERROR_BIST_CONFIG_USER_CRC = 11
error_bist_config_user_crc = {'name': 'BIST_CONFIG_USER_CRC', 'description': 'CRC check for user config failed', 'value': ERROR_BIST_CONFIG_USER_CRC}
ERROR_BIST_ERROR_CRC = 12
error_bist_error_crc = {'name': 'BIST_ERROR_CRC', 'description': 'CRC check for error failed', 'value': ERROR_BIST_ERROR_CRC}
ERROR_BIST_MEMORY = 13
error_bist_memory = {'name': 'BIST_MEMORY', 'description': 'Memory built-in-self-test failed', 'value': ERROR_BIST_MEMORY}
ERROR_BIST_PORT = 14
error_bist_port = {'name': 'BIST_PORT', 'description': 'Port built-in-self-test failed', 'value': ERROR_BIST_PORT}
ERROR_BIST_SENSORS_ACCELEROMETER = 15
error_bist_sensors_accelerometer = {'name': 'BIST_SENSORS_ACCELEROMETER', 'description': 'Accelerometer built-in-self-test failed', 'value': ERROR_BIST_SENSORS_ACCELEROMETER}
ERROR_BIST_SENSORS_GYROSCOPE = 16
error_bist_sensors_gyroscope = {'name': 'BIST_SENSORS_GYROSCOPE', 'description': 'Gyroscope built-in-self-test failed', 'value': ERROR_BIST_SENSORS_GYROSCOPE}
ERROR_BIST_SENSORS_JOINT_SENSOR = 17
error_bist_sensors_joint_sensor = {'name': 'BIST_SENSORS_JOINT_SENSOR', 'description': 'Joint sensor built-in-self-test failed', 'value': ERROR_BIST_SENSORS_JOINT_SENSOR}
ERROR_BIST_SENSORS_MAGNETOMETER = 18
error_bist_sensors_magnetometer = {'name': 'BIST_SENSORS_MAGNETOMETER', 'description': 'Magnetometer built-in-self-test failed', 'value': ERROR_BIST_SENSORS_MAGNETOMETER}
ERROR_BIST_SERIAL_CRC = 19
error_bist_serial_crc = {'name': 'BIST_SERIAL_CRC', 'description': 'CRC check for code serial number failed', 'value': ERROR_BIST_SERIAL_CRC}
ERROR_BIST_STATE_CRC = 20
error_bist_state_crc = {'name': 'BIST_STATE_CRC', 'description': 'CRC check for device state failed', 'value': ERROR_BIST_STATE_CRC}
ERROR_BIST_STATISTICS_DEVICE_CRC = 21
error_bist_statistics_device_crc = {'name': 'BIST_STATISTICS_DEVICE_CRC', 'description': 'CRC check for device statistics failed', 'value': ERROR_BIST_STATISTICS_DEVICE_CRC}
ERROR_BIST_STATISTICS_USER_CRC = 22
error_bist_statistics_user_crc = {'name': 'BIST_STATISTICS_USER_CRC', 'description': 'CRC check for user statistics failed', 'value': ERROR_BIST_STATISTICS_USER_CRC}
ERROR_BUTTON_FAIL = 23
error_button_fail = {'name': 'BUTTON_FAIL', 'description': 'Button stuck', 'value': ERROR_BUTTON_FAIL}
ERROR_CALIBRATION_AUTO_ADJUSTMENT_OUT_OF_BOUNDS = 24
error_calibration_auto_adjustment_out_of_bounds = {'name': 'CALIBRATION_AUTO_ADJUSTMENT_OUT_OF_BOUNDS', 'description': 'Auto Adjustment value out of bounds', 'value': ERROR_CALIBRATION_AUTO_ADJUSTMENT_OUT_OF_BOUNDS}
ERROR_CALIBRATION_AUTO_ADJUSTMENT_TIMEOUT = 25
error_calibration_auto_adjustment_timeout = {'name': 'CALIBRATION_AUTO_ADJUSTMENT_TIMEOUT', 'description': 'Auto Adjustment timeout', 'value': ERROR_CALIBRATION_AUTO_ADJUSTMENT_TIMEOUT}
ERROR_CALIBRATION_HEEL_HEIGHT_OUT_OF_BOUNDS = 26
error_calibration_heel_height_out_of_bounds = {'name': 'CALIBRATION_HEEL_HEIGHT_OUT_OF_BOUNDS', 'description': 'Heel height calibration value out of bounds', 'value': ERROR_CALIBRATION_HEEL_HEIGHT_OUT_OF_BOUNDS}
ERROR_CALIBRATION_HEEL_HEIGHT_TIMEOUT = 27
error_calibration_heel_height_timeout = {'name': 'CALIBRATION_HEEL_HEIGHT_TIMEOUT', 'description': 'Heel height calibration timeout', 'value': ERROR_CALIBRATION_HEEL_HEIGHT_TIMEOUT}
ERROR_CALIBRATION_MOTOR_MAGNET_POSITION_INCORRECT = 28
error_calibration_motor_magnet_position_incorrect = {'name': 'CALIBRATION_MOTOR_MAGNET_POSITION_INCORRECT', 'description': 'Motor calibration error, magnet position incorrect, need to rotate magnet.', 'value': ERROR_CALIBRATION_MOTOR_MAGNET_POSITION_INCORRECT}
ERROR_CALIBRATION_MOTOR_MOVE_DIRECTION = 29
error_calibration_motor_move_direction = {'name': 'CALIBRATION_MOTOR_MOVE_DIRECTION', 'description': 'Motor calibration error, motor moves in the wrong direction', 'value': ERROR_CALIBRATION_MOTOR_MOVE_DIRECTION}
ERROR_CALIBRATION_MOTOR_RANGE_TOO_LARGE = 30
error_calibration_motor_range_too_large = {'name': 'CALIBRATION_MOTOR_RANGE_TOO_LARGE', 'description': 'Motor calibration error, range too large to be true', 'value': ERROR_CALIBRATION_MOTOR_RANGE_TOO_LARGE}
ERROR_CALIBRATION_MOTOR_RANGE_TOO_SMALL = 31
error_calibration_motor_range_too_small = {'name': 'CALIBRATION_MOTOR_RANGE_TOO_SMALL', 'description': 'Motor calibration error, range too small to be true', 'value': ERROR_CALIBRATION_MOTOR_RANGE_TOO_SMALL}
ERROR_COMM_BATTERY_READ = 32
error_comm_battery_read = {'name': 'COMM_BATTERY_READ', 'description': 'Battery read communication failed', 'value': ERROR_COMM_BATTERY_READ}
ERROR_COMM_BATTERY_WRITE = 33
error_comm_battery_write = {'name': 'COMM_BATTERY_WRITE', 'description': 'Battery write communication failed', 'value': ERROR_COMM_BATTERY_WRITE}
ERROR_COMM_BIONIC_DEVICES_LOST_CONNECTION = 34
error_comm_bionic_devices_lost_connection = {'name': 'COMM_BIONIC_DEVICES_LOST_CONNECTION', 'description': 'Communication lost with other bionic devices', 'value': ERROR_COMM_BIONIC_DEVICES_LOST_CONNECTION}
ERROR_COMM_BIONIC_DEVICES_READ = 35
error_comm_bionic_devices_read = {'name': 'COMM_BIONIC_DEVICES_READ', 'description': 'Communication read failed with other bionic devices failed', 'value': ERROR_COMM_BIONIC_DEVICES_READ}
ERROR_COMM_BIONIC_DEVICES_WRITE = 36
error_comm_bionic_devices_write = {'name': 'COMM_BIONIC_DEVICES_WRITE', 'description': 'Communication write failed with other bionic devices failed', 'value': ERROR_COMM_BIONIC_DEVICES_WRITE}
ERROR_EMC_TEST_ACCELEROMETER_X = 37
error_emc_test_accelerometer_x = {'name': 'EMC_TEST_ACCELEROMETER_X', 'description': 'Accelerometer X error during EMC test', 'value': ERROR_EMC_TEST_ACCELEROMETER_X}
ERROR_EMC_TEST_ACCELEROMETER_Y = 38
error_emc_test_accelerometer_y = {'name': 'EMC_TEST_ACCELEROMETER_Y', 'description': 'Accelerometer Y error during EMC test', 'value': ERROR_EMC_TEST_ACCELEROMETER_Y}
ERROR_EMC_TEST_ACCELEROMETER_Z = 39
error_emc_test_accelerometer_z = {'name': 'EMC_TEST_ACCELEROMETER_Z', 'description': 'Accelerometer Z error during EMC test', 'value': ERROR_EMC_TEST_ACCELEROMETER_Z}
ERROR_EMC_TEST_BATTERY_VOLTAGE = 40
error_emc_test_battery_voltage = {'name': 'EMC_TEST_BATTERY_VOLTAGE', 'description': 'Battery Voltage error during EMC test', 'value': ERROR_EMC_TEST_BATTERY_VOLTAGE}
ERROR_EMC_TEST_GYROSCOPE_X = 41
error_emc_test_gyroscope_x = {'name': 'EMC_TEST_GYROSCOPE_X', 'description': 'Gyroscope X error during EMC test', 'value': ERROR_EMC_TEST_GYROSCOPE_X}
ERROR_EMC_TEST_GYROSCOPE_Y = 42
error_emc_test_gyroscope_y = {'name': 'EMC_TEST_GYROSCOPE_Y', 'description': 'Gyroscope Y error during EMC test', 'value': ERROR_EMC_TEST_GYROSCOPE_Y}
ERROR_EMC_TEST_GYROSCOPE_Z = 43
error_emc_test_gyroscope_z = {'name': 'EMC_TEST_GYROSCOPE_Z', 'description': 'Gyroscope Z error during EMC test', 'value': ERROR_EMC_TEST_GYROSCOPE_Z}
ERROR_EMC_TEST_JOINT_ANGLE = 44
error_emc_test_joint_angle = {'name': 'EMC_TEST_JOINT_ANGLE', 'description': 'Joint Angle error during EMC test', 'value': ERROR_EMC_TEST_JOINT_ANGLE}
ERROR_IMU_INTERRUPT = 45
error_imu_interrupt = {'name': 'IMU_INTERRUPT', 'description': 'Failed to enable the IMU interrupt', 'value': ERROR_IMU_INTERRUPT}
ERROR_IMU_LOW_POWER = 46
error_imu_low_power = {'name': 'IMU_LOW_POWER', 'description': 'Failed to put the IMU to low power', 'value': ERROR_IMU_LOW_POWER}
ERROR_IMU_POWER_OFF = 47
error_imu_power_off = {'name': 'IMU_POWER_OFF', 'description': 'Failed to put the IMU to power off', 'value': ERROR_IMU_POWER_OFF}
ERROR_MEMORY_ALLOCATED_SIZE = 48
error_memory_allocated_size = {'name': 'MEMORY_ALLOCATED_SIZE', 'description': 'Memory allocated buffer too small', 'value': ERROR_MEMORY_ALLOCATED_SIZE}
ERROR_MEMORY_CRC = 49
error_memory_crc = {'name': 'MEMORY_CRC', 'description': 'Memory crc failed', 'value': ERROR_MEMORY_CRC}
ERROR_MEMORY_FULL = 50
error_memory_full = {'name': 'MEMORY_FULL', 'description': 'Memory full', 'value': ERROR_MEMORY_FULL}
ERROR_MEMORY_INVALID_ADDRESS = 51
error_memory_invalid_address = {'name': 'MEMORY_INVALID_ADDRESS', 'description': 'Memory invalid address', 'value': ERROR_MEMORY_INVALID_ADDRESS}
ERROR_MEMORY_READ = 52
error_memory_read = {'name': 'MEMORY_READ', 'description': 'Memory read fail', 'value': ERROR_MEMORY_READ}
ERROR_MEMORY_WRITE = 53
error_memory_write = {'name': 'MEMORY_WRITE', 'description': 'Memory write fail', 'value': ERROR_MEMORY_WRITE}
ERROR_MEMORY_WRITE_BEFORE_SHUTDOWN = 54
error_memory_write_before_shutdown = {'name': 'MEMORY_WRITE_BEFORE_SHUTDOWN', 'description': 'Unable to write to memory in preparation for shutdown', 'value': ERROR_MEMORY_WRITE_BEFORE_SHUTDOWN}
ERROR_MOTOR_MOVE = 55
error_motor_move = {'name': 'MOTOR_MOVE', 'description': 'Unable to move motor to desired position', 'value': ERROR_MOTOR_MOVE}
ERROR_MOTOR_OVERCURRENT = 56
error_motor_overcurrent = {'name': 'MOTOR_OVERCURRENT', 'description': 'Motor current too high', 'value': ERROR_MOTOR_OVERCURRENT}
ERROR_MOTOR_RETRY = 57
error_motor_retry = {'name': 'MOTOR_RETRY', 'description': 'Motor retries to move', 'value': ERROR_MOTOR_RETRY}
ERROR_MOTOR_VMOT = 58
error_motor_vmot = {'name': 'MOTOR_VMOT', 'description': 'Motor voltage out of bounds', 'value': ERROR_MOTOR_VMOT}
ERROR_RTC_COUNTING_TOO_FAST = 59
error_rtc_counting_too_fast = {'name': 'RTC_COUNTING_TOO_FAST', 'description': 'rtc counting too fast', 'value': ERROR_RTC_COUNTING_TOO_FAST}
ERROR_RTC_COUNTING_TOO_SLOW = 60
error_rtc_counting_too_slow = {'name': 'RTC_COUNTING_TOO_SLOW', 'description': 'rtc counting too slow', 'value': ERROR_RTC_COUNTING_TOO_SLOW}
ERROR_RTC_NOT_COUNTING = 61
error_rtc_not_counting = {'name': 'RTC_NOT_COUNTING', 'description': 'rtc not counting', 'value': ERROR_RTC_NOT_COUNTING}
ERROR_SENSOR_ACCELEROMETER_INVALID_VALUE = 62
error_sensor_accelerometer_invalid_value = {'name': 'SENSOR_ACCELEROMETER_INVALID_VALUE', 'description': 'Accelerometer error invalid value', 'value': ERROR_SENSOR_ACCELEROMETER_INVALID_VALUE}
ERROR_SENSOR_ACCELEROMETER_READ = 63
error_sensor_accelerometer_read = {'name': 'SENSOR_ACCELEROMETER_READ', 'description': 'Accelerometer read fail', 'value': ERROR_SENSOR_ACCELEROMETER_READ}
ERROR_SENSOR_GYROSCOPE_INVALID_VALUE = 64
error_sensor_gyroscope_invalid_value = {'name': 'SENSOR_GYROSCOPE_INVALID_VALUE', 'description': 'Gyroscope error invalid value', 'value': ERROR_SENSOR_GYROSCOPE_INVALID_VALUE}
ERROR_SENSOR_GYROSCOPE_READ = 65
error_sensor_gyroscope_read = {'name': 'SENSOR_GYROSCOPE_READ', 'description': 'Gyroscope read fail', 'value': ERROR_SENSOR_GYROSCOPE_READ}
ERROR_SENSOR_JOINT_ADCOV = 66
error_sensor_joint_adcov = {'name': 'SENSOR_JOINT_ADCOV', 'description': 'The ADCOV bit occurs if the magnetic input field strength is too large for at least one Hall element. This can be the case if the magnet is displaced. Second reason could be that the offset compensation after power up is not finished yet. If this happens some dummy READ ANGLE commands may be sent to settle the offset loop.', 'value': ERROR_SENSOR_JOINT_ADCOV}
ERROR_SENSOR_JOINT_ADDMON = 67
error_sensor_joint_addmon = {'name': 'SENSOR_JOINT_ADDMON', 'description': 'Set to high when non existing address is used.', 'value': ERROR_SENSOR_JOINT_ADDMON}
ERROR_SENSOR_JOINT_CLKMON = 68
error_sensor_joint_clkmon = {'name': 'SENSOR_JOINT_CLKMON', 'description': 'Set to high when the amount of clock cycles is not correct.', 'value': ERROR_SENSOR_JOINT_CLKMON}
ERROR_SENSOR_JOINT_COF = 69
error_sensor_joint_cof = {'name': 'SENSOR_JOINT_COF', 'description': 'cof error', 'value': ERROR_SENSOR_JOINT_COF}
ERROR_SENSOR_JOINT_CORDICOV = 70
error_sensor_joint_cordicov = {'name': 'SENSOR_JOINT_CORDICOV', 'description': 'The CORDIC calculates the angle. An error occurs when the input signals of the CORDIC are too large. The internal algorithm fails.', 'value': ERROR_SENSOR_JOINT_CORDICOV}
ERROR_SENSOR_JOINT_INVALID_VALUE = 71
error_sensor_joint_invalid_value = {'name': 'SENSOR_JOINT_INVALID_VALUE', 'description': 'Joint position is invalid', 'value': ERROR_SENSOR_JOINT_INVALID_VALUE}
ERROR_SENSOR_JOINT_MAGNET_FIELD_HIGH = 72
error_sensor_joint_magnet_field_high = {'name': 'SENSOR_JOINT_MAGNET_FIELD_HIGH', 'description': 'sensor position wrong, too close', 'value': ERROR_SENSOR_JOINT_MAGNET_FIELD_HIGH}
ERROR_SENSOR_JOINT_MAGNET_FIELD_LOW = 73
error_sensor_joint_magnet_field_low = {'name': 'SENSOR_JOINT_MAGNET_FIELD_LOW', 'description': 'sensor position wrong, too far', 'value': ERROR_SENSOR_JOINT_MAGNET_FIELD_LOW}
ERROR_SENSOR_JOINT_MOTOR_RANGE = 74
error_sensor_joint_motor_range = {'name': 'SENSOR_JOINT_MOTOR_RANGE', 'description': 'Joint outside the calibrated range', 'value': ERROR_SENSOR_JOINT_MOTOR_RANGE}
ERROR_SENSOR_JOINT_OCF = 75
error_sensor_joint_ocf = {'name': 'SENSOR_JOINT_OCF', 'description': 'ocf error', 'value': ERROR_SENSOR_JOINT_OCF}
ERROR_SENSOR_JOINT_PARITY = 76
error_sensor_joint_parity = {'name': 'SENSOR_JOINT_PARITY', 'description': 'parity failed', 'value': ERROR_SENSOR_JOINT_PARITY}
ERROR_SENSOR_JOINT_RANGE = 77
error_sensor_joint_range = {'name': 'SENSOR_JOINT_RANGE', 'description': 'The RANGE flag signals that the Hall bias circuit has reached the head room limit. This might occur at the combination of low supply voltage, high temperature and low magnetic field. In this case, manually reducing the AGC setting (Figure 28) can be used to recover a valid Hall biasing condition.', 'value': ERROR_SENSOR_JOINT_RANGE}
ERROR_SENSOR_JOINT_READ = 78
error_sensor_joint_read = {'name': 'SENSOR_JOINT_READ', 'description': 'Joint position read value fail', 'value': ERROR_SENSOR_JOINT_READ}
ERROR_SENSOR_JOINT_WOW = 79
error_sensor_joint_wow = {'name': 'SENSOR_JOINT_WOW', 'description': 'When a READ ANGLE command is in progress, the WOW flag is set to 1. At the end of the measurement the WOW flag is cleared to 0. Only in case of deadlock the WOW flag is stuck high; in which case a MASTER RESET must be sent to clear the deadlock.', 'value': ERROR_SENSOR_JOINT_WOW}
ERROR_SENSOR_MAGNETOMETER_INVALID_VALUE = 80
error_sensor_magnetometer_invalid_value = {'name': 'SENSOR_MAGNETOMETER_INVALID_VALUE', 'description': 'Magnetometer error invalid value', 'value': ERROR_SENSOR_MAGNETOMETER_INVALID_VALUE}
ERROR_SENSOR_MAGNETOMETER_READ = 81
error_sensor_magnetometer_read = {'name': 'SENSOR_MAGNETOMETER_READ', 'description': 'Magnetometer read fail', 'value': ERROR_SENSOR_MAGNETOMETER_READ}
ERROR_SENSOR_TEMPERATURE_INVALID_VALUE = 82
error_sensor_temperature_invalid_value = {'name': 'SENSOR_TEMPERATURE_INVALID_VALUE', 'description': 'Temperature error invalid value', 'value': ERROR_SENSOR_TEMPERATURE_INVALID_VALUE}
ERROR_SENSOR_TEMPERATURE_READ = 83
error_sensor_temperature_read = {'name': 'SENSOR_TEMPERATURE_READ', 'description': 'Temperature read fail', 'value': ERROR_SENSOR_TEMPERATURE_READ}
ERROR_SETUP_IMU = 84
error_setup_imu = {'name': 'SETUP_IMU', 'description': 'IMU error during setup', 'value': ERROR_SETUP_IMU}
ERROR_STACK_MARGIN = 85
error_stack_margin = {'name': 'STACK_MARGIN', 'description': 'Available stack space is less than predefined margin', 'value': ERROR_STACK_MARGIN}
ERROR_SYSTICK_DELAY = 86
error_systick_delay = {'name': 'SYSTICK_DELAY', 'description': 'Systick was delayed', 'value': ERROR_SYSTICK_DELAY}
ERROR_SYSTICK_EARLY = 87
error_systick_early = {'name': 'SYSTICK_EARLY', 'description': 'Systick was early', 'value': ERROR_SYSTICK_EARLY}
ERROR_TEMPERATURE_OUT_OF_OPERATION_RANGE = 88
error_temperature_out_of_operation_range = {'name': 'TEMPERATURE_OUT_OF_OPERATION_RANGE', 'description': 'Temperature is out of product?s operational boundary', 'value': ERROR_TEMPERATURE_OUT_OF_OPERATION_RANGE}
ERROR_TEMPERATURE_TURN_OFF = 89
error_temperature_turn_off = {'name': 'TEMPERATURE_TURN_OFF', 'description': 'Temperature is too high that the product needs to shutoff to cool down', 'value': ERROR_TEMPERATURE_TURN_OFF}
ERROR_TRAP_OVERWRITE_TASK_H = 90
error_trap_overwrite_task_h = {'name': 'TRAP_OVERWRITE_TASK_H', 'description': 'Overwrite of trap event in task H', 'value': ERROR_TRAP_OVERWRITE_TASK_H}
ERROR_TRAP_OVERWRITE_TASK_L = 91
error_trap_overwrite_task_l = {'name': 'TRAP_OVERWRITE_TASK_L', 'description': 'Overwrite of trap event in task L', 'value': ERROR_TRAP_OVERWRITE_TASK_L}
ERROR_TRAP_OVERWRITE_TASK_M = 92
error_trap_overwrite_task_m = {'name': 'TRAP_OVERWRITE_TASK_M', 'description': 'Overwrite of trap event in task M', 'value': ERROR_TRAP_OVERWRITE_TASK_M}
ERROR_VOLTAGE_3V3_FAIL = 93
error_voltage_3v3_fail = {'name': 'VOLTAGE_3V3_FAIL', 'description': '3.3 Voltage failure', 'value': ERROR_VOLTAGE_3V3_FAIL}
ERROR_WATCHDOG = 94
error_watchdog = {'name': 'WATCHDOG', 'description': 'CPU watchdog reset', 'value': ERROR_WATCHDOG}
ERROR_WATCHDOG_SECMCU = 95
error_watchdog_secmcu = {'name': 'WATCHDOG_SECMCU', 'description': 'Secondary MCU watchdog reset', 'value': ERROR_WATCHDOG_SECMCU}
ERROR_TEMPERATURE_SECMCU = 96
error_temperature_secmcu = {'name': 'TEMPERATURE_SECMCU', 'description': 'Temperature for secondary mcu is too high', 'value': ERROR_TEMPERATURE_SECMCU}
ERROR_TEMPERATURE_SECMCU_TURN_OFF = 97
error_temperature_secmcu_turn_off = {'name': 'TEMPERATURE_SECMCU_TURN_OFF', 'description': 'Temperature for secondary mcu is above operating limit, turn off device', 'value': ERROR_TEMPERATURE_SECMCU_TURN_OFF}
ERROR_BIST_LIGHT_SENSOR = 98
error_bist_light_sensor = {'name': 'BIST_LIGHT_SENSOR', 'description': 'Self test light sensor fail', 'value': ERROR_BIST_LIGHT_SENSOR}
ERROR_BIST_LED_DRIVER_1 = 99
error_bist_led_driver_1 = {'name': 'BIST_LED_DRIVER_1', 'description': 'Self test led driver 1 fail', 'value': ERROR_BIST_LED_DRIVER_1}
ERROR_BIST_LED_DRIVER_2 = 100
error_bist_led_driver_2 = {'name': 'BIST_LED_DRIVER_2', 'description': 'Self test led driver 2 fail', 'value': ERROR_BIST_LED_DRIVER_2}
ERROR_BIST_DATA_FLASH = 101
error_bist_data_flash = {'name': 'BIST_DATA_FLASH', 'description': 'Self test data flash test fail', 'value': ERROR_BIST_DATA_FLASH}
ERROR_STACK_MARGIN_SECMCU = 102
error_stack_margin_secmcu = {'name': 'STACK_MARGIN_SECMCU', 'description': 'TBD', 'value': ERROR_STACK_MARGIN_SECMCU}
ERROR_SYSTICK_DELAY_SECMCU = 103
error_systick_delay_secmcu = {'name': 'SYSTICK_DELAY_SECMCU', 'description': 'TBD', 'value': ERROR_SYSTICK_DELAY_SECMCU}
ERROR_DFU_UPDATE_FAILED = 104
error_dfu_update_failed = {'name': 'DFU_UPDATE_FAILED', 'description': 'DFU update failed', 'value': ERROR_DFU_UPDATE_FAILED}
ERROR_DFU_SECTOR_END_DATA_SIZE = 105
error_dfu_sector_end_data_size = {'name': 'DFU_SECTOR_END_DATA_SIZE', 'description': 'Unexpected data left close to sector finish', 'value': ERROR_DFU_SECTOR_END_DATA_SIZE}
ERROR_DFU_IMAGE_END_DATA_SIZE = 106
error_dfu_image_end_data_size = {'name': 'DFU_IMAGE_END_DATA_SIZE', 'description': 'Unexpected data left when image is close to completed', 'value': ERROR_DFU_IMAGE_END_DATA_SIZE}
ERROR_DFU_IMAGE_CRC_FAIL = 107
error_dfu_image_crc_fail = {'name': 'DFU_IMAGE_CRC_FAIL', 'description': 'DFU image download fails CRC check', 'value': ERROR_DFU_IMAGE_CRC_FAIL}
ERROR_BLE_UNKNOWN_TRANSMISSION = 108
error_ble_unknown_transmission = {'name': 'BLE_UNKNOWN_TRANSMISSION', 'description': 'BLE transmission not using the correct uuid type', 'value': ERROR_BLE_UNKNOWN_TRANSMISSION}
ERROR_BLE_TRANSMISSION_FAIL = 109
error_ble_transmission_fail = {'name': 'BLE_TRANSMISSION_FAIL', 'description': 'BLE transmission failed', 'value': ERROR_BLE_TRANSMISSION_FAIL}
ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_RX = 110
error_comm_package_crc_fail_wireless_rx = {'name': 'COMM_PACKAGE_CRC_FAIL_WIRELESS_RX', 'description': 'Data fails CRC validation', 'value': ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_RX}
ERROR_COMM_PACKAGE_CRC_FAIL_HOST_RX = 111
error_comm_package_crc_fail_host_rx = {'name': 'COMM_PACKAGE_CRC_FAIL_HOST_RX', 'description': 'Data fails CRC validation', 'value': ERROR_COMM_PACKAGE_CRC_FAIL_HOST_RX}
ERROR_COMM_PACKAGE_CRC_FAIL_BULK_RX = 112
error_comm_package_crc_fail_bulk_rx = {'name': 'COMM_PACKAGE_CRC_FAIL_BULK_RX', 'description': 'Data fails CRC validation', 'value': ERROR_COMM_PACKAGE_CRC_FAIL_BULK_RX}
ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_TX = 113
error_comm_package_crc_fail_wireless_tx = {'name': 'COMM_PACKAGE_CRC_FAIL_WIRELESS_TX', 'description': 'Data fails CRC validation', 'value': ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_TX}
ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_BULK_TX = 114
error_comm_package_crc_fail_wireless_bulk_tx = {'name': 'COMM_PACKAGE_CRC_FAIL_WIRELESS_BULK_TX', 'description': 'Data fails CRC validation', 'value': ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_BULK_TX}
ERROR_COMM_INCOMING_BULK_DATA_LOST = 115
error_comm_incoming_bulk_data_lost = {'name': 'COMM_INCOMING_BULK_DATA_LOST', 'description': 'Incoming bulk data transmission does not fit into buffer', 'value': ERROR_COMM_INCOMING_BULK_DATA_LOST}
ERROR_COMM_INCOMING_DATA_LOST = 116
error_comm_incoming_data_lost = {'name': 'COMM_INCOMING_DATA_LOST', 'description': 'Incoming data transmission does not fit into buffer', 'value': ERROR_COMM_INCOMING_DATA_LOST}
ERROR_COMM_RINGBUFFER_HOST_TX_FULL = 117
error_comm_ringbuffer_host_tx_full = {'name': 'COMM_RINGBUFFER_HOST_TX_FULL', 'description': 'Host TX ringbuffer full', 'value': ERROR_COMM_RINGBUFFER_HOST_TX_FULL}
ERROR_COMM_RINGBUFFER_HOST_RX_FULL = 118
error_comm_ringbuffer_host_rx_full = {'name': 'COMM_RINGBUFFER_HOST_RX_FULL', 'description': 'Host RX ringbuffer full', 'value': ERROR_COMM_RINGBUFFER_HOST_RX_FULL}
ERROR_COMM_RINGBUFFER_WIFI_TX_FULL = 119
error_comm_ringbuffer_wifi_tx_full = {'name': 'COMM_RINGBUFFER_WIFI_TX_FULL', 'description': 'WIFI TX ringbuffer full', 'value': ERROR_COMM_RINGBUFFER_WIFI_TX_FULL}
ERROR_COMM_RINGBUFFER_WIFI_RX_FULL = 120
error_comm_ringbuffer_wifi_rx_full = {'name': 'COMM_RINGBUFFER_WIFI_RX_FULL', 'description': 'WIFI RX ringbuffer full', 'value': ERROR_COMM_RINGBUFFER_WIFI_RX_FULL}
ERROR_COMM_RINGBUFFER_BLE_TX_FULL = 121
error_comm_ringbuffer_ble_tx_full = {'name': 'COMM_RINGBUFFER_BLE_TX_FULL', 'description': 'BLE RX ringbuffer full', 'value': ERROR_COMM_RINGBUFFER_BLE_TX_FULL}
ERROR_COMM_RINGBUFFER_BLE_RX_FULL = 122
error_comm_ringbuffer_ble_rx_full = {'name': 'COMM_RINGBUFFER_BLE_RX_FULL', 'description': 'BLE TX ringbuffer full', 'value': ERROR_COMM_RINGBUFFER_BLE_RX_FULL}
ERROR_COMM_OUTGOING_TRANSMISSION_DISCARDED = 123
error_comm_outgoing_transmission_discarded = {'name': 'COMM_OUTGOING_TRANSMISSION_DISCARDED', 'description': 'Nobody is connected so outgoing transmission is discarded', 'value': ERROR_COMM_OUTGOING_TRANSMISSION_DISCARDED}
ERROR_COMM_OUTGOING_BULK_TRANSMISSION_DISCARDED = 124
error_comm_outgoing_bulk_transmission_discarded = {'name': 'COMM_OUTGOING_BULK_TRANSMISSION_DISCARDED', 'description': 'Nobody is connected so outgoing transmission is discarded', 'value': ERROR_COMM_OUTGOING_BULK_TRANSMISSION_DISCARDED}
ERROR_SYSTEM_RESET = 125
error_system_reset = {'name': 'SYSTEM_RESET', 'description': 'An error triggers a reset', 'value': ERROR_SYSTEM_RESET}
ERROR_BIST_WIFI = 126
error_bist_wifi = {'name': 'BIST_WIFI', 'description': 'Self test on WIFI module fail', 'value': ERROR_BIST_WIFI}
ERROR_BUZZER_FAIL = 127
error_buzzer_fail = {'name': 'BUZZER_FAIL', 'description': 'Buzzer was in use, buzzer event missed.', 'value': ERROR_BUZZER_FAIL}
ERROR_SEQMCU_APPLICATION_CONFIG_READ_FAILED = 128
error_seqmcu_application_config_read_failed = {'name': 'SEQMCU_APPLICATION_CONFIG_READ_FAILED', 'description': 'Could not read application config on secondary MCU', 'value': ERROR_SEQMCU_APPLICATION_CONFIG_READ_FAILED}
ERROR_SEQMCU_APPLICATION_CONFIG_CORRUPTED = 129
error_seqmcu_application_config_corrupted = {'name': 'SEQMCU_APPLICATION_CONFIG_CORRUPTED', 'description': 'Application config on secondary MCU corrupted', 'value': ERROR_SEQMCU_APPLICATION_CONFIG_CORRUPTED}
ERROR_SEQMCU_FRAMEWORK_SETTINGS_CORRUPTED = 130
error_seqmcu_framework_settings_corrupted = {'name': 'SEQMCU_FRAMEWORK_SETTINGS_CORRUPTED', 'description': 'Framework settings on secondary MCU corrupted', 'value': ERROR_SEQMCU_FRAMEWORK_SETTINGS_CORRUPTED}
ERROR_LOG_OVERFLOW = 131
error_log_overflow = {'name': 'LOG_OVERFLOW', 'description': 'Log overflow', 'value': ERROR_LOG_OVERFLOW}
ERROR_MOTOR_MOVE_MIDSWING = 132
error_motor_move_midswing = {'name': 'MOTOR_MOVE_MIDSWING', 'description': 'Unable to move motor to desired position', 'value': ERROR_MOTOR_MOVE_MIDSWING}
ERROR_MOTOR_MOVE_HEELSTRIKE = 133
error_motor_move_heelstrike = {'name': 'MOTOR_MOVE_HEELSTRIKE', 'description': 'Unable to move motor to desired position', 'value': ERROR_MOTOR_MOVE_HEELSTRIKE}
ERROR_BIST_IMU = 134
error_bist_imu = {'name': 'BIST_IMU', 'description': 'IMU built-in-self-test failed', 'value': ERROR_BIST_IMU}
ERROR_SEQMCU_FLASH_INIT_FAILED = 135
error_seqmcu_flash_init_failed = {'name': 'SEQMCU_FLASH_INIT_FAILED', 'description': 'Built in flash driver failed to initialize', 'value': ERROR_SEQMCU_FLASH_INIT_FAILED}
ERROR_SEQMCU_FLASH_WRITE_FAILED = 136
error_seqmcu_flash_write_failed = {'name': 'SEQMCU_FLASH_WRITE_FAILED', 'description': 'Built in flash driver failed to write data', 'value': ERROR_SEQMCU_FLASH_WRITE_FAILED}
ERROR_SEQMCU_FLASH_UPDATE_FAILED = 137
error_seqmcu_flash_update_failed = {'name': 'SEQMCU_FLASH_UPDATE_FAILED', 'description': 'Built in flash driver failed to update data', 'value': ERROR_SEQMCU_FLASH_UPDATE_FAILED}
ERROR_SEQMCU_APPLICATION_CONFIG_BACKUP_CORRUPTED = 138
error_seqmcu_application_config_backup_corrupted = {'name': 'SEQMCU_APPLICATION_CONFIG_BACKUP_CORRUPTED', 'description': 'Application backup config on secondary MCU corrupted', 'value': ERROR_SEQMCU_APPLICATION_CONFIG_BACKUP_CORRUPTED}
ERROR_SEQMCU_APPLICATION_SETTINGS_READ_FAILED = 139
error_seqmcu_application_settings_read_failed = {'name': 'SEQMCU_APPLICATION_SETTINGS_READ_FAILED', 'description': 'Could not read application config on secondary MCU', 'value': ERROR_SEQMCU_APPLICATION_SETTINGS_READ_FAILED}
ERROR_SEQMCU_APPLICATION_SETTINGS_CORRUPTED = 140
error_seqmcu_application_settings_corrupted = {'name': 'SEQMCU_APPLICATION_SETTINGS_CORRUPTED', 'description': 'Application config on secondary MCU corrupted', 'value': ERROR_SEQMCU_APPLICATION_SETTINGS_CORRUPTED}
ERROR_SEQMCU_APPLICATION_SETTINGS_BACKUP_CORRUPTED = 141
error_seqmcu_application_settings_backup_corrupted = {'name': 'SEQMCU_APPLICATION_SETTINGS_BACKUP_CORRUPTED', 'description': 'Application backup config on secondary MCU corrupted', 'value': ERROR_SEQMCU_APPLICATION_SETTINGS_BACKUP_CORRUPTED}
ERROR_SEQMCU_FRAMEWORK_SETTINGS_BACKUP_CORRUPTED = 142
error_seqmcu_framework_settings_backup_corrupted = {'name': 'SEQMCU_FRAMEWORK_SETTINGS_BACKUP_CORRUPTED', 'description': 'Framework settings backup on secondary MCU corrupted', 'value': ERROR_SEQMCU_FRAMEWORK_SETTINGS_BACKUP_CORRUPTED}
ERROR_SECMCU_TRAP_OVERWRITE = 143
error_secmcu_trap_overwrite = {'name': 'SECMCU_TRAP_OVERWRITE', 'description': 'Overwrite of trap event', 'value': ERROR_SECMCU_TRAP_OVERWRITE}
ERROR_SENSOR_GYROSCOPE_SATURATION_WARNING = 144
error_sensor_gyroscope_saturation_warning = {'name': 'SENSOR_GYROSCOPE_SATURATION_WARNING', 'description': 'Gyroscope error, value approaching saturation', 'value': ERROR_SENSOR_GYROSCOPE_SATURATION_WARNING}
ERROR_SENSOR_GYROSCOPE_SATURATION_ERROR = 145
error_sensor_gyroscope_saturation_error = {'name': 'SENSOR_GYROSCOPE_SATURATION_ERROR', 'description': 'Gyroscope error, value saturated', 'value': ERROR_SENSOR_GYROSCOPE_SATURATION_ERROR}
DEVICE_MESSAGE_SYNC_BYTE = 170
device_message_sync_byte = {'name': 'SYNC_BYTE', 'description': 'Sync byte for the device data packet', 'value': DEVICE_MESSAGE_SYNC_BYTE}
DEVICE_MESSAGE_SYNC_OFFSET = 0
device_message_sync_offset = {'name': 'SYNC_OFFSET', 'description': 'Sync byte location offset', 'value': DEVICE_MESSAGE_SYNC_OFFSET}
DEVICE_MESSAGE_SYNC_SIZE = 1
device_message_sync_size = {'name': 'SYNC_SIZE', 'description': 'Sync byte size', 'value': DEVICE_MESSAGE_SYNC_SIZE}
DEVICE_MESSAGE_SIZE_OFFSET = DEVICE_MESSAGE_SYNC_OFFSET+DEVICE_MESSAGE_SYNC_SIZE
device_message_size_offset = {'name': 'SIZE_OFFSET', 'description': 'Packet size offset', 'value': DEVICE_MESSAGE_SIZE_OFFSET}
DEVICE_MESSAGE_SIZE_SIZE = 1
device_message_size_size = {'name': 'SIZE_SIZE', 'description': 'Size of packet size byte', 'value': DEVICE_MESSAGE_SIZE_SIZE}
DEVICE_MESSAGE_HEADER_SIZE = DEVICE_MESSAGE_SIZE_OFFSET + DEVICE_MESSAGE_SIZE_SIZE
device_message_header_size = {'name': 'HEADER_SIZE', 'description': 'Size of the packet header', 'value': DEVICE_MESSAGE_HEADER_SIZE}
DEVICE_MESSAGE_PAYLOAD_OFFSET = DEVICE_MESSAGE_HEADER_SIZE
device_message_payload_offset = {'name': 'PAYLOAD_OFFSET', 'description': 'Offset to payload', 'value': DEVICE_MESSAGE_PAYLOAD_OFFSET}
DEVICE_MESSAGE_CRC_SIZE = 2
device_message_crc_size = {'name': 'CRC_SIZE', 'description': 'Size of the CRC', 'value': DEVICE_MESSAGE_CRC_SIZE}
DEVICE_MESSAGE_SIZE_OVERHEAD = DEVICE_MESSAGE_HEADER_SIZE + DEVICE_MESSAGE_CRC_SIZE
device_message_size_overhead = {'name': 'SIZE_OVERHEAD', 'description': 'Total packet size overhead', 'value': DEVICE_MESSAGE_SIZE_OVERHEAD}
DEVICE_MESSAGE_MAXIMUM_SIZE = 24
device_message_maximum_size = {'name': 'MAXIMUM_SIZE', 'description': 'Maximum inter device packet size', 'value': DEVICE_MESSAGE_MAXIMUM_SIZE}
DEVICE_REPORTS_TOOLBOX_BULK_TEST = 249
device_reports_toolbox_bulk_test = {'name': 'TOOLBOX_BULK_TEST', 'description': 'Test for a bulk with simple repeatable data', 'value': DEVICE_REPORTS_TOOLBOX_BULK_TEST, 'reportDef': {'tableName': 'Bulk Test', 'tableDescription': 'Data in a row', 'columnDefs': [{'name': 'Byte', 'datatype': 'UINT8', 'format': '', 'multFactor': 1.0}]}}
DEVICE_REPORTS_TOOLBOX_ENUM_TEST = 250
device_reports_toolbox_enum_test = {'name': 'TOOLBOX_ENUM_TEST', 'description': 'Test for a enum values', 'value': DEVICE_REPORTS_TOOLBOX_ENUM_TEST, 'reportDef': {'tableName': 'My Enum Testing', 'tableDescription': 'NB: Each column is random, so please do not read to much into it', 'metadataDefs': [{'name': 'DATETIME32', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}], 'columnDefs': [{'name': 'Bananas', 'datatype': 'ROW#', 'format': '', 'multFactor': 1.0, 'addFactor': 1.0}, {'name': 'DeviceName', 'datatype': 'ENUM_NAME:DEVICE', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'DeviceDesc', 'datatype': 'ENUM_DESCRIPTION:DEVICE', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Device', 'datatype': 'ENUM:DEVICE', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'DeviceDebug', 'datatype': 'ENUM_DEBUG:DEVICE', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'DeviceAppsDebug', 'datatype': 'ENUM_DEBUG:DEVICE_APPS', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Activity', 'datatype': 'ENUM_DEBUG:ACTIVITY', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'DATETIME32', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}]}
DEVICE_REPORTS_TOOLBOX_FAIL_BAD_CRC = 251
device_reports_toolbox_fail_bad_crc = {'name': 'TOOLBOX_FAIL_BAD_CRC', 'description': 'Test report for server to return not supported', 'value': DEVICE_REPORTS_TOOLBOX_FAIL_BAD_CRC, 'reportDef': {'reportName': 'Dummy report to trigger crc error'}}
DEVICE_REPORTS_TOOLBOX_FAIL_NOT_SUPPORTED = 252
device_reports_toolbox_fail_not_supported = {'name': 'TOOLBOX_FAIL_NOT_SUPPORTED', 'description': 'Test report for server to return not supported', 'value': DEVICE_REPORTS_TOOLBOX_FAIL_NOT_SUPPORTED, 'reportDef': {'reportName': 'Dummy report to trigger not supported error'}}
DEVICE_REPORTS_TOOLBOX_FAIL_NO_DATA = 253
device_reports_toolbox_fail_no_data = {'name': 'TOOLBOX_FAIL_NO_DATA', 'description': 'Test report for server to return no data', 'value': DEVICE_REPORTS_TOOLBOX_FAIL_NO_DATA}
DEVICE_REPORTS_TOOLBOX_DATATYPE_TEST = 254
device_reports_toolbox_datatype_test = {'name': 'TOOLBOX_DATATYPE_TEST', 'description': 'Test for all known datatypes', 'value': DEVICE_REPORTS_TOOLBOX_DATATYPE_TEST, 'reportDef': {'reportName': 'Toolbox datatype test', 'reportDescription': 'Test for all known datatypes', 'tableName': 'DataTypeTable', 'tableDescription': 'All known datatypes', 'metadataDefs': [{'name': 'DATETIME32', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}, {'name': 'DATETIME64', 'datatype': 'DATETIME64', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}, {'name': 'UINT8', 'datatype': 'UINT8', 'format': '', 'multFactor': 1.0}, {'name': 'UINT16', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}, {'name': 'UINT32', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'UINT64', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'INT8', 'datatype': 'INT8', 'format': '', 'multFactor': 1.0}, {'name': 'INT16', 'datatype': 'INT16', 'format': '', 'multFactor': 1.0}, {'name': 'INT32', 'datatype': 'INT32', 'format': '', 'multFactor': 1.0}, {'name': 'INT64', 'datatype': 'INT64', 'format': '', 'multFactor': 1.0}, {'name': 'TEXT', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'BOOL', 'datatype': 'BOOL', 'format': '', 'multFactor': 1.0}, {'name': 'REAL32', 'datatype': 'REAL32', 'format': '', 'multFactor': 1.0}, {'name': 'REAL64', 'datatype': 'REAL64', 'format': '', 'multFactor': 1.0}, {'name': 'BUFFER', 'datatype': 'BUFFER', 'format': '', 'length': 10, 'multFactor': 1.0}], 'columnDefs': [{'name': 'DATETIME32', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}, {'name': 'DATETIME64', 'datatype': 'DATETIME64', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}, {'name': 'UINT8', 'datatype': 'UINT8', 'format': '', 'multFactor': 1.0}, {'name': 'UINT16', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}, {'name': 'UINT32', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'UINT64', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'INT8', 'datatype': 'INT8', 'format': '', 'multFactor': 1.0}, {'name': 'INT16', 'datatype': 'INT16', 'format': '', 'multFactor': 1.0}, {'name': 'INT32', 'datatype': 'INT32', 'format': '', 'multFactor': 1.0}, {'name': 'INT64', 'datatype': 'INT64', 'format': '', 'multFactor': 1.0}, {'name': 'TEXT', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'BOOL', 'datatype': 'BOOL', 'format': '', 'multFactor': 1.0}, {'name': 'REAL32', 'datatype': 'REAL32', 'format': '', 'multFactor': 1.0}, {'name': 'REAL64', 'datatype': 'REAL64', 'format': '', 'multFactor': 1.0}, {'name': 'BUFFER', 'datatype': 'BUFFER', 'format': '', 'length': 10, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'DATETIME32', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}, {'name': 'DATETIME64', 'datatype': 'DATETIME64', 'format': 'yyyy-MM-dd HH:mm:ss.fff', 'multFactor': 1.0}, {'name': 'UINT8', 'datatype': 'UINT8', 'format': '', 'multFactor': 1.0}, {'name': 'UINT16', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}, {'name': 'UINT32', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'UINT64', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'INT8', 'datatype': 'INT8', 'format': '', 'multFactor': 1.0}, {'name': 'INT16', 'datatype': 'INT16', 'format': '', 'multFactor': 1.0}, {'name': 'INT32', 'datatype': 'INT32', 'format': '', 'multFactor': 1.0}, {'name': 'INT64', 'datatype': 'INT64', 'format': '', 'multFactor': 1.0}, {'name': 'TEXT', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'BOOL', 'datatype': 'BOOL', 'format': '', 'multFactor': 1.0}, {'name': 'REAL32', 'datatype': 'REAL32', 'format': '', 'multFactor': 1.0}, {'name': 'REAL64', 'datatype': 'REAL64', 'format': '', 'multFactor': 1.0}, {'name': 'BUFFER', 'datatype': 'BUFFER', 'format': '', 'length': 10, 'multFactor': 1.0}]}
DEVICE_REPORTS_BATTERY_CHARGE_HISTORY = 1
device_reports_battery_charge_history = {'name': 'BATTERY_CHARGE_HISTORY', 'description': 'Battery charge history report', 'value': DEVICE_REPORTS_BATTERY_CHARGE_HISTORY, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'reportDef': {'reportName': 'Battery charge history report', 'reportDescription': 'History of battery charges with plugged in count and voltage', 'tableName': 'Charges', 'tableDescription': 'Charge history', 'metadataDefs': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}, {'name': 'ReportPluggedInCount', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}], 'columnDefs': [{'name': 'At', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}, {'name': 'PluggedInCount', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}, {'name': 'Voltage', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}, {'name': 'ReportPluggedInCount', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}]}
DEVICE_REPORTS_STEP_COUNT_BY_HOURS = 2
device_reports_step_count_by_hours = {'name': 'STEP_COUNT_BY_HOURS', 'description': 'Step count by hours report', 'value': DEVICE_REPORTS_STEP_COUNT_BY_HOURS, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'reportDef': {'reportName': 'Step count by hours', 'reportDescription': 'Step count by hours counting backwards from current hour', 'tableName': 'Step count by hours', 'tableDescription': 'Step count by hours counting backwards', 'metadataDefs': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}, {'name': 'ReportStepCountEntries', 'datatype': 'UINT16', 'format': '', 'index': 4, 'multFactor': 1.0}, {'name': 'ReportTotalStepCount', 'datatype': 'UINT32', 'format': '', 'index': 6, 'multFactor': 1.0}], 'columnDefs': [{'name': 'Hour', 'datatype': 'ROW#', 'format': '', 'multFactor': -1.0}, {'name': 'Steps', 'datatype': 'UINT16', 'format': '', 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}, {'name': 'ReportStepCountEntries', 'datatype': 'UINT16', 'format': '', 'index': 4, 'multFactor': 1.0}, {'name': 'ReportTotalStepCount', 'datatype': 'UINT32', 'format': '', 'index': 6, 'multFactor': 1.0}]}
DEVICE_REPORTS_STEP_COUNT_BY_DAYS = 3
device_reports_step_count_by_days = {'name': 'STEP_COUNT_BY_DAYS', 'description': 'Step count by days report', 'value': DEVICE_REPORTS_STEP_COUNT_BY_DAYS, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'reportDef': {'reportName': 'Step count by days', 'reportDescription': 'Step count by days counting backwards from today', 'tableName': 'Step count by days', 'tableDescription': 'Step count by days counting backwards', 'metadataDefs': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'length': 4, 'multFactor': 1.0}, {'name': 'ReportStepCountEntries', 'datatype': 'UINT16', 'format': '', 'index': 4, 'length': 2, 'multFactor': 1.0}, {'name': 'ReportTotalStepCount', 'datatype': 'UINT32', 'format': '', 'index': 6, 'length': 4, 'multFactor': 1.0}], 'columnDefs': [{'name': 'Day', 'datatype': 'ROW#', 'format': '', 'multFactor': -1.0}, {'name': 'Steps', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'length': 4, 'multFactor': 1.0}, {'name': 'ReportStepCountEntries', 'datatype': 'UINT16', 'format': '', 'index': 4, 'length': 2, 'multFactor': 1.0}, {'name': 'ReportTotalStepCount', 'datatype': 'UINT32', 'format': '', 'index': 6, 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_STEP_COUNT_BY_MONTHS = 4
device_reports_step_count_by_months = {'name': 'STEP_COUNT_BY_MONTHS', 'description': 'Step count by months report', 'value': DEVICE_REPORTS_STEP_COUNT_BY_MONTHS, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'reportDef': {'reportName': 'Step count by months', 'reportDescription': 'Step count by months counting backwards from today', 'tableName': 'Step count by months', 'tableDescription': 'Step count by months counting backwards', 'metadataDefs': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'length': 4, 'multFactor': 1.0}, {'name': 'ReportStepCountEntries', 'datatype': 'UINT16', 'format': '', 'index': 4, 'length': 2, 'multFactor': 1.0}, {'name': 'ReportTotalStepCount', 'datatype': 'UINT32', 'format': '', 'index': 6, 'length': 4, 'multFactor': 1.0}], 'columnDefs': [{'name': 'Month', 'datatype': 'ROW#', 'format': '', 'multFactor': -1.0}, {'name': 'Steps', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'length': 4, 'multFactor': 1.0}, {'name': 'ReportStepCountEntries', 'datatype': 'UINT16', 'format': '', 'index': 4, 'length': 2, 'multFactor': 1.0}, {'name': 'ReportTotalStepCount', 'datatype': 'UINT32', 'format': '', 'index': 6, 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_STEP_COUNT_BY_YEARS = 5
device_reports_step_count_by_years = {'name': 'STEP_COUNT_BY_YEARS', 'description': 'Step count by years report', 'value': DEVICE_REPORTS_STEP_COUNT_BY_YEARS}
DEVICE_REPORTS_ACTIVITY = 6
device_reports_activity = {'name': 'ACTIVITY', 'description': 'Activity report for Toolbox Testing', 'value': DEVICE_REPORTS_ACTIVITY, 'reportDef': {'tableName': 'Dummy acticities', 'tableDescription': 'Dummy activities for testing', 'metadataDefs': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}], 'columnDefs': [{'name': 'Test', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Result', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}]}
DEVICE_REPORTS_ERROR = 7
device_reports_error = {'name': 'ERROR', 'description': 'Error report', 'value': DEVICE_REPORTS_ERROR, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP'}
DEVICE_REPORTS_LOG = 8
device_reports_log = {'name': 'LOG', 'description': 'Log report', 'value': DEVICE_REPORTS_LOG, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE_MAIN_APP | DEVICE_APPS.PROPRIO_FOOT_MAIN_APP | DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP'}
DEVICE_REPORTS_STEP_HISTOGRAM = 9
device_reports_step_histogram = {'name': 'STEP_HISTOGRAM', 'description': 'Speed histogram report', 'value': DEVICE_REPORTS_STEP_HISTOGRAM, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP'}
DEVICE_REPORTS_SPEED_HISTOGRAM = 10
device_reports_speed_histogram = {'name': 'SPEED_HISTOGRAM', 'description': 'Steps in a single walk histogram report', 'value': DEVICE_REPORTS_SPEED_HISTOGRAM, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP | DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP'}
DEVICE_REPORTS_DISTANCE_HISTOGRAM = 11
device_reports_distance_histogram = {'name': 'DISTANCE_HISTOGRAM', 'description': 'Distance histogram report', 'value': DEVICE_REPORTS_DISTANCE_HISTOGRAM, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP'}
DEVICE_REPORTS_SURFACE_HISTOGRAM = 12
device_reports_surface_histogram = {'name': 'SURFACE_HISTOGRAM', 'description': 'Surfance angle histogram report', 'value': DEVICE_REPORTS_SURFACE_HISTOGRAM, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP'}
DEVICE_REPORTS_VACUUM_HISTOGRAM = 13
device_reports_vacuum_histogram = {'name': 'VACUUM_HISTOGRAM', 'description': 'Vacuum histogram report', 'value': DEVICE_REPORTS_VACUUM_HISTOGRAM}
DEVICE_REPORTS_GAIT = 14
device_reports_gait = {'name': 'GAIT', 'description': 'Gait report', 'value': DEVICE_REPORTS_GAIT, 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP'}
DEVICE_REPORTS_DEVICE = 15
device_reports_device = {'name': 'DEVICE', 'description': 'Device report', 'value': DEVICE_REPORTS_DEVICE}
DEVICE_REPORTS_SELF_TEST = 16
device_reports_self_test = {'name': 'SELF_TEST', 'description': 'Dummy self test report for Toolbox Testing', 'value': DEVICE_REPORTS_SELF_TEST, 'reportDef': {'tableName': 'Dummy self test', 'tableDescription': 'Dummy self test for testing', 'metadataDefs': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}], 'columnDefs': [{'name': 'Test', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Result', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'multFactor': 1.0}]}
DEVICE_REPORTS_CALIBRATION = 17
device_reports_calibration = {'name': 'CALIBRATION', 'description': 'calibration report', 'value': DEVICE_REPORTS_CALIBRATION}
DEVICE_REPORTS_STANDING_FORCE = 18
device_reports_standing_force = {'name': 'STANDING_FORCE', 'description': 'force distribution while standing', 'value': DEVICE_REPORTS_STANDING_FORCE}
DEVICE_REPORTS_B3C_SYSTEM_VERSION = 19
device_reports_b3c_system_version = {'name': 'B3C_SYSTEM_VERSION', 'description': 'List of application versions and board revisions in the B3C system', 'value': DEVICE_REPORTS_B3C_SYSTEM_VERSION, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'tableName': "we don't care, no table", 'tableDescription': "we don't care, no table", 'metadataDefs': [{'name': 'ReportValid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'BootloaderVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'DiagnosticVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'MainAppVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'FPGAPatternVersion', 'datatype': 'TEXT', 'format': '', 'length': 20, 'multFactor': 1.0}, {'name': 'MainBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'MainBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportValid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'BootloaderVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'DiagnosticVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'MainAppVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'FPGAPatternVersion', 'datatype': 'TEXT', 'format': '', 'length': 20, 'multFactor': 1.0}, {'name': 'MainBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'MainBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}]}
DEVICE_REPORTS_B3C_SENSOR_READ = 20
device_reports_b3c_sensor_read = {'name': 'B3C_SENSOR_READ', 'description': 'Get values and config of each active input stream', 'value': DEVICE_REPORTS_B3C_SENSOR_READ, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'reportDef': {'reportName': 'Sensors read', 'tableName': 'Sensor values', 'tableDescription': 'Sensor values', 'metadataDefs': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'length': 4, 'multFactor': 1.0}, {'name': 'ReportSensorCount', 'datatype': 'UINT8', 'format': '', 'index': 4, 'length': 1, 'multFactor': 1.0}, {'name': 'ReportInputStreamCount', 'datatype': 'UINT8', 'format': '', 'index': 5, 'length': 1, 'multFactor': 1.0}], 'columnDefs': [{'name': 'InputNr', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'RawValue', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'SensorStatus', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'SamplingRate', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'MinWarning', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'MaxWarning', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'DelWarning', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'MinFatal', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'MaxFatal', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'DelFatal', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'DelInputError', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Cal1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cal2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cal3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cal4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportAt', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm: ss.fff', 'length': 4, 'multFactor': 1.0}, {'name': 'ReportSensorCount', 'datatype': 'UINT8', 'format': '', 'index': 4, 'length': 1, 'multFactor': 1.0}, {'name': 'ReportInputStreamCount', 'datatype': 'UINT8', 'format': '', 'index': 5, 'length': 1, 'multFactor': 1.0}]}
DEVICE_REPORTS_PKM_FATAL_LOG = 21
device_reports_pkm_fatal_log = {'name': 'PKM_FATAL_LOG', 'description': 'List of all fatal errors occurred in Power Knee Mainstream', 'value': DEVICE_REPORTS_PKM_FATAL_LOG, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'reportDef': {'tableName': 'Log entries', 'tableDescription': 'Fatal log entries', 'columnDefs': [{'name': 'FatalID', 'datatype': 'UINT16', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Timestamp', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 9', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 10', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 11', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 12', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 13', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 14', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 15', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 16', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 17', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 18', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Context 19', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}}
DEVICE_REPORTS_PKM_BIOMETRIC_STATS = 22
device_reports_pkm_biometric_stats = {'name': 'PKM_BIOMETRIC_STATS', 'description': 'Report of collected absolute biometric statistics', 'value': DEVICE_REPORTS_PKM_BIOMETRIC_STATS, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'reportDef': {'metadataDefs': [{'name': 'Not used', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FP', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in ramp', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in DIS', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in GEN', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in FA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in FP', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in STBY', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in FP', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time Of Save', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Not used', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FP', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in ramp', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in DIS', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in GEN', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in FA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in FP', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in STBY', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in FP', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time Of Save', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_B3C_SYSTEM_STATS = 23
device_reports_b3c_system_stats = {'name': 'B3C_SYSTEM_STATS', 'description': 'Report of collected system statistics', 'value': DEVICE_REPORTS_B3C_SYSTEM_STATS, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'reportName': 'System statistics', 'tableName': 'System statistics', 'tableDescription': '', 'metadataDefs': [{'name': 'Number of Bootups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Total usage (in seconds)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Peak Battery Current (mA)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Peak CPU Usage (%)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Peak HRT Duration (in micro seconds)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Warning Count', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Fatal Error Count', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Expansion Board Reset Count', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Number of Bootups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Total usage (in seconds)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Peak Battery Current (mA)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Peak CPU Usage (%)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Peak HRT Duration (in micro seconds)', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Warning Count', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Fatal Error Count', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Expansion Board Reset Count', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_PKM_BIOMETRIC_STATS_SLR = 24
device_reports_pkm_biometric_stats_slr = {'name': 'PKM_BIOMETRIC_STATS_SLR', 'description': 'Report of collected relative biometric statistics', 'value': DEVICE_REPORTS_PKM_BIOMETRIC_STATS_SLR, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'reportDef': {'metadataDefs': [{'name': 'Not used', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FP', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in ramp', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in DIS', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in GEN', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in FA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in FP', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in STBY', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in FP', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time Of Save', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Not used', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in FP', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in ramp', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in DIS', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in GEN', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in FA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in FP', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in STBY', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in FP', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Cadence Bin 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time Of Save', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_PKM_SYSTEM_VERSION = 25
device_reports_pkm_system_version = {'name': 'PKM_SYSTEM_VERSION', 'description': 'List of application versions and board revisions in Power Knee', 'value': DEVICE_REPORTS_PKM_SYSTEM_VERSION, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP', 'reportDef': {'tableName': "we don't care, no table", 'tableDescription': "we don't care, no table", 'metadataDefs': [{'name': 'ReportValid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'BootloaderVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'DiagnosticVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'MainAppVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'FPGAPatternVersion', 'datatype': 'TEXT', 'format': '', 'length': 20, 'multFactor': 1.0}, {'name': 'MainBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'MainBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'ActuatorBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'ActuatorBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'ExpansionBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'ExpansionBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 12, 'multFactor': 1.0}, {'name': 'Battery Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Battery Man. Sn', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}, {'name': 'GCSVersion', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportValid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'BootloaderVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'DiagnosticVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'MainAppVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'FPGAPatternVersion', 'datatype': 'TEXT', 'format': '', 'length': 20, 'multFactor': 1.0}, {'name': 'MainBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'MainBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'ActuatorBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'ActuatorBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'ExpansionBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'ExpansionBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 12, 'multFactor': 1.0}, {'name': 'Battery Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Battery Man. Sn', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}, {'name': 'GCSVersion', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}]}
DEVICE_REPORTS_PKM_BATTERY_LOG = 26
device_reports_pkm_battery_log = {'name': 'PKM_BATTERY_LOG', 'description': 'Battery log for Power Knee batteries', 'value': DEVICE_REPORTS_PKM_BATTERY_LOG, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'reportDef': {'tableName': 'Cell status', 'tableDescription': 'Cell status', 'metadataDefs': [{'name': 'Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Manufacturer Serial', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}, {'name': 'Version', 'datatype': 'TEXT', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Total Runtime [hours]', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'No of shutdowns', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'No of charge cycles', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature faults', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature charge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of short circuit discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overload events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during charge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell undervoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell overvoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Min Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Power [cW]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Charge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}], 'columnDefs': [{'name': 'Cell Nr', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Min Voltage [mV]', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Voltage [mV]', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Cell balancing time', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Manufacturer Serial', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}, {'name': 'Version', 'datatype': 'TEXT', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Total Runtime [hours]', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'No of shutdowns', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'No of charge cycles', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature faults', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature charge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of short circuit discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overload events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during charge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell undervoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell overvoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Min Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Power [cW]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Charge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}]}
DEVICE_REPORTS_PKM_MOTOR_SPEED_REPORT = 27
device_reports_pkm_motor_speed_report = {'name': 'PKM_MOTOR_SPEED_REPORT', 'description': 'Report of measurements of the motor speed of a Power Knee device', 'value': DEVICE_REPORTS_PKM_MOTOR_SPEED_REPORT, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'reportDef': {'reportName': 'Motor speed', 'tableName': 'System statistics', 'tableDescription': '', 'metadataDefs': [{'name': 'Report Valid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Test input torque value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Total time measured', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Motor Speed [deg/sec]', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Static Torque', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Report Valid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Test input torque value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Total time measured', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Motor Speed [deg/sec]', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Static Torque', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_B3C_BULK_MECHANISM_TEST_REPORT = 28
device_reports_b3c_bulk_mechanism_test_report = {'name': 'B3C_BULK_MECHANISM_TEST_REPORT', 'description': 'Auto-Generated report for bulk testing', 'value': DEVICE_REPORTS_B3C_BULK_MECHANISM_TEST_REPORT, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'tableName': 'Packets', 'tableDescription': 'Auto-Generated packets for bulk testing', 'columnDefs': [{'name': 'Number', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Counter 0', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 1', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 2', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 3', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 4', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 5', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 6', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 7', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 8', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 9', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 10', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 11', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 12', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Counter 13', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}]}}
DEVICE_REPORTS_PKM_MOTOR_PROFILE_REPORT = 29
device_reports_pkm_motor_profile_report = {'name': 'PKM_MOTOR_PROFILE_REPORT', 'description': 'Report of measurements of the motor speed of a Power Knee device', 'value': DEVICE_REPORTS_PKM_MOTOR_PROFILE_REPORT, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'reportDef': {'reportName': 'Motor profile', 'tableName': 'Motor velocity by position', 'tableDescription': 'Motor velocity by position', 'metadataDefs': [{'name': 'Report Valid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Torque used during test', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Average speed forwards', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Average speed backwards', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}], 'columnDefs': [{'name': 'ForwardPosition', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'ForwardSpeed', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'BackwardPosition', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'BackwardSpeed', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Report Valid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Torque used during test', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Average speed forwards', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Average speed backwards', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_B3C_SENSOR_STATISTICS_REPORT = 30
device_reports_b3c_sensor_statistics_report = {'name': 'B3C_SENSOR_STATISTICS_REPORT', 'description': 'Sensor statistics', 'value': DEVICE_REPORTS_B3C_SENSOR_STATISTICS_REPORT, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'reportDef': {'reportName': 'Sensor Statistics', 'tableName': 'Statistics', 'tableDescription': 'Bla', 'metadataDefs': [{'name': 'ReportSensorCount', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'ReportInputStreamCount', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}], 'columnDefs': [{'name': 'Sensor ID', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Errors', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': '2 Errors bursts', 'datatype': 'UINT32', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': '3 Errors bursts', 'datatype': 'UINT32', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': '4 Errors bursts', 'datatype': 'UINT32', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': '+4 Errors bursts', 'datatype': 'UINT32', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Last error code', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'NO inputs', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Inp 1 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 1 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 1 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 1 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 1 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 2 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 2 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 2 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 2 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 2 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 3 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 3 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 3 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 3 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 3 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 4 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 4 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 4 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 4 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 4 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 5 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 5 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 5 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 5 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 5 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 6 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 6 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 6 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 6 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 6 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 7 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 7 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 7 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 7 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 7 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 8 value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 8 raw value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 8 stdDiv', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 8 min value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Inp 8 max value', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportSensorCount', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'ReportInputStreamCount', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}]}
DEVICE_REPORTS_PKM_SYSTEM_PARAMETERS = 31
device_reports_pkm_system_parameters = {'name': 'PKM_SYSTEM_PARAMETERS', 'description': 'System parameters for the Power Knee Mainstream', 'value': DEVICE_REPORTS_PKM_SYSTEM_PARAMETERS, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'reportDef': {'reportName': 'System Parameters'}}
DEVICE_REPORTS_B3C_FLASH_UNIQUE_ID = 32
device_reports_b3c_flash_unique_id = {'name': 'B3C_FLASH_UNIQUE_ID', 'description': 'Flash ID', 'value': DEVICE_REPORTS_B3C_FLASH_UNIQUE_ID, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'reportDef': {'reportName': 'System Parameters'}}
DEVICE_REPORTS_PKM_APPLICATION_STATISTICS = 33
device_reports_pkm_application_statistics = {'name': 'PKM_APPLICATION_STATISTICS', 'description': 'Report of various measurements in Power Knee Main applicaion', 'value': DEVICE_REPORTS_PKM_APPLICATION_STATISTICS, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'reportDef': {'reportName': 'Application statistics', 'tableName': 'System statistics', 'tableDescription': '', 'metadataDefs': [{'name': 'Peak Torque in Stance', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Motor angle covered', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Number of motor temp warnings', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Number of motor temp errors', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Peak Torque in Stance', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Motor angle covered', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Number of motor temp warnings', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Number of motor temp errors', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_RKN_FATAL_LOG = 34
device_reports_rkn_fatal_log = {'name': 'RKN_FATAL_LOG', 'description': 'List of all fatal errors occurred in Rheo Knee 4', 'value': DEVICE_REPORTS_RKN_FATAL_LOG, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'tableName': 'Log entries', 'tableDescription': 'Log entries by fatal id', 'columnDefs': [{'name': 'Fatal ID (Param0, Param1, Param2, Param3)', 'datatype': 'ENUM:FATAL', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Timestamp', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 0', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Knee Angle', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Last Valid Knee Angle', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Load Cell Anterior', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Load Cell Posterior', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Measured Acctuator Current', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Battery Voltage', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Battery Current', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Battery State of Charge', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Battery Temperature', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Board Temperature', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'IMU Status', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Gait Subphase', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Gait Activity', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'HBDRV Status', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'System Voltage 1V2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'System Voltage 1V8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'System Voltage 3V3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Expansion Board Voltage 3V3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'System Voltage 5V', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}}
DEVICE_REPORTS_RKN_SYSTEM_VERSION = 35
device_reports_rkn_system_version = {'name': 'RKN_SYSTEM_VERSION', 'description': 'List of application versions and board revisions in Rheo Knee 4', 'value': DEVICE_REPORTS_RKN_SYSTEM_VERSION, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'tableName': "we don't care, no table", 'tableDescription': "we don't care, no table", 'metadataDefs': [{'name': 'ReportValid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'BootloaderVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'DiagnosticVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'MainAppVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'FPGAPatternVersion', 'datatype': 'TEXT', 'format': '', 'length': 20, 'multFactor': 1.0}, {'name': 'MainBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'MainBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'PowerBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'PowerBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 12, 'multFactor': 1.0}, {'name': 'ExpansionBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'ExpansionBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 12, 'multFactor': 1.0}, {'name': 'Battery Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Battery Man. Sn', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'ReportValid', 'datatype': 'BOOL', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'BootloaderVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'DiagnosticVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'MainAppVersion', 'datatype': 'TEXT', 'format': '', 'length': 18, 'multFactor': 1.0}, {'name': 'FPGAPatternVersion', 'datatype': 'TEXT', 'format': '', 'length': 20, 'multFactor': 1.0}, {'name': 'MainBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'MainBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'PowerBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'PowerBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 12, 'multFactor': 1.0}, {'name': 'ExpansionBoardRevision', 'datatype': 'TEXT', 'format': '', 'length': 10, 'multFactor': 1.0}, {'name': 'ExpansionBoardSerial', 'datatype': 'TEXT', 'format': '', 'length': 12, 'multFactor': 1.0}, {'name': 'Battery Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Battery Man. Sn', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}]}
DEVICE_REPORTS_RKN_BATTERY_LOG = 36
device_reports_rkn_battery_log = {'name': 'RKN_BATTERY_LOG', 'description': 'Battery log for Rheo Knee 4 batteries', 'value': DEVICE_REPORTS_RKN_BATTERY_LOG, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'reportDef': {'tableName': 'Cell status', 'tableDescription': 'Cell status', 'metadataDefs': [{'name': 'Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Manufacturer Serial', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}, {'name': 'Version', 'datatype': 'TEXT', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Total Runtime [hours]', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'No of shutdowns', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'No of charge cycles', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature faults', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature charge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of short circuit discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overload events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during charge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell undervoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell overvoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Min Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Power [cW]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Charge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}], 'columnDefs': [{'name': 'Cell Nr', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Min Voltage [mV]', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Voltage [mV]', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Cell balancing time', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Serial', 'datatype': 'TEXT', 'format': '', 'length': 6, 'multFactor': 1.0}, {'name': 'Manufacturer Serial', 'datatype': 'TEXT', 'format': '', 'length': 16, 'multFactor': 1.0}, {'name': 'Version', 'datatype': 'TEXT', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Total Runtime [hours]', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'No of shutdowns', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'No of charge cycles', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature faults', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overtemperature charge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of short circuit discharge events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overload events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during charge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of overcurrent events during discharge', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell undervoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'No. of cell overvoltage events', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Min Cell Temperature [°C]', 'datatype': 'INT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Power [cW]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Avg. Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Discharge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Max Charge Current [mA]', 'datatype': 'INT16', 'format': '', 'length': 2, 'multFactor': 1.0}]}
DEVICE_REPORTS_RKN_SYSTEM_PARAMETERS = 37
device_reports_rkn_system_parameters = {'name': 'RKN_SYSTEM_PARAMETERS', 'description': 'System parameters for the Rheo Knee 4', 'value': DEVICE_REPORTS_RKN_SYSTEM_PARAMETERS, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'reportDef': {'reportName': 'System Parameters'}}
DEVICE_REPORTS_RKN_BIOMETRIC_STATS = 38
device_reports_rkn_biometric_stats = {'name': 'RKN_BIOMETRIC_STATS', 'description': 'Report of collected absolute biometric statistics', 'value': DEVICE_REPORTS_RKN_BIOMETRIC_STATS, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'metadataDefs': [{'name': 'Database Version', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in LG', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in STAND', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SD', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SIT', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Bike triggers', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in LG', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in Stand', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SD', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Biking', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Kneeling', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Inactive', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in LG', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Walking Speed', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 0 - 2 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 2 - 3 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 3 - 4 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 4 - 5 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 5 - 6 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 6+ km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Saved', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Database Version', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in LG', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in STAND', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SD', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SIT', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Bike triggers', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in LG', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in Stand', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SD', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Biking', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Kneeling', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Inactive', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in LG', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Walking Speed', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 0 - 2 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 2 - 3 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 3 - 4 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 4 - 5 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 5 - 6 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 6+ km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Saved', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_B3C_EMC_STATISTIC_REPORT = 39
device_reports_b3c_emc_statistic_report = {'name': 'B3C_EMC_STATISTIC_REPORT', 'description': 'Report of sensor statistics during EMC Test', 'value': DEVICE_REPORTS_B3C_EMC_STATISTIC_REPORT, 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'reportName': 'EMC sensor statistics', 'tableName': 'EMC sensor statistics', 'tableDescription': 'EMC sensor statistics with time and id', 'columnDefs': [{'name': 'StartTime', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Sensor ID', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'TimeOfMinOccurance', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Minimum Value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'TimeOfMaxOccurance', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Maximum Value', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}}
DEVICE_REPORTS_RKN_APPLICATION_STATISTICS = 40
device_reports_rkn_application_statistics = {'name': 'RKN_APPLICATION_STATISTICS', 'description': 'Report of various measurements in Rheo Knee Main application', 'value': DEVICE_REPORTS_RKN_APPLICATION_STATISTICS, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'reportName': 'Application statistics', 'tableName': 'Application statistics', 'tableDescription': '', 'metadataDefs': [{'name': 'Anterior load cell offset deviation', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Posterior load cell offset deviation', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Estimated user weight', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 9', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 10', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 11', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 12', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 13', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 14', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 15', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 16', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 17', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 18', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 19', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 20', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Anterior load cell offset deviation', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Posterior load cell offset deviation', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Estimated user weight', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 9', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 10', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 11', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 12', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 13', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 14', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 15', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 16', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 17', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 18', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 19', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved 20', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_RKN_EVENT_LOG_REPORT = 41
device_reports_rkn_event_log_report = {'name': 'RKN_EVENT_LOG_REPORT', 'description': 'Report of events on the Rheo Knee 4', 'value': DEVICE_REPORTS_RKN_EVENT_LOG_REPORT, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'reportName': 'Event log', 'tableName': 'Events', 'tableDescription': 'Event logged by the system', 'columnDefs': [{'name': 'Timestamp', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Event code', 'datatype': 'UINT8', 'format': 'x', 'length': 1, 'multFactor': 1.0}, {'name': 'Parameter1', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Parameter2', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Parameter3', 'datatype': 'UINT8', 'format': '', 'length': 1, 'multFactor': 1.0}]}}
DEVICE_REPORTS_RKN_BIOMETRIC_STATS_SLR = 42
device_reports_rkn_biometric_stats_slr = {'name': 'RKN_BIOMETRIC_STATS_SLR', 'description': 'Report of collected relative biometric statistics', 'value': DEVICE_REPORTS_RKN_BIOMETRIC_STATS_SLR, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'metadataDefs': [{'name': 'Database Version', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in LG', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in STAND', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SD', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SIT', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Bike triggers', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in LG', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in Stand', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SD', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Biking', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Kneeling', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Inactive', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in LG', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Walking Speed', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 0 - 2 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 2 - 3 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 3 - 4 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 4 - 5 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 5 - 6 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 6+ km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Saved', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Database Version', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in LG', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in STAND', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SA', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SD', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in SIT', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Bike triggers', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Reserved', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in LG', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in Stand', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SIT', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SA', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in SD', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Biking', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Kneeling', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Inactive', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in LG', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Walking Speed', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 0 - 2 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 2 - 3 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 3 - 4 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 4 - 5 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 5 - 6 km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in 6+ km/h', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Saved', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_STEP_HISTORY_ACTIVITY_LOG = 43
device_reports_step_history_activity_log = {'name': 'STEP_HISTORY_ACTIVITY_LOG', 'description': 'Report of collected absolute biometric statistics', 'value': DEVICE_REPORTS_STEP_HISTORY_ACTIVITY_LOG, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'reportName': 'Activity log', 'tableName': 'Steps by hours', 'tableDescription': 'Steps logged by the system', 'metadataDefs': [{'name': 'Activity log reset date', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Activity log version', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Index', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}], 'columnDefs': [{'name': 'Timestamp', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Total', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Cyclic steps', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Activity log reset date', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Activity log version', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Index', 'datatype': 'UINT16', 'format': '', 'length': 2, 'multFactor': 1.0}]}
DEVICE_REPORTS_B3C_FATAL_LOG = 44
device_reports_b3c_fatal_log = {'name': 'B3C_FATAL_LOG', 'description': 'List of all fatal errors occurred in a B3C based device', 'value': DEVICE_REPORTS_B3C_FATAL_LOG, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'tableName': 'Log entries', 'tableDescription': 'Fatal log entries', 'columnDefs': [{'name': 'Timestamp', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Time Since Power-On [s]', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Fatal ID (Param0, Param1, Param2, Param3)', 'datatype': 'ENUM_DESCRIPTION:FATAL', 'format': '', 'length': 2, 'multFactor': 1.0}, {'name': 'Param 0', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Param 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Operating Mode', 'datatype': 'ENUM_DESCRIPTION:OPERATING_MODE', 'format': '', 'length': 1, 'multFactor': 1.0}, {'name': 'Reset Source', 'datatype': 'ENUM_DESCRIPTION:RESET_SOURCE', 'format': '', 'length': 1, 'multFactor': 1.0}]}}
DEVICE_REPORTS_RKN_UNEXPECTED_SHUTDOWNS = 45
device_reports_rkn_unexpected_shutdowns = {'name': 'RKN_UNEXPECTED_SHUTDOWNS', 'description': 'Report of unexpected shutdowns Rheo Knee Main application', 'value': DEVICE_REPORTS_RKN_UNEXPECTED_SHUTDOWNS, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'reportName': 'Unexpected Shutdowns', 'tableName': 'Unexpected Shutdowns', 'tableDescription': '', 'metadataDefs': [{'name': 'Variable 0', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 9', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 10', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 11', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 12', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}, 'report_definition': [{'name': 'Variable 0', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 1', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 2', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 3', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 4', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 5', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 6', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 7', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 8', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 9', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 10', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 11', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Variable 12', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}]}
DEVICE_REPORTS_B3C_BIOMETRIC_STATS = 46
device_reports_b3c_biometric_stats = {'name': 'B3C_BIOMETRIC_STATS', 'description': 'Report of collected absolute biometric statistics', 'value': DEVICE_REPORTS_B3C_BIOMETRIC_STATS, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'reportDef': {'tableName': 'Biometric statistics, Lifetime and since last reset', 'tableDescription': 'Biometric statistics', 'columnDefs': [{'name': 'Database Version', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in stand', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps walking', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in ramp descending', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in stair descent', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps in stair ascent', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Stand ups', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time standing', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time walking', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time sitting', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time inactive', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'AVG Stride Duration in walking', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Double supported sit downs', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Date Time Reset', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps at 0-2 km/h', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps at 2-3 km/h', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps at 3-4 km/h', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps at 4-5 km/h', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps at 5-6 km/h', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps at 6-7 km/h', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Steps at 7+ km/h', 'datatype': 'REAL32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time Of Save', 'datatype': 'DATETIME32', 'format': 'yyyy-MM-dd HH:mm:ss', 'length': 4, 'multFactor': 1.0}, {'name': 'Bike initaion counter', 'datatype': 'UINT32', 'format': '', 'length': 4, 'multFactor': 1.0}, {'name': 'Time in stair ascent', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in stair descent', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Biking', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time Kneeling', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Time in sitting down', 'datatype': 'UINT64', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 1', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 2', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 3', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 4', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 5', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 6', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 7', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 8', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 9', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 10', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 11', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 12', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 13', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 14', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 15', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 16', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 17', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 18', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 19', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}, {'name': 'Reserved 20', 'datatype': 'UINT32', 'format': '', 'multFactor': 1.0}]}}
DEVICE_REPORTS_B3C_BIOMETRIC_STATS_AND_STEP_HISTORY_ACTIVITY_LOG = 47
device_reports_b3c_biometric_stats_and_step_history_activity_log = {'name': 'B3C_BIOMETRIC_STATS_AND_STEP_HISTORY_ACTIVITY_LOG', 'description': 'Combined report', 'value': DEVICE_REPORTS_B3C_BIOMETRIC_STATS_AND_STEP_HISTORY_ACTIVITY_LOG, 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP'}
ACTION_TOOLBOX_FAIL_ERROR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 1]), byteorder='little')
action_toolbox_fail_error = {'name': 'TOOLBOX_FAIL_ERROR', 'description': 'Test action returning error', 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 1], 'parameters': [{'name': 'Error', 'description': 'The error to return', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 42}], 'value': ACTION_TOOLBOX_FAIL_ERROR}
ACTION_TOOLBOX_ITERATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 2]), byteorder='little')
action_toolbox_iterate = {'name': 'TOOLBOX_ITERATE', 'description': 'Test action iterating', 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 2], 'parameters': [{'name': 'Iterations', 'description': 'Number of iterations to perform', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 11}, {'name': 'DelayMs', 'description': 'Delay in milliseconds after each iteration', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 100}], 'value': ACTION_TOOLBOX_ITERATE}
ACTION_TOOLBOX_DATA = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_TOOLBOX_SERVER, 3]), byteorder='little')
action_toolbox_data = {'name': 'TOOLBOX_DATA', 'description': 'Test action returning data', 'valueBytes': ['DEVICE.TOOLBOX_SERVER', 3], 'parameters': [{'name': 'Data', 'description': '4 bytes of data to return', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 873647531}], 'value': ACTION_TOOLBOX_DATA}
ACTION_FACTORY_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 1]), byteorder='little')
action_factory_reset = {'name': 'FACTORY_RESET', 'description': 'Factory reset', 'valueBytes': ['DEVICE.BASE', 1], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP | DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_FACTORY_RESET}
ACTION_COUNTERS_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 2]), byteorder='little')
action_counters_reset = {'name': 'COUNTERS_RESET', 'description': 'Reset counters', 'valueBytes': ['DEVICE.BASE', 2], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_COUNTERS_RESET}
ACTION_SELF_TEST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 3]), byteorder='little')
action_self_test = {'name': 'SELF_TEST', 'description': 'Self test', 'valueBytes': ['DEVICE.BASE', 3], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP| DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_SELF_TEST}
ACTION_RTC_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 4]), byteorder='little')
action_rtc_set = {'name': 'RTC_SET', 'description': 'Set real time clock (RTC)', 'valueBytes': ['DEVICE.BASE', 4], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP| DEVICE_APPS.POWER_KNEE_DIAG_APP| DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP', 'parameters': [{'name': 'EPOC', 'description': 'Seconds since EPOC (1970-01-01 00:00).  If 0, current system time will be used', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}, {'name': 'Calibration', 'description': 'Calibration value for Proprio, 1=double stage calibration, 2=reset double stage calibration, any other value means no calibration', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 1}], 'value': ACTION_RTC_SET}
ACTION_IMU_CALIBRATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 5]), byteorder='little')
action_imu_calibrate = {'name': 'IMU_CALIBRATE', 'description': 'Calibrate IMU', 'valueBytes': ['DEVICE.BASE', 5], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_IMU_CALIBRATE}
ACTION_LOG_DOWNLOAD = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 6]), byteorder='little')
action_log_download = {'name': 'LOG_DOWNLOAD', 'description': 'Download logs', 'valueBytes': ['DEVICE.BASE', 6], 'value': ACTION_LOG_DOWNLOAD}
ACTION_AUTO_ADJUSTMENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 7]), byteorder='little')
action_auto_adjustment = {'name': 'AUTO_ADJUSTMENT', 'description': 'Perform auto adjustment', 'valueBytes': ['DEVICE.BASE', 7], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_AUTO_ADJUSTMENT}
ACTION_SENSORY_SYSTEM_CALIBRATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 8]), byteorder='little')
action_sensory_system_calibrate = {'name': 'SENSORY_SYSTEM_CALIBRATE', 'description': 'Calibrate sensory system', 'valueBytes': ['DEVICE.BASE', 8], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE_MAIN_APP', 'value': ACTION_SENSORY_SYSTEM_CALIBRATE}
ACTION_MEMORY_ERASE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 9]), byteorder='little')
action_memory_erase = {'name': 'MEMORY_ERASE', 'description': 'Erase memory', 'valueBytes': ['DEVICE.BASE', 9], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_MEMORY_ERASE}
ACTION_STEP_COUNT_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 10]), byteorder='little')
action_step_count_reset = {'name': 'STEP_COUNT_RESET', 'description': 'Reset step counters', 'valueBytes': ['DEVICE.BASE', 10], 'value': ACTION_STEP_COUNT_RESET}
ACTION_DEVICE_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 11]), byteorder='little')
action_device_reset = {'name': 'DEVICE_RESET', 'description': 'Reset device', 'valueBytes': ['DEVICE.BASE', 11], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_DEVICE_RESET}
ACTION_DEVICE_EMC_TEST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 12]), byteorder='little')
action_device_emc_test = {'name': 'DEVICE_EMC_TEST', 'description': 'EMC test', 'valueBytes': ['DEVICE.BASE', 12], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_DEVICE_EMC_TEST}
ACTION_LED_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 13]), byteorder='little')
action_led_set = {'name': 'LED_SET', 'description': 'Set the leds with RGB color value', 'valueBytes': ['DEVICE.BASE', 13], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP| DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP', 'parameters': [{'name': 'Led', 'description': 'Led number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'R', 'description': 'R of RGB', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 128}, {'name': 'G', 'description': 'G of RGB', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 128}, {'name': 'B', 'description': 'B of RGB', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 128}], 'value': ACTION_LED_SET}
ACTION_BUZZER_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 14]), byteorder='little')
action_buzzer_set = {'name': 'BUZZER_SET', 'description': 'Set the buzzer', 'valueBytes': ['DEVICE.BASE', 14], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP| DEVICE_APPS.POWER_KNEE_DIAG_APP| DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'On', 'description': 'Buzzer on', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}, {'name': 'DutyCycle', 'description': 'Duty cycle (0-100)', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 50}, {'name': 'Period', 'description': 'Period (0-10000)', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 500}], 'value': ACTION_BUZZER_SET}
ACTION_VIBRATOR_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 15]), byteorder='little')
action_vibrator_set = {'name': 'VIBRATOR_SET', 'description': 'Set the vibrator', 'valueBytes': ['DEVICE.BASE', 15], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'On', 'description': 'Vibrator on', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}, {'name': 'Intensity', 'description': 'Vibrator Intensity', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 50}, {'name': 'Pitch', 'description': 'Vibrator Pitch', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 500}], 'value': ACTION_VIBRATOR_SET}
ACTION_LOG_CLEAR_VARIABLES = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 16]), byteorder='little')
action_log_clear_variables = {'name': 'LOG_CLEAR_VARIABLES', 'description': 'Clear log flag from all variables', 'valueBytes': ['DEVICE.BASE', 16], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP | DEVICE_APPS.POWER_KNEE_MAIN_APP | DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_LOG_CLEAR_VARIABLES}
ACTION_PIN_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 17]), byteorder='little')
action_pin_set = {'name': 'PIN_SET', 'description': 'Set a pin value', 'valueBytes': ['DEVICE.BASE', 17], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP| DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP', 'parameters': [{'name': 'Port', 'description': 'Port number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Pin', 'description': 'Pin number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Value', 'description': 'Value', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Cpu', 'description': 'Cpu number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_PIN_SET}
ACTION_PIN_READ = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 18]), byteorder='little')
action_pin_read = {'name': 'PIN_READ', 'description': 'Read a pin value. Returns 0/1 for digital and raw count for analog', 'valueBytes': ['DEVICE.BASE', 18], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP| DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.BSMB_MAIN_APP', 'parameters': [{'name': 'Port', 'description': 'Port number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Pin', 'description': 'Pin number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Cpu', 'description': 'Cpu number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_PIN_READ}
ACTION_DEVICE_TURN_OFF = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 19]), byteorder='little')
action_device_turn_off = {'name': 'DEVICE_TURN_OFF', 'description': 'Turn off the device, shutoff, shutdown.', 'valueBytes': ['DEVICE.BASE', 19], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP|DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_DEVICE_TURN_OFF}
ACTION_DUMP_ALL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 20]), byteorder='little')
action_dump_all = {'name': 'DUMP_ALL', 'description': 'Have the device send all of its variables', 'valueBytes': ['DEVICE.BASE', 20], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_DUMP_ALL}
ACTION_DUMP_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 21]), byteorder='little')
action_dump_status = {'name': 'DUMP_STATUS', 'description': 'Have the device dump its status', 'valueBytes': ['DEVICE.BASE', 21], 'value': ACTION_DUMP_STATUS}
ACTION_DUMP_CONFIG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 22]), byteorder='little')
action_dump_config = {'name': 'DUMP_CONFIG', 'description': 'Have the device dump its config', 'valueBytes': ['DEVICE.BASE', 22], 'value': ACTION_DUMP_CONFIG}
ACTION_DUMP_STATISTICS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 23]), byteorder='little')
action_dump_statistics = {'name': 'DUMP_STATISTICS', 'description': 'Have the device dump its statistics', 'valueBytes': ['DEVICE.BASE', 23], 'value': ACTION_DUMP_STATISTICS}
ACTION_DEVICE_EMC_TEST_SENSORS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 24]), byteorder='little')
action_device_emc_test_sensors = {'name': 'DEVICE_EMC_TEST_SENSORS', 'description': 'Check sensor values during emc test', 'valueBytes': ['DEVICE.BASE', 24], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_DEVICE_EMC_TEST_SENSORS}
ACTION_LOG_CLEAR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 25]), byteorder='little')
action_log_clear = {'name': 'LOG_CLEAR', 'description': 'Clear out accumulated logs', 'valueBytes': ['DEVICE.BASE', 25], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP | DEVICE_APPS.POWER_KNEE_MAIN_APP | DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_LOG_CLEAR}
ACTION_SELF_TEST_THERMAL_CYCLING = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 26]), byteorder='little')
action_self_test_thermal_cycling = {'name': 'SELF_TEST_THERMAL_CYCLING', 'description': 'Performing extended self test during thermal cycling', 'valueBytes': ['DEVICE.BASE', 26], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_SELF_TEST_THERMAL_CYCLING}
ACTION_DELAY_HIGH_PRIORITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 27]), byteorder='little')
action_delay_high_priority = {'name': 'DELAY_HIGH_PRIORITY', 'description': 'Delay the system with high priority', 'valueBytes': ['DEVICE.BASE', 27], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_DELAY_HIGH_PRIORITY}
ACTION_DELAY_MEDIUM_PRIORITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 28]), byteorder='little')
action_delay_medium_priority = {'name': 'DELAY_MEDIUM_PRIORITY', 'description': 'Delay the system with medium priority', 'valueBytes': ['DEVICE.BASE', 28], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_DELAY_MEDIUM_PRIORITY}
ACTION_DELAY_LOW_PRIORITY = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 29]), byteorder='little')
action_delay_low_priority = {'name': 'DELAY_LOW_PRIORITY', 'description': 'Delay the system with low priority', 'valueBytes': ['DEVICE.BASE', 29], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_DELAY_LOW_PRIORITY}
ACTION_TEST_ISO22675 = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 30]), byteorder='little')
action_test_iso22675 = {'name': 'TEST_ISO22675', 'description': 'Test for ISO22675 machine', 'valueBytes': ['DEVICE.BASE', 30], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_TEST_ISO22675}
ACTION_DEVICE_EMC_TEST_WO_ANGLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 31]), byteorder='little')
action_device_emc_test_wo_angle = {'name': 'DEVICE_EMC_TEST_WO_ANGLE', 'description': 'EMC test without using the angle sensor', 'valueBytes': ['DEVICE.BASE', 31], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_DEVICE_EMC_TEST_WO_ANGLE}
ACTION_DEVICE_TEST_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 32]), byteorder='little')
action_device_test_mode = {'name': 'DEVICE_TEST_MODE', 'description': 'Enable/disable test mode for device', 'valueBytes': ['DEVICE.BASE', 32], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'parameters': [{'name': 'Enable', 'description': 'Enable test mode', 'datatype': 'DATATYPE.BOOL', 'defaultValue': False}], 'value': ACTION_DEVICE_TEST_MODE}
ACTION_B3C_MEMORY_READ = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 33]), byteorder='little')
action_b3c_memory_read = {'name': 'B3C_MEMORY_READ', 'description': 'Read from memory in B3C system', 'valueBytes': ['DEVICE.BASE', 33], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'MemoryId', 'description': 'Id of memory to test, EEPROM=1, LPDDR=2, Flash=3', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'BoardId', 'description': 'Id of board to test, Main=0, ACT=1, EXP=2', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Address', 'description': 'Memory address', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}], 'value': ACTION_B3C_MEMORY_READ}
ACTION_B3C_MEMORY_WRITE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 34]), byteorder='little')
action_b3c_memory_write = {'name': 'B3C_MEMORY_WRITE', 'description': 'Write to memory in B3C system', 'valueBytes': ['DEVICE.BASE', 34], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_BOOTLOADER|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'MemoryId', 'description': 'Id of memory to test, EEPROM=1, LPDDR=2, Flash=3', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 0}, {'name': 'BoardId', 'description': 'Id of board to test, Main=0, ACT=1, EXP=2', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 0}, {'name': 'Address', 'description': 'Memory address', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}, {'name': 'Data', 'description': 'Write value', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}], 'value': ACTION_B3C_MEMORY_WRITE}
ACTION_B3CMB_FLASH_ERASE_SECTOR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 35]), byteorder='little')
action_b3cmb_flash_erase_sector = {'name': 'B3CMB_FLASH_ERASE_SECTOR', 'description': 'Erase flash sectors', 'valueBytes': ['DEVICE.BASE', 35], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Sector', 'description': 'Sector number', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Number', 'description': 'Number of sectors to erase', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_B3CMB_FLASH_ERASE_SECTOR}
ACTION_RTC_READ = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 36]), byteorder='little')
action_rtc_read = {'name': 'RTC_READ', 'description': 'Read the onboard RTC', 'valueBytes': ['DEVICE.BASE', 36], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': ACTION_RTC_READ}
ACTION_B3C_MEMORY_TEST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 37]), byteorder='little')
action_b3c_memory_test = {'name': 'B3C_MEMORY_TEST', 'description': 'Test various onboard memories', 'valueBytes': ['DEVICE.BASE', 37], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'MemoryId', 'description': 'Id of memory to test, EEPROM=1, LPDDR=2, Flash=3', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'BoardId', 'description': 'Id of board to test, Main=0, ACT=1, EXP=2', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_B3C_MEMORY_TEST}
ACTION_B3C_SUPPLY_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 38]), byteorder='little')
action_b3c_supply_control = {'name': 'B3C_SUPPLY_CONTROL', 'description': 'Enable/disable supplies', 'valueBytes': ['DEVICE.BASE', 38], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Supp1v8', 'description': 'Enable 1v8 supply', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}, {'name': 'Supp3v3Act', 'description': 'Enable 3v3 actuator supply', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}, {'name': 'Supp3v3Exp', 'description': 'Enable 3v3 exapansion board supply', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}], 'value': ACTION_B3C_SUPPLY_CONTROL}
ACTION_B3C_SET_DEV_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 39]), byteorder='little')
action_b3c_set_dev_parameter = {'name': 'B3C_SET_DEV_PARAMETER', 'description': 'Update a development parameter', 'valueBytes': ['DEVICE.BASE', 39], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'DevParamId', 'description': 'The id of the dev param to set', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'DevParamValue', 'description': 'The new value of the dev param', 'datatype': 'DATATYPE.INT16', 'defaultValue': 0}], 'value': ACTION_B3C_SET_DEV_PARAMETER}
ACTION_B3C_GET_DEV_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 40]), byteorder='little')
action_b3c_get_dev_parameter = {'name': 'B3C_GET_DEV_PARAMETER', 'description': 'Read a development parameter', 'valueBytes': ['DEVICE.BASE', 40], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'DevParamId', 'description': 'The id of the dev param to get', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_B3C_GET_DEV_PARAMETER}
ACTION_ENABLE_SLEEP_MODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 41]), byteorder='little')
action_enable_sleep_mode = {'name': 'ENABLE_SLEEP_MODE', 'description': 'Enable sleep mode for device; UNSAFE', 'valueBytes': ['DEVICE.BASE', 41], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Sleep Mode', 'description': 'Sleep mode to enter', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_ENABLE_SLEEP_MODE}
ACTION_B3C_PEEK = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 42]), byteorder='little')
action_b3c_peek = {'name': 'B3C_PEEK', 'description': 'Peek at memory addresses', 'valueBytes': ['DEVICE.BASE', 42], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Address', 'description': 'Address to look at', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}], 'value': ACTION_B3C_PEEK}
ACTION_B3C_POKE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 43]), byteorder='little')
action_b3c_poke = {'name': 'B3C_POKE', 'description': 'Poke at memory addresses', 'valueBytes': ['DEVICE.BASE', 43], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Address', 'description': 'Address to change', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}, {'name': 'Data', 'description': 'Data to write', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}], 'value': ACTION_B3C_POKE}
ACTION_SET_EMULATOR_CONFIG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 44]), byteorder='little')
action_set_emulator_config = {'name': 'SET_EMULATOR_CONFIG', 'description': 'Configure an emulatable variable', 'valueBytes': ['DEVICE.BASE', 44], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'parameters': [{'name': 'Variable index', 'description': 'Index of the variable to be configured', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Flag', 'description': '0 = disable emulation, 1 = enable emulation and set value, 2 = disable all emulations', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'New value', 'description': 'New value for the emulated variable', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 0}], 'value': ACTION_SET_EMULATOR_CONFIG}
ACTION_B3C_VECTOR_INPUT_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 45]), byteorder='little')
action_b3c_vector_input_reset = {'name': 'B3C_VECTOR_INPUT_RESET', 'description': 'Resets the frame index.', 'valueBytes': ['DEVICE.BASE', 45], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_B3C_VECTOR_INPUT_RESET}
ACTION_B3C_VECTOR_INPUT_CLEAR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 46]), byteorder='little')
action_b3c_vector_input_clear = {'name': 'B3C_VECTOR_INPUT_CLEAR', 'description': 'Clears all frames from buffer.', 'valueBytes': ['DEVICE.BASE', 46], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_B3C_VECTOR_INPUT_CLEAR}
ACTION_B3C_VECTOR_INPUT_ADD_FRAME = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 47]), byteorder='little')
action_b3c_vector_input_add_frame = {'name': 'B3C_VECTOR_INPUT_ADD_FRAME', 'description': 'Add a frame to the vector input buffer.', 'valueBytes': ['DEVICE.BASE', 47], 'parameters': [{'name': 'Input 1', 'description': 'Value of input 1', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 0}, {'name': 'Input 2', 'description': 'Value of input 2', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 0}], 'value': ACTION_B3C_VECTOR_INPUT_ADD_FRAME}
ACTION_B3C_VECTOR_INPUT_GET_FRAME = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 48]), byteorder='little')
action_b3c_vector_input_get_frame = {'name': 'B3C_VECTOR_INPUT_GET_FRAME', 'description': 'Gets an indexed frame from the vector input buffer.', 'valueBytes': ['DEVICE.BASE', 48], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'parameters': [{'name': 'Frame number:', 'description': 'Get an indexed frame from the vector input buffer.', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 0}], 'value': ACTION_B3C_VECTOR_INPUT_GET_FRAME}
ACTION_B3C_VECTOR_INPUT_START = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 49]), byteorder='little')
action_b3c_vector_input_start = {'name': 'B3C_VECTOR_INPUT_START', 'description': 'Start using vector inputs.', 'valueBytes': ['DEVICE.BASE', 49], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_B3C_VECTOR_INPUT_START}
ACTION_B3C_VECTOR_INPUT_STOP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 50]), byteorder='little')
action_b3c_vector_input_stop = {'name': 'B3C_VECTOR_INPUT_STOP', 'description': 'Stops using vector inputs.', 'valueBytes': ['DEVICE.BASE', 50], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_B3C_VECTOR_INPUT_STOP}
ACTION_B3C_SENSOR_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 51]), byteorder='little')
action_b3c_sensor_control = {'name': 'B3C_SENSOR_CONTROL', 'description': 'Start and stop sensor reads.', 'valueBytes': ['DEVICE.BASE', 51], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'SensorGroupID', 'description': 'Sensor to control', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 255}, {'name': 'EnableSensor', 'description': 'True to start, false to stop', 'datatype': 'DATATYPE.BOOL', 'defaultValue': False}, {'name': 'EnableStatistics', 'description': 'True to start statistics for the sensor', 'datatype': 'DATATYPE.BOOL', 'defaultValue': False}], 'value': ACTION_B3C_SENSOR_CONTROL}
ACTION_B3C_CLEAR_FATAL_LOG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 52]), byteorder='little')
action_b3c_clear_fatal_log = {'name': 'B3C_CLEAR_FATAL_LOG', 'description': 'Clear all fatals from the fatal log', 'valueBytes': ['DEVICE.BASE', 52], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': ACTION_B3C_CLEAR_FATAL_LOG}
ACTION_B3C_SET_SERIAL_NUMBER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 53]), byteorder='little')
action_b3c_set_serial_number = {'name': 'B3C_SET_SERIAL_NUMBER', 'description': 'Sets the device serial number.', 'valueBytes': ['DEVICE.BASE', 53], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Serial Number: ', 'description': 'New device serial number', 'datatype': 'DATATYPE.TEXT', 'length': 6, 'defaultValue': '520000'}], 'value': ACTION_B3C_SET_SERIAL_NUMBER}
ACTION_B3C_SET_BLE_PASSCODE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 54]), byteorder='little')
action_b3c_set_ble_passcode = {'name': 'B3C_SET_BLE_PASSCODE', 'description': 'Sets the device BLE passcode.', 'valueBytes': ['DEVICE.BASE', 54], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Passcode: ', 'description': 'New BLE passcode', 'datatype': 'DATATYPE.TEXT', 'length': 6, 'defaultValue': '520000'}], 'value': ACTION_B3C_SET_BLE_PASSCODE}
ACTION_B3C_BULK_MECHANISM_TEST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 55]), byteorder='little')
action_b3c_bulk_mechanism_test = {'name': 'B3C_BULK_MECHANISM_TEST', 'description': 'Sets the number of packets in auto-generated bulk test report', 'valueBytes': ['DEVICE.BASE', 55], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'parameters': [{'name': 'Packets', 'description': 'Number of Bulk body packets in report', 'datatype': 'DATATYPE.UINT32', 'length': 4, 'defaultValue': 1000}], 'value': ACTION_B3C_BULK_MECHANISM_TEST}
ACTION_B3C_EMC_TEST_SET_SENSOR_RANGE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 56]), byteorder='little')
action_b3c_emc_test_set_sensor_range = {'name': 'B3C_EMC_TEST_SET_SENSOR_RANGE', 'description': 'Sets the allowed sensor range for EMC testing', 'valueBytes': ['DEVICE.BASE', 56], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'parameters': [{'name': 'Input ID', 'description': 'The input ID to set the range', 'datatype': 'DATATYPE.UINT8', 'length': 1, 'defaultValue': 0}, {'name': 'Min value', 'description': 'Minimum allowed value', 'datatype': 'DATATYPE.REAL32', 'length': 4, 'defaultValue': 0}, {'name': 'Max value', 'description': 'Maximum allowed value', 'datatype': 'DATATYPE.REAL32', 'length': 4, 'defaultValue': 0}, {'name': 'Max count', 'description': 'Maximum allowed values out of range', 'datatype': 'DATATYPE.UINT16', 'length': 2, 'defaultValue': 0}], 'value': ACTION_B3C_EMC_TEST_SET_SENSOR_RANGE}
ACTION_B3C_EMC_TEST_START = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 57]), byteorder='little')
action_b3c_emc_test_start = {'name': 'B3C_EMC_TEST_START', 'description': 'Starts monitoring sensor values', 'valueBytes': ['DEVICE.BASE', 57], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_B3C_EMC_TEST_START}
ACTION_B3C_EMC_TEST_STOP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 58]), byteorder='little')
action_b3c_emc_test_stop = {'name': 'B3C_EMC_TEST_STOP', 'description': 'Stops monitoring sensor values', 'valueBytes': ['DEVICE.BASE', 58], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_B3C_EMC_TEST_STOP}
ACTION_B3C_SENSOR_SAMPLING_CONFIG = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 59]), byteorder='little')
action_b3c_sensor_sampling_config = {'name': 'B3C_SENSOR_SAMPLING_CONFIG', 'description': 'Configures the sampling rate of a sensor', 'valueBytes': ['DEVICE.BASE', 59], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'SensorGroupID', 'description': 'Sensor to configure', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 255}, {'name': 'SamplingRate', 'description': 'Temporary sampling rate to use', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 1}], 'value': ACTION_B3C_SENSOR_SAMPLING_CONFIG}
ACTION_LED_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 60]), byteorder='little')
action_led_control = {'name': 'LED_CONTROL', 'description': 'Base control for the LEDs', 'valueBytes': ['DEVICE.BASE', 60], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Color', 'description': '0 = No color, 1 = R, 2 = G, 3 = B, 4 = Y, 5 = O, 6 = W', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Intensity', 'description': 'Intensity of the LED from 0% to 100%', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 50}], 'value': ACTION_LED_CONTROL}
ACTION_B3C_SET_USER_STATISTICS_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 61]), byteorder='little')
action_b3c_set_user_statistics_parameter = {'name': 'B3C_SET_USER_STATISTICS_PARAMETER', 'description': 'Update a parameter in the user statistics database', 'valueBytes': ['DEVICE.BASE', 61], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Parameter', 'description': 'Parameter to update', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 255}, {'name': 'Value', 'description': 'New value of parameter', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 1}, {'name': 'Time value', 'description': 'New value of a timing parameter', 'datatype': 'DATATYPE.UINT64', 'defaultValue': 1}], 'value': ACTION_B3C_SET_USER_STATISTICS_PARAMETER}
ACTION_B3C_GET_SYSTEM_STAT_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 62]), byteorder='little')
action_b3c_get_system_stat_parameter = {'name': 'B3C_GET_SYSTEM_STAT_PARAMETER', 'description': 'Read a parameter from the system statistics database', 'valueBytes': ['DEVICE.BASE', 62], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Parameter', 'description': 'Parameter to read', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 255}], 'value': ACTION_B3C_GET_SYSTEM_STAT_PARAMETER}
ACTION_B3C_SET_SYSTEM_STAT_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 63]), byteorder='little')
action_b3c_set_system_stat_parameter = {'name': 'B3C_SET_SYSTEM_STAT_PARAMETER', 'description': 'Update a parameter in the system statistics database', 'valueBytes': ['DEVICE.BASE', 63], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Parameter', 'description': 'Parameter to update', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 255}, {'name': 'Value', 'description': 'New value of parameter', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 1}], 'value': ACTION_B3C_SET_SYSTEM_STAT_PARAMETER}
ACTION_B3C_RESET_DATABASE_FLASH_CONTENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 64]), byteorder='little')
action_b3c_reset_database_flash_content = {'name': 'B3C_RESET_DATABASE_FLASH_CONTENT', 'description': 'This action will erase all databases in flash.', 'valueBytes': ['DEVICE.BASE', 64], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Database Index', 'description': 'Index of database to erase, -1 = all databases', 'datatype': 'DATATYPE.INT8', 'defaultValue': 127}], 'value': ACTION_B3C_RESET_DATABASE_FLASH_CONTENT}
ACTION_B3C_GET_DATABASE_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 65]), byteorder='little')
action_b3c_get_database_status = {'name': 'B3C_GET_DATABASE_STATUS', 'description': 'Retrieve the status of a database', 'valueBytes': ['DEVICE.BASE', 65], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Database Index', 'description': 'Index of database', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_B3C_GET_DATABASE_STATUS}
ACTION_STEP_COUNT_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 66]), byteorder='little')
action_step_count_set = {'name': 'STEP_COUNT_SET', 'description': 'Set device step count to the provided value', 'valueBytes': ['DEVICE.BASE', 66], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'parameters': [{'name': 'Step count', 'description': 'New step count value', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}], 'value': ACTION_STEP_COUNT_SET}
ACTION_SERVICE_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 67]), byteorder='little')
action_service_reset = {'name': 'SERVICE_RESET', 'description': 'Service reset', 'valueBytes': ['DEVICE.BASE', 67], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_SERVICE_RESET}
ACTION_BATTERY_LED_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BASE, 68]), byteorder='little')
action_battery_led_control = {'name': 'BATTERY_LED_CONTROL', 'description': 'Base control for the battery LEDs', 'valueBytes': ['DEVICE.BASE', 68], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Led Nr', 'description': '0 = No light, 1 = Led 1, 2 = Led 2, 3 = Led 3, 4 = Led 4, 5 = Led 5', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Intensity', 'description': 'Intensity of the LED from 0% to 100%', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 50}], 'value': ACTION_BATTERY_LED_CONTROL}
ACTION_MOTOR_MOVE_UP = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 1]), byteorder='little')
action_motor_move_up = {'name': 'MOTOR_MOVE_UP', 'description': 'Move motor up', 'valueBytes': ['DEVICE.FOOT', 1], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'parameters': [{'name': 'MilliDegrees', 'description': 'How many millidegrees to move', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 1000}], 'value': ACTION_MOTOR_MOVE_UP}
ACTION_MOTOR_MOVE_DOWN = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 2]), byteorder='little')
action_motor_move_down = {'name': 'MOTOR_MOVE_DOWN', 'description': 'Move motor down', 'valueBytes': ['DEVICE.FOOT', 2], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'parameters': [{'name': 'MilliDegrees', 'description': 'How many millidegrees to move', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 1000}], 'value': ACTION_MOTOR_MOVE_DOWN}
ACTION_MOTOR_CALIBRATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 3]), byteorder='little')
action_motor_calibrate = {'name': 'MOTOR_CALIBRATE', 'description': 'Calibrate modor', 'valueBytes': ['DEVICE.FOOT', 3], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_MOTOR_CALIBRATE}
ACTION_HEEL_HEIGHT_CALIBRATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 4]), byteorder='little')
action_heel_height_calibrate = {'name': 'HEEL_HEIGHT_CALIBRATE', 'description': 'Calibrate heel height', 'valueBytes': ['DEVICE.FOOT', 4], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_HEEL_HEIGHT_CALIBRATE}
ACTION_HEEL_HEIGHT_BAREFOOT_CALIBRATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 5]), byteorder='little')
action_heel_height_barefoot_calibrate = {'name': 'HEEL_HEIGHT_BAREFOOT_CALIBRATE', 'description': 'Calibrate barefoot heel height', 'valueBytes': ['DEVICE.FOOT', 5], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_HEEL_HEIGHT_BAREFOOT_CALIBRATE}
ACTION_HEEL_HEIGHT_SHOE_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 6]), byteorder='little')
action_heel_height_shoe_set = {'name': 'HEEL_HEIGHT_SHOE_SET', 'description': 'Set shoe heel height', 'valueBytes': ['DEVICE.FOOT', 6], 'value': ACTION_HEEL_HEIGHT_SHOE_SET}
ACTION_MOTOR_FULL_RANGE_MOVEMENT = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 7]), byteorder='little')
action_motor_full_range_movement = {'name': 'MOTOR_FULL_RANGE_MOVEMENT', 'description': 'Move the motor full range', 'valueBytes': ['DEVICE.FOOT', 7], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'parameters': [{'name': 'Count', 'description': 'How many times to move', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 100}], 'value': ACTION_MOTOR_FULL_RANGE_MOVEMENT}
ACTION_HEEL_HEIGHT_SET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 8]), byteorder='little')
action_heel_height_set = {'name': 'HEEL_HEIGHT_SET', 'description': 'Set the heelheight in millidegrees', 'valueBytes': ['DEVICE.FOOT', 8], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'parameters': [{'name': 'MilliDegrees', 'description': 'Heel height in millidegrees', 'datatype': 'DATATYPE.UINT16', 'defaultValue': 10}], 'value': ACTION_HEEL_HEIGHT_SET}
ACTION_MOTOR_MOVE_ON = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 9]), byteorder='little')
action_motor_move_on = {'name': 'MOTOR_MOVE_ON', 'description': 'Move motor indefinitely to test electronic hardware', 'valueBytes': ['DEVICE.FOOT', 9], 'value': ACTION_MOTOR_MOVE_ON}
ACTION_FLAT_WALK_CALIBRATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_FOOT, 10]), byteorder='little')
action_flat_walk_calibration = {'name': 'FLAT_WALK_CALIBRATION', 'description': 'Flat walk calibration', 'valueBytes': ['DEVICE.FOOT', 10], 'supportFlags': 'DEVICE_APPS.PROPRIO_FOOT_MAIN_APP', 'value': ACTION_FLAT_WALK_CALIBRATION}
ACTION_PKM_MOTOR_DRIVE_POWER_STATUS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 1]), byteorder='little')
action_pkm_motor_drive_power_status = {'name': 'PKM_MOTOR_DRIVE_POWER_STATUS', 'description': 'Check on the power status of the motor and the inrush status', 'valueBytes': ['DEVICE.POWER_KNEE', 1], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': ACTION_PKM_MOTOR_DRIVE_POWER_STATUS}
ACTION_PKM_MOTOR_POWER_ENABLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 2]), byteorder='little')
action_pkm_motor_power_enable = {'name': 'PKM_MOTOR_POWER_ENABLE', 'description': 'Power settings for the PKM motor', 'valueBytes': ['DEVICE.POWER_KNEE', 2], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Enable', 'description': 'True to enable, false to disable', 'datatype': 'DATATYPE.BOOL', 'defaultValue': False}], 'value': ACTION_PKM_MOTOR_POWER_ENABLE}
ACTION_PKM_DRIVE_MOTOR = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 3]), byteorder='little')
action_pkm_drive_motor = {'name': 'PKM_DRIVE_MOTOR', 'description': 'Drive motor with a set torque value', 'valueBytes': ['DEVICE.POWER_KNEE', 3], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Setpoint', 'description': 'Torque setpoint to motor, range +/-7000 (scaled by 100)', 'datatype': 'DATATYPE.INT32', 'defaultValue': 0}], 'value': ACTION_PKM_DRIVE_MOTOR}
ACTION_PKM_MOTOR_DRIVER_READ = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 4]), byteorder='little')
action_pkm_motor_driver_read = {'name': 'PKM_MOTOR_DRIVER_READ', 'description': 'Read a setting from the trinamic gate driver', 'valueBytes': ['DEVICE.POWER_KNEE', 4], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Driver', 'description': 'Foc controller=1 or gate driver=2', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Address', 'description': 'Address to read from', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_PKM_MOTOR_DRIVER_READ}
ACTION_PKM_MOTOR_DRIVER_WRITE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 5]), byteorder='little')
action_pkm_motor_driver_write = {'name': 'PKM_MOTOR_DRIVER_WRITE', 'description': 'Write a setting to the motor driver', 'valueBytes': ['DEVICE.POWER_KNEE', 5], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Driver', 'description': 'Foc controller=1 or gate driver=2', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Address', 'description': 'Address to write to', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Value', 'description': 'Value to write to drive', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}], 'value': ACTION_PKM_MOTOR_DRIVER_WRITE}
ACTION_PKM_SET_HW_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 6]), byteorder='little')
action_pkm_set_hw_parameter = {'name': 'PKM_SET_HW_PARAMETER', 'description': 'Update a HardWare parameter', 'valueBytes': ['DEVICE.POWER_KNEE', 6], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Id', 'description': 'The id of the HW param to set', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Value', 'description': 'The new value of the HW param', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 0}], 'value': ACTION_PKM_SET_HW_PARAMETER}
ACTION_PKM_GET_HW_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 7]), byteorder='little')
action_pkm_get_hw_parameter = {'name': 'PKM_GET_HW_PARAMETER', 'description': 'Read a HardWare parameter', 'valueBytes': ['DEVICE.POWER_KNEE', 7], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP|DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Id', 'description': 'The id of the HW param to get', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_PKM_GET_HW_PARAMETER}
ACTION_PKM_SET_GCS_COMP_PARAMS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 9]), byteorder='little')
action_pkm_set_gcs_comp_params = {'name': 'PKM_SET_GCS_COMP_PARAMS', 'description': 'Transfer compensation parameters for a GCS sensor from Hw params to sensor memory', 'valueBytes': ['DEVICE.POWER_KNEE', 9], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': ACTION_PKM_SET_GCS_COMP_PARAMS}
ACTION_PKM_GET_GCS_COMP_PARAMS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 10]), byteorder='little')
action_pkm_get_gcs_comp_params = {'name': 'PKM_GET_GCS_COMP_PARAMS', 'description': 'Transfer compensation parameters for a GCS sensor from sensor memory to Hw params', 'valueBytes': ['DEVICE.POWER_KNEE', 10], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': ACTION_PKM_GET_GCS_COMP_PARAMS}
ACTION_PKM_BIOMETRIC_STATS_SLR_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 11]), byteorder='little')
action_pkm_biometric_stats_slr_reset = {'name': 'PKM_BIOMETRIC_STATS_SLR_RESET', 'description': 'Resets the biometric stats relative database.', 'valueBytes': ['DEVICE.POWER_KNEE', 11], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': ACTION_PKM_BIOMETRIC_STATS_SLR_RESET}
ACTION_PKM_USER_PARAMETERS_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 12]), byteorder='little')
action_pkm_user_parameters_reset = {'name': 'PKM_USER_PARAMETERS_RESET', 'description': 'Resets the user parameters to default.', 'valueBytes': ['DEVICE.POWER_KNEE', 12], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': ACTION_PKM_USER_PARAMETERS_RESET}
ACTION_PKM_CT_OFFSET_CALIBRATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 13]), byteorder='little')
action_pkm_ct_offset_calibration = {'name': 'PKM_CT_OFFSET_CALIBRATION', 'description': 'Estimate the ofset value for the CT sensor', 'valueBytes': ['DEVICE.POWER_KNEE', 13], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'value': ACTION_PKM_CT_OFFSET_CALIBRATION}
ACTION_PKM_MOTOR_SPEED_CHECK = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 14]), byteorder='little')
action_pkm_motor_speed_check = {'name': 'PKM_MOTOR_SPEED_CHECK', 'description': 'Check the speed of the motor', 'valueBytes': ['DEVICE.POWER_KNEE', 14], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Torque value', 'description': 'Torque value to run the speed check on', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 6}], 'value': ACTION_PKM_MOTOR_SPEED_CHECK}
ACTION_PKM_MOTOR_PROFILE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 15]), byteorder='little')
action_pkm_motor_profile = {'name': 'PKM_MOTOR_PROFILE', 'description': 'Do a motor profile sweep. WARNING: DO NOT RUN THIS WITH THE THIGH SENSOR PLACED', 'valueBytes': ['DEVICE.POWER_KNEE', 15], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Torque value', 'description': 'Torque value to run the speed check on', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 8}], 'value': ACTION_PKM_MOTOR_PROFILE}
ACTION_PKM_APPLICATION_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 16]), byteorder='little')
action_pkm_application_reset = {'name': 'PKM_APPLICATION_RESET', 'description': 'Power off the application, making it start again from bootloader', 'valueBytes': ['DEVICE.POWER_KNEE', 16], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_MAIN_APP', 'value': ACTION_PKM_APPLICATION_RESET}
ACTION_PKM_GET_APPLICATION_STAT_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 17]), byteorder='little')
action_pkm_get_application_stat_parameter = {'name': 'PKM_GET_APPLICATION_STAT_PARAMETER', 'description': 'Read a parameter from the application statistics database', 'valueBytes': ['DEVICE.POWER_KNEE', 17], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Parameter', 'description': 'Parameter to read', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 255}], 'value': ACTION_PKM_GET_APPLICATION_STAT_PARAMETER}
ACTION_PKM_SET_APPLICATION_STAT_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_POWER_KNEE, 18]), byteorder='little')
action_pkm_set_application_stat_parameter = {'name': 'PKM_SET_APPLICATION_STAT_PARAMETER', 'description': 'Update a parameter in the application statistics database', 'valueBytes': ['DEVICE.POWER_KNEE', 18], 'supportFlags': 'DEVICE_APPS.POWER_KNEE_DIAG_APP', 'parameters': [{'name': 'Parameter', 'description': 'Parameter to update', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 255}, {'name': 'Value', 'description': 'New value of parameter', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 1}], 'value': ACTION_PKM_SET_APPLICATION_STAT_PARAMETER}
ACTION_RKN_SET_HW_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 1]), byteorder='little')
action_rkn_set_hw_parameter = {'name': 'RKN_SET_HW_PARAMETER', 'description': 'Update a HardWare parameter', 'valueBytes': ['DEVICE.RHEO_KNEE', 1], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Id', 'description': 'The id of the HW param to set', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Value', 'description': 'The new value of the HW param', 'datatype': 'DATATYPE.REAL32', 'defaultValue': 0}], 'value': ACTION_RKN_SET_HW_PARAMETER}
ACTION_RKN_GET_HW_PARAMETER = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 2]), byteorder='little')
action_rkn_get_hw_parameter = {'name': 'RKN_GET_HW_PARAMETER', 'description': 'Read a HardWare parameter', 'valueBytes': ['DEVICE.RHEO_KNEE', 2], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP|DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Id', 'description': 'The id of the HW param to get', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_RKN_GET_HW_PARAMETER}
ACTION_RKN_KA_CALIBRATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 3]), byteorder='little')
action_rkn_ka_calibration = {'name': 'RKN_KA_CALIBRATION', 'description': 'Estimate the ofset value for the CT sensor', 'valueBytes': ['DEVICE.RHEO_KNEE', 3], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': ACTION_RKN_KA_CALIBRATION}
ACTION_RKN_LC_POSTERIOR_CALIBRATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 4]), byteorder='little')
action_rkn_lc_posterior_calibration = {'name': 'RKN_LC_POSTERIOR_CALIBRATION', 'description': 'Estimate the offset value of the back loadcell', 'valueBytes': ['DEVICE.RHEO_KNEE', 4], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': ACTION_RKN_LC_POSTERIOR_CALIBRATION}
ACTION_RKN_LC_ANTERIOR_CALIBRATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 5]), byteorder='little')
action_rkn_lc_anterior_calibration = {'name': 'RKN_LC_ANTERIOR_CALIBRATION', 'description': 'Estimate the offset value of the front loadcell', 'valueBytes': ['DEVICE.RHEO_KNEE', 5], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_RKN_LC_ANTERIOR_CALIBRATION}
ACTION_RKN_HBDRV_READ = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 6]), byteorder='little')
action_rkn_hbdrv_read = {'name': 'RKN_HBDRV_READ', 'description': 'Read a setting from the H-bridge controller', 'valueBytes': ['DEVICE.RHEO_KNEE', 6], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Address', 'description': 'Address to read from', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_RKN_HBDRV_READ}
ACTION_RKN_HBDRV_WRITE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 7]), byteorder='little')
action_rkn_hbdrv_write = {'name': 'RKN_HBDRV_WRITE', 'description': 'Write a setting to the H-bridge controller', 'valueBytes': ['DEVICE.RHEO_KNEE', 7], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Address', 'description': 'Address to write to', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Value', 'description': 'Value to write to address', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}], 'value': ACTION_RKN_HBDRV_WRITE}
ACTION_RKN_PID_WRITE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 8]), byteorder='little')
action_rkn_pid_write = {'name': 'RKN_PID_WRITE', 'description': 'Write a setting to the PID controller', 'valueBytes': ['DEVICE.RHEO_KNEE', 8], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Mode', 'description': 'Mode: 1 (direct access), 2 (loop-mode)', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Set-point', 'description': 'Set point, calculating in mA', 'datatype': 'DATATYPE.UINT32', 'defaultValue': 0}, {'name': 'Direction', 'description': 'Direction of the current', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_RKN_PID_WRITE}
ACTION_RKN_SUPPLY_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 9]), byteorder='little')
action_rkn_supply_control = {'name': 'RKN_SUPPLY_CONTROL', 'description': 'Enable/disable supplies', 'valueBytes': ['DEVICE.RHEO_KNEE', 9], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Supp3v3AN', 'description': 'Enable 3V3 Analog supply', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}, {'name': 'Supp3v3DIG', 'description': 'Enable 3v3 Digital supply', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}, {'name': 'Supp3v3LCB', 'description': 'Enable 3v3 Loadcell board supply', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}], 'value': ACTION_RKN_SUPPLY_CONTROL}
ACTION_RKN_CHG_CONTROL = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 10]), byteorder='little')
action_rkn_chg_control = {'name': 'RKN_CHG_CONTROL', 'description': 'Enable/disable supplies', 'valueBytes': ['DEVICE.RHEO_KNEE', 10], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'EnableChg', 'description': 'Enable charging', 'datatype': 'DATATYPE.BOOL', 'defaultValue': True}], 'value': ACTION_RKN_CHG_CONTROL}
ACTION_RKN_DEGAUSS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 11]), byteorder='little')
action_rkn_degauss = {'name': 'RKN_DEGAUSS', 'description': 'Action to degauss the rheo knee actuator', 'valueBytes': ['DEVICE.RHEO_KNEE', 11], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP|DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_RKN_DEGAUSS}
ACTION_RKN_TORQUE_TEST = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 12]), byteorder='little')
action_rkn_torque_test = {'name': 'RKN_TORQUE_TEST', 'description': 'Action for torque test for rheo knee 4', 'valueBytes': ['DEVICE.RHEO_KNEE', 12], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Dutycycle', 'description': 'Dutycycle [0-100]', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Direction', 'description': 'Direction of the current', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_RKN_TORQUE_TEST}
ACTION_RKN_IMU_CALIBRATION = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 13]), byteorder='little')
action_rkn_imu_calibration = {'name': 'RKN_IMU_CALIBRATION', 'description': 'Estimate the gain value for the IMU APPLICATIONS', 'valueBytes': ['DEVICE.RHEO_KNEE', 13], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'parameters': [{'name': 'Application', 'description': 'Acc = 0, Grav = 1, Gyro = 2, LinAcc = 3', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'X-axis', 'description': 'Gain for X-axis', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Y-axis', 'description': 'Gain for Y-axis', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}, {'name': 'Z-axis', 'description': 'Gain for Z-axis', 'datatype': 'DATATYPE.UINT8', 'defaultValue': 0}], 'value': ACTION_RKN_IMU_CALIBRATION}
ACTION_RKN_BIOMETRIC_STATS_SLR_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 14]), byteorder='little')
action_rkn_biometric_stats_slr_reset = {'name': 'RKN_BIOMETRIC_STATS_SLR_RESET', 'description': 'Resets the biometric stats relative database.', 'valueBytes': ['DEVICE.RHEO_KNEE', 14], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_RKN_BIOMETRIC_STATS_SLR_RESET}
ACTION_RKN_USER_PARAMETERS_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 15]), byteorder='little')
action_rkn_user_parameters_reset = {'name': 'RKN_USER_PARAMETERS_RESET', 'description': 'Resets the user parameters to default.', 'valueBytes': ['DEVICE.RHEO_KNEE', 15], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_RKN_USER_PARAMETERS_RESET}
ACTION_RKN_APPLICATION_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 16]), byteorder='little')
action_rkn_application_reset = {'name': 'RKN_APPLICATION_RESET', 'description': 'Power off the application, making it start again from bootloader', 'valueBytes': ['DEVICE.RHEO_KNEE', 16], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_RKN_APPLICATION_RESET}
ACTION_RKN_CALIBRATE_ADC_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 17]), byteorder='little')
action_rkn_calibrate_adc_offset = {'name': 'RKN_CALIBRATE_ADC_OFFSET', 'description': 'offset calibration on the coil current adc', 'valueBytes': ['DEVICE.RHEO_KNEE', 17], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP', 'value': ACTION_RKN_CALIBRATE_ADC_OFFSET}
ACTION_RKN_GET_ADC_OFFSET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_RHEO_KNEE, 18]), byteorder='little')
action_rkn_get_adc_offset = {'name': 'RKN_GET_ADC_OFFSET', 'description': 'get the offset of coil current', 'valueBytes': ['DEVICE.RHEO_KNEE', 18], 'supportFlags': 'DEVICE_APPS.RHEO_KNEE4_DIAG_APP | DEVICE_APPS.RHEO_KNEE4_MAIN_APP', 'value': ACTION_RKN_GET_ADC_OFFSET}
ACTION_APO_SYNC_ENABLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 1]), byteorder='little')
action_apo_sync_enable = {'name': 'APO_SYNC_ENABLE', 'description': 'Enables synchonization to the gait', 'valueBytes': ['DEVICE.APO', 1], 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': ACTION_APO_SYNC_ENABLE}
ACTION_APO_SYNC_DISABLE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 2]), byteorder='little')
action_apo_sync_disable = {'name': 'APO_SYNC_DISABLE', 'description': 'Disables synchonization to the gait', 'valueBytes': ['DEVICE.APO', 2], 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': ACTION_APO_SYNC_DISABLE}
ACTION_APO_SYNC_RESET = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 3]), byteorder='little')
action_apo_sync_reset = {'name': 'APO_SYNC_RESET', 'description': 'Resets the synchronization', 'valueBytes': ['DEVICE.APO', 3], 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': ACTION_APO_SYNC_RESET}
ACTION_APO_UPDATE_ASSIST_PROFILE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_APO, 4]), byteorder='little')
action_apo_update_assist_profile = {'name': 'APO_UPDATE_ASSIST_PROFILE', 'description': 'Update assist profile according to assist variables', 'valueBytes': ['DEVICE.APO', 4], 'supportFlags': 'DEVICE_APPS.APO_MAIN_APP', 'value': ACTION_APO_UPDATE_ASSIST_PROFILE}
ACTION_CALIBRATE = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 1]), byteorder='little')
action_calibrate = {'name': 'CALIBRATE', 'description': 'Calibrate', 'valueBytes': ['DEVICE.BSMB', 1], 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_CALIBRATE}
ACTION_CLEAR_ALL_BONDS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 2]), byteorder='little')
action_clear_all_bonds = {'name': 'CLEAR_ALL_BONDS', 'description': 'Clear all bonds', 'valueBytes': ['DEVICE.BSMB', 2], 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_CLEAR_ALL_BONDS}
ACTION_CLEAR_PERIPHERAL_BONDS = int.from_bytes(bytearray(v & 0xff for v in [DEVICE_BSMB, 3]), byteorder='little')
action_clear_peripheral_bonds = {'name': 'CLEAR_PERIPHERAL_BONDS', 'description': 'Clear peripheral bonds', 'valueBytes': ['DEVICE.BSMB', 3], 'supportFlags': 'DEVICE_APPS.BSMB_MAIN_APP', 'value': ACTION_CLEAR_PERIPHERAL_BONDS}
BLE_UUID_PART10 = 1610
ble_uuid_part10 = {'name': 'PART10', 'description': 'XXXXxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx', 'value': BLE_UUID_PART10}
BLE_UUID_PART2 = 111
ble_uuid_part2 = {'name': 'PART2', 'description': 'xxxxxxxx-XXXX-xxxx-xxxx-xxxxxxxxxxxxxxxx', 'value': BLE_UUID_PART2}
BLE_UUID_PART3 = 899
ble_uuid_part3 = {'name': 'PART3', 'description': 'xxxxxxxx-xxxx-XXXX-xxxx-xxxxxxxxxxxxxxxx', 'value': BLE_UUID_PART3}
BLE_UUID_PART4 = 2503
ble_uuid_part4 = {'name': 'PART4', 'description': 'xxxxxxxx-xxxx-xxxx-XXXX-xxxxxxxxxxxxxxxx', 'value': BLE_UUID_PART4}
BLE_UUID_PART50 = 732905
ble_uuid_part50 = {'name': 'PART50', 'description': 'xxxxxxxx-xxxx-xxxx-xxxx-XXXXXXXXxxxxxxxx', 'value': BLE_UUID_PART50}
BLE_UUID_PART51 = 714219
ble_uuid_part51 = {'name': 'PART51', 'description': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxXXXXXXXX', 'value': BLE_UUID_PART51}
FIRMWARE_TYPE_WIRELESS = 4096
firmware_type_wireless = {'name': 'WIRELESS', 'description': 'Firmware is for wireless cpu', 'value': FIRMWARE_TYPE_WIRELESS}
FIRMWARE_TYPE_HOST = 8192
firmware_type_host = {'name': 'HOST', 'description': 'Firmware is for host cpu', 'value': FIRMWARE_TYPE_HOST}
FIRMWARE_TYPE_BOOTLOADER = 1
firmware_type_bootloader = {'name': 'BOOTLOADER', 'description': 'Firmware is bootloader', 'value': FIRMWARE_TYPE_BOOTLOADER}
FIRMWARE_TYPE_SOFTDEVICE = 2
firmware_type_softdevice = {'name': 'SOFTDEVICE', 'description': 'Firmware is for softdevice', 'value': FIRMWARE_TYPE_SOFTDEVICE}
FIRMWARE_TYPE_MAIN_APP = 4
firmware_type_main_app = {'name': 'MAIN_APP', 'description': 'Firmware is for main app', 'value': FIRMWARE_TYPE_MAIN_APP}
FIRMWARE_TYPE_DIAGNOSTIC_APP = 8
firmware_type_diagnostic_app = {'name': 'DIAGNOSTIC_APP', 'description': 'Firmware is for diagnostic app', 'value': FIRMWARE_TYPE_DIAGNOSTIC_APP}
FIRMWARE_TYPE_FPGA = 16
firmware_type_fpga = {'name': 'FPGA', 'description': 'Firmware is for FPGA', 'value': FIRMWARE_TYPE_FPGA}
FIRMWARE_TYPE_DEVICE_PROFILE = 32
firmware_type_device_profile = {'name': 'DEVICE_PROFILE', 'description': 'Profile for PK', 'value': FIRMWARE_TYPE_DEVICE_PROFILE}
FIRMWARE_TYPE_VECTOR_INPUT = 64
firmware_type_vector_input = {'name': 'VECTOR_INPUT', 'description': 'Vector input for PK', 'value': FIRMWARE_TYPE_VECTOR_INPUT}
FIRMWARE_TYPE_USER_DATABASE = 128
firmware_type_user_database = {'name': 'USER_DATABASE', 'description': 'User statistics database', 'value': FIRMWARE_TYPE_USER_DATABASE}
DEVICE_APP_MODE_WIRELESS_MAIN_APP = 0xB7+FIRMWARE_TYPE_WIRELESS*256+FIRMWARE_TYPE_MAIN_APP*256
device_app_mode_wireless_main_app = {'name': 'WIRELESS_MAIN_APP', 'description': 'Main application for the wireless board', 'value': DEVICE_APP_MODE_WIRELESS_MAIN_APP}
DEVICE_APP_MODE_WIRELESS_BOOTLOADER = 0xB7+256*FIRMWARE_TYPE_WIRELESS+256*FIRMWARE_TYPE_BOOTLOADER
device_app_mode_wireless_bootloader = {'name': 'WIRELESS_BOOTLOADER', 'description': 'Bootloader for the wireless board', 'value': DEVICE_APP_MODE_WIRELESS_BOOTLOADER}
DEVICE_APP_MODE_WIRELESS_SOFTDEVICE = 0xB7+256*FIRMWARE_TYPE_WIRELESS+256*FIRMWARE_TYPE_SOFTDEVICE
device_app_mode_wireless_softdevice = {'name': 'WIRELESS_SOFTDEVICE', 'description': 'Softdevice for the wireless board', 'value': DEVICE_APP_MODE_WIRELESS_SOFTDEVICE}
DEVICE_APP_MODE_HOST_MAIN_APP = 0xB7+FIRMWARE_TYPE_HOST*256+FIRMWARE_TYPE_MAIN_APP*256
device_app_mode_host_main_app = {'name': 'HOST_MAIN_APP', 'description': 'Main application for the main board', 'value': DEVICE_APP_MODE_HOST_MAIN_APP}
DEVICE_APP_MODE_HOST_DIAGNOSTIC_APP = 0xB7+FIRMWARE_TYPE_HOST*256+FIRMWARE_TYPE_DIAGNOSTIC_APP*256
device_app_mode_host_diagnostic_app = {'name': 'HOST_DIAGNOSTIC_APP', 'description': 'Diag application for the main board', 'value': DEVICE_APP_MODE_HOST_DIAGNOSTIC_APP}
DEVICE_APP_MODE_HOST_BOOTLOADER = 0xB7 + FIRMWARE_TYPE_HOST*256 + FIRMWARE_TYPE_BOOTLOADER*256
device_app_mode_host_bootloader = {'name': 'HOST_BOOTLOADER', 'description': 'Bootloader for the main board', 'value': DEVICE_APP_MODE_HOST_BOOTLOADER}
DEVICE_APP_MODE_PROPRIO_WIRELESS_BOOTLOADER = 0x001004B6
device_app_mode_proprio_wireless_bootloader = {'name': 'PROPRIO_WIRELESS_BOOTLOADER', 'description': 'Legacy code to reboot proprio into wireless bootloader.  Have faith!', 'value': DEVICE_APP_MODE_PROPRIO_WIRELESS_BOOTLOADER}
BULKTYPE_WIRELESS_MAIN_APP = FIRMWARE_TYPE_WIRELESS|FIRMWARE_TYPE_MAIN_APP
bulktype_wireless_main_app = {'name': 'WIRELESS_MAIN_APP', 'description': 'Main application for the wireless board', 'value': BULKTYPE_WIRELESS_MAIN_APP}
BULKTYPE_WIRELESS_BOOTLOADER = FIRMWARE_TYPE_WIRELESS|FIRMWARE_TYPE_BOOTLOADER
bulktype_wireless_bootloader = {'name': 'WIRELESS_BOOTLOADER', 'description': 'Bootloader for the wireless board', 'value': BULKTYPE_WIRELESS_BOOTLOADER}
BULKTYPE_WIRELESS_SOFTDEVICE = FIRMWARE_TYPE_WIRELESS|FIRMWARE_TYPE_SOFTDEVICE
bulktype_wireless_softdevice = {'name': 'WIRELESS_SOFTDEVICE', 'description': 'Softdevice for the wireless board', 'value': BULKTYPE_WIRELESS_SOFTDEVICE}
BULKTYPE_HOST_MAIN_APP = FIRMWARE_TYPE_HOST|FIRMWARE_TYPE_MAIN_APP
bulktype_host_main_app = {'name': 'HOST_MAIN_APP', 'description': 'Main application for the main board', 'value': BULKTYPE_HOST_MAIN_APP}
BULKTYPE_HOST_BOOTLOADER = FIRMWARE_TYPE_HOST|FIRMWARE_TYPE_BOOTLOADER
bulktype_host_bootloader = {'name': 'HOST_BOOTLOADER', 'description': 'Bootloader for the main board', 'value': BULKTYPE_HOST_BOOTLOADER}
BULKTYPE_HOST_DIAGNOSTIC_APP = FIRMWARE_TYPE_HOST|FIRMWARE_TYPE_DIAGNOSTIC_APP
bulktype_host_diagnostic_app = {'name': 'HOST_DIAGNOSTIC_APP', 'description': 'Diag application for the main board', 'value': BULKTYPE_HOST_DIAGNOSTIC_APP}
BULKTYPE_HOST_FPGA = FIRMWARE_TYPE_HOST|FIRMWARE_TYPE_FPGA
bulktype_host_fpga = {'name': 'HOST_FPGA', 'description': 'Diag application for the main board', 'value': BULKTYPE_HOST_FPGA}
BULKTYPE_HOST_VECTOR_INPUT = FIRMWARE_TYPE_HOST|FIRMWARE_TYPE_VECTOR_INPUT
bulktype_host_vector_input = {'name': 'HOST_VECTOR_INPUT', 'description': 'Device profile for PKM', 'value': BULKTYPE_HOST_VECTOR_INPUT}
BULKTYPE_HOST_DEVICE_PROFILE = FIRMWARE_TYPE_HOST|FIRMWARE_TYPE_DEVICE_PROFILE
bulktype_host_device_profile = {'name': 'HOST_DEVICE_PROFILE', 'description': 'Device profile for PKM', 'value': BULKTYPE_HOST_DEVICE_PROFILE}
BULKTYPE_HOST_USER_DATABASE = FIRMWARE_TYPE_HOST|FIRMWARE_TYPE_USER_DATABASE
bulktype_host_user_database = {'name': 'HOST_USER_DATABASE', 'description': 'Device profile for PKM', 'value': BULKTYPE_HOST_USER_DATABASE}
BULKTYPE_TOOLBOX_FAIL_BAD_CRC = 0x8080
bulktype_toolbox_fail_bad_crc = {'name': 'TOOLBOX_FAIL_BAD_CRC', 'description': 'Forcing bad crc for testing', 'value': BULKTYPE_TOOLBOX_FAIL_BAD_CRC}
FLAGS_REBOOT_TBD = 0
flags_reboot_tbd = {'name': 'TBD', 'description': 'TBD', 'value': FLAGS_REBOOT_TBD}
FLAGS_REBOOT_RET_SUPPORTED = 0
flags_reboot_ret_supported = {'name': 'SUPPORTED', 'description': 'Peripheral supports rebooting and will reboot on next power cycle', 'value': FLAGS_REBOOT_RET_SUPPORTED}
FLAGS_REBOOT_RET_NOT_SUPPORTED = 1
flags_reboot_ret_not_supported = {'name': 'NOT_SUPPORTED', 'description': 'Peripheral does NOT support rebooting and will NOT reboot', 'value': FLAGS_REBOOT_RET_NOT_SUPPORTED}
FLAGS_REBOOT_RET_COMPLETE = 2
flags_reboot_ret_complete = {'name': 'COMPLETE', 'description': 'Peripheral has rebooted', 'value': FLAGS_REBOOT_RET_COMPLETE}
FLAGS_GET_VARIABLE_RETURN_VAR = 0
flags_get_variable_return_var = {'name': 'RETURN_VAR', 'description': 'Return variable', 'value': FLAGS_GET_VARIABLE_RETURN_VAR}
FLAGS_GET_VARIABLE_NOT_RETURN_VAR = 1
flags_get_variable_not_return_var = {'name': 'NOT_RETURN_VAR', 'description': 'Do not return the variable', 'value': FLAGS_GET_VARIABLE_NOT_RETURN_VAR}
FLAGS_GET_VARIABLE_ENABLE_NOTIFICATION = 16
flags_get_variable_enable_notification = {'name': 'ENABLE_NOTIFICATION', 'description': 'Enable notification for this variable', 'value': FLAGS_GET_VARIABLE_ENABLE_NOTIFICATION}
FLAGS_GET_VARIABLE_DISABLE_NOTIFICATION = 32
flags_get_variable_disable_notification = {'name': 'DISABLE_NOTIFICATION', 'description': 'Disable notification for this variable', 'value': FLAGS_GET_VARIABLE_DISABLE_NOTIFICATION}
FLAGS_GET_VARIABLE_ENABLE_LOGGING = 64
flags_get_variable_enable_logging = {'name': 'ENABLE_LOGGING', 'description': 'TBD', 'value': FLAGS_GET_VARIABLE_ENABLE_LOGGING}
FLAGS_GET_VARIABLE_DISABLE_LOGGING = 128
flags_get_variable_disable_logging = {'name': 'DISABLE_LOGGING', 'description': 'TBD', 'value': FLAGS_GET_VARIABLE_DISABLE_LOGGING}
FLAGS_GET_VARIABLE_RET_NOTIFICATION_SUPPORTED = 0
flags_get_variable_ret_notification_supported = {'name': 'NOTIFICATION_SUPPORTED', 'description': 'Notification is supported', 'value': FLAGS_GET_VARIABLE_RET_NOTIFICATION_SUPPORTED}
FLAGS_GET_VARIABLE_RET_NOTIFICATION_NOT_SUPPORTED = 1
flags_get_variable_ret_notification_not_supported = {'name': 'NOTIFICATION_NOT_SUPPORTED', 'description': 'Notification is NOT supported', 'value': FLAGS_GET_VARIABLE_RET_NOTIFICATION_NOT_SUPPORTED}
FLAGS_GET_VARIABLE_RET_NOTIFICATION_ENABLED = 16
flags_get_variable_ret_notification_enabled = {'name': 'NOTIFICATION_ENABLED', 'description': 'Notification is enabled', 'value': FLAGS_GET_VARIABLE_RET_NOTIFICATION_ENABLED}
FLAGS_GET_VARIABLE_RET_NOTIFICATION_DISABLED = 32
flags_get_variable_ret_notification_disabled = {'name': 'NOTIFICATION_DISABLED', 'description': 'Notification is disabled', 'value': FLAGS_GET_VARIABLE_RET_NOTIFICATION_DISABLED}
FLAGS_GET_VARIABLE_RET_LOGGING_ENABLED = 64
flags_get_variable_ret_logging_enabled = {'name': 'LOGGING_ENABLED', 'description': 'Logging is enabled', 'value': FLAGS_GET_VARIABLE_RET_LOGGING_ENABLED}
FLAGS_GET_VARIABLE_RET_LOGGING_DISABLED = 128
flags_get_variable_ret_logging_disabled = {'name': 'LOGGING_DISABLED', 'description': 'Logging is disabled', 'value': FLAGS_GET_VARIABLE_RET_LOGGING_DISABLED}
FLAGS_SET_VARIABLE_SEND_CONFIRMATION = 0
flags_set_variable_send_confirmation = {'name': 'SEND_CONFIRMATION', 'description': 'Send confirmation', 'value': FLAGS_SET_VARIABLE_SEND_CONFIRMATION}
FLAGS_SET_VARIABLE_NOT_SEND_CONFIRMATION = 1
flags_set_variable_not_send_confirmation = {'name': 'NOT_SEND_CONFIRMATION', 'description': 'Do not send confirmation', 'value': FLAGS_SET_VARIABLE_NOT_SEND_CONFIRMATION}
FLAGS_ACTION_START = 0
flags_action_start = {'name': 'START', 'description': 'Start action', 'value': FLAGS_ACTION_START}
FLAGS_ACTION_STOP = 1
flags_action_stop = {'name': 'STOP', 'description': 'Stop action', 'value': FLAGS_ACTION_STOP}
FLAGS_ACTION_STATUS = 2
flags_action_status = {'name': 'STATUS', 'description': 'get action status', 'value': FLAGS_ACTION_STATUS}
FLAGS_ACTION_DISABLE_NOTIFICATION = 16
flags_action_disable_notification = {'name': 'DISABLE_NOTIFICATION', 'description': 'Disable notification for this action', 'value': FLAGS_ACTION_DISABLE_NOTIFICATION}
FLAGS_ACTION_RET_COMPLETED = 0
flags_action_ret_completed = {'name': 'COMPLETED', 'description': 'Action has completed', 'value': FLAGS_ACTION_RET_COMPLETED}
FLAGS_ACTION_RET_RUNNING = 1
flags_action_ret_running = {'name': 'RUNNING', 'description': 'Action is running', 'value': FLAGS_ACTION_RET_RUNNING}
FLAGS_ACTION_RET_COMPLETED_WITH_ERROR = 2
flags_action_ret_completed_with_error = {'name': 'COMPLETED_WITH_ERROR', 'description': 'Action has competed with error', 'value': FLAGS_ACTION_RET_COMPLETED_WITH_ERROR}
FLAGS_ACTION_RET_CANCELLED = 3
flags_action_ret_cancelled = {'name': 'CANCELLED', 'description': 'Action was cancelled', 'value': FLAGS_ACTION_RET_CANCELLED}
FLAGS_ACTION_RET_CODE_PERCENTAGE = 1
flags_action_ret_code_percentage = {'name': 'PERCENTAGE', 'description': 'Return code is percentage of progress done', 'value': FLAGS_ACTION_RET_CODE_PERCENTAGE}
FLAGS_ACTION_RET_CODE_ERROR_CODE = 2
flags_action_ret_code_error_code = {'name': 'ERROR_CODE', 'description': 'Return code is the error code', 'value': FLAGS_ACTION_RET_CODE_ERROR_CODE}
FLAGS_ACTION_RET_CODE_DATA = 3
flags_action_ret_code_data = {'name': 'DATA', 'description': 'Return code is a return data', 'value': FLAGS_ACTION_RET_CODE_DATA}
FLAGS_DEVICE_REPORT_RET_SUPPORTED = 0
flags_device_report_ret_supported = {'name': 'SUPPORTED', 'description': 'Report supported', 'value': FLAGS_DEVICE_REPORT_RET_SUPPORTED}
FLAGS_DEVICE_REPORT_RET_NOT_SUPPORTED = 1
flags_device_report_ret_not_supported = {'name': 'NOT_SUPPORTED', 'description': 'Report not supported', 'value': FLAGS_DEVICE_REPORT_RET_NOT_SUPPORTED}
FLAGS_DEVICE_REPORT_RET_NO_DATA = 16
flags_device_report_ret_no_data = {'name': 'NO_DATA', 'description': 'No data to report', 'value': FLAGS_DEVICE_REPORT_RET_NO_DATA}
FLAGS_VARIABLE_BANK_TBD1 = 0
flags_variable_bank_tbd1 = {'name': 'TBD1', 'description': 'TBD1', 'value': FLAGS_VARIABLE_BANK_TBD1}
FLAGS_VARIABLE_BANK_TBD2 = 1
flags_variable_bank_tbd2 = {'name': 'TBD2', 'description': 'TBD2', 'value': FLAGS_VARIABLE_BANK_TBD2}
CMD_GET_VARIABLE = 176
cmd_get_variable = {'name': 'GET_VARIABLE', 'description': 'Get variable via the request characteristic', 'value': CMD_GET_VARIABLE}
CMD_SET_VARIABLE = 177
cmd_set_variable = {'name': 'SET_VARIABLE', 'description': 'Set variable via the request characteristic', 'value': CMD_SET_VARIABLE}
CMD_ACTION_FAMILY = 178
cmd_action_family = {'name': 'ACTION_FAMILY', 'description': 'Action family via the request characeristic', 'value': CMD_ACTION_FAMILY}
CMD_ACTIVITY_EVENTS = 179
cmd_activity_events = {'name': 'ACTIVITY_EVENTS', 'description': 'Activity events', 'value': CMD_ACTIVITY_EVENTS}
CMD_DEVICE_REPORT = 180
cmd_device_report = {'name': 'DEVICE_REPORT', 'description': 'Device reports', 'value': CMD_DEVICE_REPORT}
CMD_VARIABLE_BANKS = 181
cmd_variable_banks = {'name': 'VARIABLE_BANKS', 'description': 'Variable banks', 'value': CMD_VARIABLE_BANKS}
CMD_UPLOAD_FIRMWARE = 182
cmd_upload_firmware = {'name': 'UPLOAD_FIRMWARE', 'description': 'Upload firmware', 'value': CMD_UPLOAD_FIRMWARE}
CMD_REBOOT = 183
cmd_reboot = {'name': 'REBOOT', 'description': 'Reboot', 'value': CMD_REBOOT}
CMD_BULK_SEND_HEADER = 192
cmd_bulk_send_header = {'name': 'BULK_SEND_HEADER', 'description': 'The header of the bulk', 'value': CMD_BULK_SEND_HEADER}
CMD_BULK_SEND_BODY = 193
cmd_bulk_send_body = {'name': 'BULK_SEND_BODY', 'description': 'The body of the bulk', 'value': CMD_BULK_SEND_BODY}
CMD_BULK_SEND_FOOTER = 194
cmd_bulk_send_footer = {'name': 'BULK_SEND_FOOTER', 'description': 'The footer of the bulk', 'value': CMD_BULK_SEND_FOOTER}
CMD_DEVICE_PACKET = 208
cmd_device_packet = {'name': 'DEVICE_PACKET', 'description': 'Device package', 'value': CMD_DEVICE_PACKET}
ACTIVITY_UNKNOWN = int.from_bytes(bytearray(v & 0xff for v in [0, 0, 0, 0]), byteorder='little')
activity_unknown = {'name': 'UNKNOWN', 'description': 'Subject activity level is unknown', 'valueBytes': [0, 0, 0, 0], 'value': ACTIVITY_UNKNOWN}
ACTIVITY_IMMOBILE = int.from_bytes(bytearray(v & 0xff for v in [1, 0, 0, 0]), byteorder='little')
activity_immobile = {'name': 'IMMOBILE', 'description': 'Subject is immobile', 'valueBytes': [1, 0, 0, 0], 'value': ACTIVITY_IMMOBILE}
ACTIVITY_MOBILE = int.from_bytes(bytearray(v & 0xff for v in [2, 0, 0, 0]), byteorder='little')
activity_mobile = {'name': 'MOBILE', 'description': 'Subject is mobile', 'valueBytes': [2, 0, 0, 0], 'value': ACTIVITY_MOBILE}
ACTIVITY_AMBULATING = int.from_bytes(bytearray(v & 0xff for v in [4, 0, 0, 0]), byteorder='little')
activity_ambulating = {'name': 'AMBULATING', 'description': 'Subject is ambulating', 'valueBytes': [4, 0, 0, 0], 'value': ACTIVITY_AMBULATING}
ACTIVITY_SITTING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_IMMOBILE, 16, 0, 0]), byteorder='little')
activity_sitting = {'name': 'SITTING', 'description': 'Subject is sitting', 'valueBytes': ['ACTIVITY.IMMOBILE', 16, 0, 0], 'value': ACTIVITY_SITTING}
ACTIVITY_STANDING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_IMMOBILE, 32, 0, 0]), byteorder='little')
activity_standing = {'name': 'STANDING', 'description': 'Subjeft is standing', 'valueBytes': ['ACTIVITY.IMMOBILE', 32, 0, 0], 'value': ACTIVITY_STANDING}
ACTIVITY_LYING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_IMMOBILE, 64, 0, 0]), byteorder='little')
activity_lying = {'name': 'LYING', 'description': 'Subject is lying', 'valueBytes': ['ACTIVITY.IMMOBILE', 64, 0, 0], 'value': ACTIVITY_LYING}
ACTIVITY_LYING_FACE_UP = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_IMMOBILE, 65, 0, 0]), byteorder='little')
activity_lying_face_up = {'name': 'LYING_FACE_UP', 'description': 'Subject is lying face up', 'valueBytes': ['ACTIVITY.IMMOBILE', 65, 0, 0], 'value': ACTIVITY_LYING_FACE_UP}
ACTIVITY_LYING_FACE_DOWN = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_IMMOBILE, 66, 0, 0]), byteorder='little')
activity_lying_face_down = {'name': 'LYING_FACE_DOWN', 'description': 'Subject is lying face down', 'valueBytes': ['ACTIVITY.IMMOBILE', 66, 0, 0], 'value': ACTIVITY_LYING_FACE_DOWN}
ACTIVITY_SHUFFLING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_MOBILE, 1, 0, 0]), byteorder='little')
activity_shuffling = {'name': 'SHUFFLING', 'description': 'Subject is shuffling', 'valueBytes': ['ACTIVITY.MOBILE', 1, 0, 0], 'value': ACTIVITY_SHUFFLING}
ACTIVITY_CYCLING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_MOBILE, 2, 0, 0]), byteorder='little')
activity_cycling = {'name': 'CYCLING', 'description': 'Subject is cycling', 'valueBytes': ['ACTIVITY.MOBILE', 2, 0, 0], 'value': ACTIVITY_CYCLING}
ACTIVITY_SWIMMING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_MOBILE, 4, 0, 0]), byteorder='little')
activity_swimming = {'name': 'SWIMMING', 'description': 'Subject is swimming', 'valueBytes': ['ACTIVITY.MOBILE', 4, 0, 0], 'value': ACTIVITY_SWIMMING}
ACTIVITY_U_TURN = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_MOBILE, 8, 0, 0]), byteorder='little')
activity_u_turn = {'name': 'U_TURN', 'description': 'Subject is changing walking direction', 'valueBytes': ['ACTIVITY.MOBILE', 8, 0, 0], 'value': ACTIVITY_U_TURN}
ACTIVITY_CHAIR_RELAX = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_SITTING, 1, 0, 0]), byteorder='little')
activity_chair_relax = {'name': 'CHAIR_RELAX', 'description': 'Subject is sitting and relaxing in a chair', 'valueBytes': ['ACTIVITY.SITTING', 1, 0, 0], 'value': ACTIVITY_CHAIR_RELAX}
ACTIVITY_CHAIR_EXIT = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_SITTING, 2, 0, 0]), byteorder='little')
activity_chair_exit = {'name': 'CHAIR_EXIT', 'description': 'Subject is exiting from chair', 'valueBytes': ['ACTIVITY.SITTING', 2, 0, 0], 'value': ACTIVITY_CHAIR_EXIT}
ACTIVITY_WALKING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_AMBULATING, 1, 0, 0]), byteorder='little')
activity_walking = {'name': 'WALKING', 'description': 'Subject is walking', 'valueBytes': ['ACTIVITY.AMBULATING', 1, 0, 0], 'value': ACTIVITY_WALKING}
ACTIVITY_UPSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_AMBULATING, 2, 0, 0]), byteorder='little')
activity_upstairs = {'name': 'UPSTAIRS', 'description': 'Subject is going up stairs', 'valueBytes': ['ACTIVITY.AMBULATING', 2, 0, 0], 'value': ACTIVITY_UPSTAIRS}
ACTIVITY_DOWNSTAIRS = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_AMBULATING, 4, 0, 0]), byteorder='little')
activity_downstairs = {'name': 'DOWNSTAIRS', 'description': 'Subject is going down stairs', 'valueBytes': ['ACTIVITY.AMBULATING', 4, 0, 0], 'value': ACTIVITY_DOWNSTAIRS}
ACTIVITY_STANCE_PHASE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_AMBULATING, 0, 16, 0]), byteorder='little')
activity_stance_phase = {'name': 'STANCE_PHASE', 'description': 'Subject is in stance phase', 'valueBytes': ['ACTIVITY.AMBULATING', 0, 16, 0], 'value': ACTIVITY_STANCE_PHASE}
ACTIVITY_SWING_PHASE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_AMBULATING, 0, 32, 0]), byteorder='little')
activity_swing_phase = {'name': 'SWING_PHASE', 'description': 'Subject is in swing phase', 'valueBytes': ['ACTIVITY.AMBULATING', 0, 32, 0], 'value': ACTIVITY_SWING_PHASE}
ACTIVITY_DOUBLE_LIMB_SUPPORT = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_STANCE_PHASE, 0, 1, 0]), byteorder='little')
activity_double_limb_support = {'name': 'DOUBLE_LIMB_SUPPORT', 'description': 'Subject is has double limb support', 'valueBytes': ['ACTIVITY.STANCE_PHASE', 0, 1, 0], 'value': ACTIVITY_DOUBLE_LIMB_SUPPORT}
ACTIVITY_SINGLE_LIMB_SUPPORT = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_STANCE_PHASE, 0, 2, 0]), byteorder='little')
activity_single_limb_support = {'name': 'SINGLE_LIMB_SUPPORT', 'description': 'Subject has single limb support', 'valueBytes': ['ACTIVITY.STANCE_PHASE', 0, 2, 0], 'value': ACTIVITY_SINGLE_LIMB_SUPPORT}
ACTIVITY_LIMB_ADVANCEMENT = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_SWING_PHASE, 0, 1, 0]), byteorder='little')
activity_limb_advancement = {'name': 'LIMB_ADVANCEMENT', 'description': 'Subject is in limb advancement', 'valueBytes': ['ACTIVITY.SWING_PHASE', 0, 1, 0], 'value': ACTIVITY_LIMB_ADVANCEMENT}
ACTIVITY_HEELSTRIKE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_DOUBLE_LIMB_SUPPORT, 0, 0, 1]), byteorder='little')
activity_heelstrike = {'name': 'HEELSTRIKE', 'description': 'Subject is in heelstrike', 'valueBytes': ['ACTIVITY.DOUBLE_LIMB_SUPPORT', 0, 0, 1], 'value': ACTIVITY_HEELSTRIKE}
ACTIVITY_LOADING_RESPONSE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_DOUBLE_LIMB_SUPPORT, 0, 0, 2]), byteorder='little')
activity_loading_response = {'name': 'LOADING_RESPONSE', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.DOUBLE_LIMB_SUPPORT', 0, 0, 2], 'value': ACTIVITY_LOADING_RESPONSE}
ACTIVITY_FOOT_FLAT = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_DOUBLE_LIMB_SUPPORT, 0, 0, 4]), byteorder='little')
activity_foot_flat = {'name': 'FOOT_FLAT', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.DOUBLE_LIMB_SUPPORT', 0, 0, 4], 'value': ACTIVITY_FOOT_FLAT}
ACTIVITY_MIDSTANCE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_SINGLE_LIMB_SUPPORT, 0, 0, 1]), byteorder='little')
activity_midstance = {'name': 'MIDSTANCE', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.SINGLE_LIMB_SUPPORT', 0, 0, 1], 'value': ACTIVITY_MIDSTANCE}
ACTIVITY_HEEL_RISE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_SINGLE_LIMB_SUPPORT, 0, 0, 2]), byteorder='little')
activity_heel_rise = {'name': 'HEEL_RISE', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.SINGLE_LIMB_SUPPORT', 0, 0, 2], 'value': ACTIVITY_HEEL_RISE}
ACTIVITY_TERMINAL_STANCE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_SINGLE_LIMB_SUPPORT, 0, 0, 4]), byteorder='little')
activity_terminal_stance = {'name': 'TERMINAL_STANCE', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.SINGLE_LIMB_SUPPORT', 0, 0, 4], 'value': ACTIVITY_TERMINAL_STANCE}
ACTIVITY_OPPOSITE_HEELSTRIKE = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_DOUBLE_LIMB_SUPPORT, 0, 0, 8]), byteorder='little')
activity_opposite_heelstrike = {'name': 'OPPOSITE_HEELSTRIKE', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.DOUBLE_LIMB_SUPPORT', 0, 0, 8], 'value': ACTIVITY_OPPOSITE_HEELSTRIKE}
ACTIVITY_PRE_SWING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_DOUBLE_LIMB_SUPPORT, 0, 0, 16]), byteorder='little')
activity_pre_swing = {'name': 'PRE_SWING', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.DOUBLE_LIMB_SUPPORT', 0, 0, 16], 'value': ACTIVITY_PRE_SWING}
ACTIVITY_TOEOFF = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_LIMB_ADVANCEMENT, 0, 0, 16]), byteorder='little')
activity_toeoff = {'name': 'TOEOFF', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.LIMB_ADVANCEMENT', 0, 0, 16], 'value': ACTIVITY_TOEOFF}
ACTIVITY_INITIAL_SWING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_LIMB_ADVANCEMENT, 0, 0, 32]), byteorder='little')
activity_initial_swing = {'name': 'INITIAL_SWING', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.LIMB_ADVANCEMENT', 0, 0, 32], 'value': ACTIVITY_INITIAL_SWING}
ACTIVITY_FEET_ADJACENT = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_LIMB_ADVANCEMENT, 0, 0, 64]), byteorder='little')
activity_feet_adjacent = {'name': 'FEET_ADJACENT', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.LIMB_ADVANCEMENT', 0, 0, 64], 'value': ACTIVITY_FEET_ADJACENT}
ACTIVITY_MIDSWING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_LIMB_ADVANCEMENT, 0, 0, 128]), byteorder='little')
activity_midswing = {'name': 'MIDSWING', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.LIMB_ADVANCEMENT', 0, 0, 128], 'value': ACTIVITY_MIDSWING}
ACTIVITY_TIBIA_VERTICAL = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_LIMB_ADVANCEMENT, 0, 0, 1]), byteorder='little')
activity_tibia_vertical = {'name': 'TIBIA_VERTICAL', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.LIMB_ADVANCEMENT', 0, 0, 1], 'value': ACTIVITY_TIBIA_VERTICAL}
ACTIVITY_TERMINAL_SWING = int.from_bytes(bytearray(v & 0xff for v in [ACTIVITY_LIMB_ADVANCEMENT, 0, 0, 2]), byteorder='little')
activity_terminal_swing = {'name': 'TERMINAL_SWING', 'description': 'Subject is in TBD', 'valueBytes': ['ACTIVITY.LIMB_ADVANCEMENT', 0, 0, 2], 'value': ACTIVITY_TERMINAL_SWING}
PACKET_HEADER_ID_OFFSET = 0
packet_header_id_offset = {'name': 'HEADER_ID_OFFSET', 'description': 'Offset to the packet header id', 'value': PACKET_HEADER_ID_OFFSET}
PACKET_HEADER_ID_SIZE = 1
packet_header_id_size = {'name': 'HEADER_ID_SIZE', 'description': 'Size of the ID ', 'value': PACKET_HEADER_ID_SIZE}
PACKET_MAXIMUM_SIZE = 20
packet_maximum_size = {'name': 'MAXIMUM_SIZE', 'description': 'Maximum size for a inner packet', 'value': PACKET_MAXIMUM_SIZE}
PACKET_VARIABLE_ID_OFFSET = PACKET_HEADER_ID_OFFSET + PACKET_HEADER_ID_SIZE
packet_variable_id_offset = {'name': 'VARIABLE_ID_OFFSET', 'description': 'Offset to the packet id (B0,B1)', 'value': PACKET_VARIABLE_ID_OFFSET}
PACKET_VARIABLE_ID_SIZE = 4
packet_variable_id_size = {'name': 'VARIABLE_ID_SIZE', 'description': 'Size of packet id (B0,B1)', 'value': PACKET_VARIABLE_ID_SIZE}
PACKET_VARIABLE_FLAGS_OFFSET = PACKET_VARIABLE_ID_OFFSET + PACKET_VARIABLE_ID_SIZE
packet_variable_flags_offset = {'name': 'VARIABLE_FLAGS_OFFSET', 'description': 'Offset to flags (B0,B1)', 'value': PACKET_VARIABLE_FLAGS_OFFSET}
PACKET_VARIABLE_FLAGS_SIZE = 1
packet_variable_flags_size = {'name': 'VARIABLE_FLAGS_SIZE', 'description': 'Size of flags (B0,B1)', 'value': PACKET_VARIABLE_FLAGS_SIZE}
PACKET_VARIABLE_DATA_OFFSET = PACKET_VARIABLE_FLAGS_OFFSET + PACKET_VARIABLE_FLAGS_SIZE
packet_variable_data_offset = {'name': 'VARIABLE_DATA_OFFSET', 'description': 'Offset to data (B0,B1)', 'value': PACKET_VARIABLE_DATA_OFFSET}
PACKET_VARIABLE_DATA_SIZE = PACKET_MAXIMUM_SIZE - PACKET_VARIABLE_DATA_OFFSET
packet_variable_data_size = {'name': 'VARIABLE_DATA_SIZE', 'description': 'Size of data (B0,B1)', 'value': PACKET_VARIABLE_DATA_SIZE}
PACKET_ACTION_ID_OFFSET = PACKET_HEADER_ID_OFFSET +PACKET_HEADER_ID_SIZE
packet_action_id_offset = {'name': 'ACTION_ID_OFFSET', 'description': 'Offset to the packet id (B2)', 'value': PACKET_ACTION_ID_OFFSET}
PACKET_ACTION_ID_SIZE = 2
packet_action_id_size = {'name': 'ACTION_ID_SIZE', 'description': 'Size of packet id (B2)', 'value': PACKET_ACTION_ID_SIZE}
PACKET_ACTION_FLAGS_OFFSET = PACKET_ACTION_ID_OFFSET + PACKET_ACTION_ID_SIZE
packet_action_flags_offset = {'name': 'ACTION_FLAGS_OFFSET', 'description': 'Offset to flags (B2)', 'value': PACKET_ACTION_FLAGS_OFFSET}
PACKET_ACTION_FLAGS_SIZE = 1
packet_action_flags_size = {'name': 'ACTION_FLAGS_SIZE', 'description': 'Size of flags (B2)', 'value': PACKET_ACTION_FLAGS_SIZE}
PACKET_ACTION_DATA_OFFSET = PACKET_ACTION_FLAGS_OFFSET + PACKET_ACTION_FLAGS_SIZE
packet_action_data_offset = {'name': 'ACTION_DATA_OFFSET', 'description': 'Offset to data (B2)', 'value': PACKET_ACTION_DATA_OFFSET}
PACKET_ACTION_DATA_SIZE = PACKET_MAXIMUM_SIZE - PACKET_ACTION_DATA_OFFSET
packet_action_data_size = {'name': 'ACTION_DATA_SIZE', 'description': 'Size of data (B2)', 'value': PACKET_ACTION_DATA_SIZE}
PACKET_ACTIVITY_FILTER_OFFSET = PACKET_HEADER_ID_OFFSET + PACKET_HEADER_ID_SIZE
packet_activity_filter_offset = {'name': 'ACTIVITY_FILTER_OFFSET', 'description': 'Offset to filter (B3)', 'value': PACKET_ACTIVITY_FILTER_OFFSET}
PACKET_ACTIVITY_FILTER_SIZE = 4
packet_activity_filter_size = {'name': 'ACTIVITY_FILTER_SIZE', 'description': 'Size of filter (B3)', 'value': PACKET_ACTIVITY_FILTER_SIZE}
PACKET_ACTIVITY_REFRESH_OFFSET = PACKET_ACTIVITY_FILTER_OFFSET + PACKET_ACTIVITY_FILTER_SIZE
packet_activity_refresh_offset = {'name': 'ACTIVITY_REFRESH_OFFSET', 'description': 'Offset to refresh rate (B3)', 'value': PACKET_ACTIVITY_REFRESH_OFFSET}
PACKET_ACTIVITY_REFRESH_SIZE = 2
packet_activity_refresh_size = {'name': 'ACTIVITY_REFRESH_SIZE', 'description': 'Size of refresh rate (B3)', 'value': PACKET_ACTIVITY_REFRESH_SIZE}
PACKET_ACTIVITY_EVENT_ID_OFFSET = PACKET_ACTIVITY_REFRESH_OFFSET + PACKET_ACTIVITY_REFRESH_SIZE
packet_activity_event_id_offset = {'name': 'ACTIVITY_EVENT_ID_OFFSET', 'description': 'Offset to event id  (B3)', 'value': PACKET_ACTIVITY_EVENT_ID_OFFSET}
PACKET_ACTIVITY_EVENT_ID_SIZE = 4
packet_activity_event_id_size = {'name': 'ACTIVITY_EVENT_ID_SIZE', 'description': 'Size of event id (B3)', 'value': PACKET_ACTIVITY_EVENT_ID_SIZE}
PACKET_REPORT_ID_OFFSET = PACKET_HEADER_ID_OFFSET  + PACKET_HEADER_ID_SIZE
packet_report_id_offset = {'name': 'REPORT_ID_OFFSET', 'description': 'Offset to packet id (B4)', 'value': PACKET_REPORT_ID_OFFSET}
PACKET_REPORT_ID_SIZE = 1
packet_report_id_size = {'name': 'REPORT_ID_SIZE', 'description': 'Size of packet id (B4)', 'value': PACKET_REPORT_ID_SIZE}
PACKET_REPORT_FLAGS_OFFSET = PACKET_REPORT_ID_OFFSET + PACKET_REPORT_ID_SIZE
packet_report_flags_offset = {'name': 'REPORT_FLAGS_OFFSET', 'description': 'Offset to flags (B4)', 'value': PACKET_REPORT_FLAGS_OFFSET}
PACKET_REPORT_FLAGS_SIZE = 1
packet_report_flags_size = {'name': 'REPORT_FLAGS_SIZE', 'description': 'Size of flags (B4)', 'value': PACKET_REPORT_FLAGS_SIZE}
PACKET_REPORT_PARAMETERS_OFFSET = PACKET_REPORT_FLAGS_OFFSET + PACKET_REPORT_FLAGS_SIZE
packet_report_parameters_offset = {'name': 'REPORT_PARAMETERS_OFFSET', 'description': 'Offset to parameters (B4)', 'value': PACKET_REPORT_PARAMETERS_OFFSET}
PACKET_REPORT_PARAMETERS_SIZE = PACKET_MAXIMUM_SIZE - PACKET_REPORT_PARAMETERS_OFFSET
packet_report_parameters_size = {'name': 'REPORT_PARAMETERS_SIZE', 'description': 'Size of parameters (B4)', 'value': PACKET_REPORT_PARAMETERS_SIZE}
PACKET_REPORT_SIZE_OFFSET = PACKET_REPORT_ID_OFFSET + PACKET_REPORT_ID_SIZE
packet_report_size_offset = {'name': 'REPORT_SIZE_OFFSET', 'description': 'Offset to size (B4)', 'value': PACKET_REPORT_SIZE_OFFSET}
PACKET_REPORT_SIZE_SIZE = 2
packet_report_size_size = {'name': 'REPORT_SIZE_SIZE', 'description': 'Size of report (B4)', 'value': PACKET_REPORT_SIZE_SIZE}
PACKET_REPORT_DATA_OFFSET = PACKET_REPORT_SIZE_OFFSET + PACKET_REPORT_SIZE_SIZE
packet_report_data_offset = {'name': 'REPORT_DATA_OFFSET', 'description': 'Offset to data (B4)', 'value': PACKET_REPORT_DATA_OFFSET}
PACKET_BANKS_ID_OFFSET = PACKET_HEADER_ID_OFFSET + PACKET_HEADER_ID_SIZE
packet_banks_id_offset = {'name': 'BANKS_ID_OFFSET', 'description': 'Offset to packet id (B5)', 'value': PACKET_BANKS_ID_OFFSET}
PACKET_BANKS_ID_SIZE = 1
packet_banks_id_size = {'name': 'BANKS_ID_SIZE', 'description': 'Size of packet id (B5)', 'value': PACKET_BANKS_ID_SIZE}
PACKET_BANKS_VAR_COUNT_OFFSET = PACKET_BANKS_ID_OFFSET + PACKET_BANKS_ID_SIZE
packet_banks_var_count_offset = {'name': 'BANKS_VAR_COUNT_OFFSET', 'description': 'Offset to variable count (B5)', 'value': PACKET_BANKS_VAR_COUNT_OFFSET}
PACKET_BANKS_VAR_COUNT_SIZE = 2
packet_banks_var_count_size = {'name': 'BANKS_VAR_COUNT_SIZE', 'description': 'Size of variable count (B5)', 'value': PACKET_BANKS_VAR_COUNT_SIZE}
PACKET_BANKS_VAR_ID_OFFSET = PACKET_BANKS_VAR_COUNT_OFFSET + PACKET_BANKS_VAR_COUNT_SIZE
packet_banks_var_id_offset = {'name': 'BANKS_VAR_ID_OFFSET', 'description': 'Offset to variable id (B5)', 'value': PACKET_BANKS_VAR_ID_OFFSET}
PACKET_BANKS_VAR_ID_SIZE = 4
packet_banks_var_id_size = {'name': 'BANKS_VAR_ID_SIZE', 'description': 'Size of variable id (B5)', 'value': PACKET_BANKS_VAR_ID_SIZE}
PACKET_BANKS_FLAGS_OFFSET = PACKET_BANKS_ID_OFFSET + PACKET_BANKS_ID_SIZE
packet_banks_flags_offset = {'name': 'BANKS_FLAGS_OFFSET', 'description': 'Offset to flags (B5)', 'value': PACKET_BANKS_FLAGS_OFFSET}
PACKET_BANKS_FLAGS_SIZE = 1
packet_banks_flags_size = {'name': 'BANKS_FLAGS_SIZE', 'description': 'Size of flags (B5)', 'value': PACKET_BANKS_FLAGS_SIZE}
PACKET_BANKS_SIZE_OFFSET = PACKET_BANKS_ID_OFFSET + PACKET_BANKS_ID_SIZE
packet_banks_size_offset = {'name': 'BANKS_SIZE_OFFSET', 'description': 'Offset to size (B5)', 'value': PACKET_BANKS_SIZE_OFFSET}
PACKET_BANKS_SIZE_SIZE = 2
packet_banks_size_size = {'name': 'BANKS_SIZE_SIZE', 'description': 'Size of variable bank (B5)', 'value': PACKET_BANKS_SIZE_SIZE}
PACKET_BANKS_DATA_OFFSET = PACKET_BANKS_SIZE_OFFSET + PACKET_BANKS_SIZE_SIZE
packet_banks_data_offset = {'name': 'BANKS_DATA_OFFSET', 'description': 'Offset to data (B5)', 'value': PACKET_BANKS_DATA_OFFSET}
PACKET_DEVICE_ID_OFFSET = PACKET_HEADER_ID_OFFSET + PACKET_HEADER_ID_SIZE
packet_device_id_offset = {'name': 'DEVICE_ID_OFFSET', 'description': 'Offset to packet id (D0, D1)', 'value': PACKET_DEVICE_ID_OFFSET}
PACKET_DEVICE_ID_SIZE = 1
packet_device_id_size = {'name': 'DEVICE_ID_SIZE', 'description': 'Size of packet id (D0, D1)', 'value': PACKET_DEVICE_ID_SIZE}
PACKET_DEVICE_DATA_OFFSET = PACKET_DEVICE_ID_OFFSET + PACKET_DEVICE_ID_SIZE
packet_device_data_offset = {'name': 'DEVICE_DATA_OFFSET', 'description': 'Offset to data (D0, D1)', 'value': PACKET_DEVICE_DATA_OFFSET}
PACKET_DEVICE_DATA_SIZE = PACKET_MAXIMUM_SIZE - PACKET_DEVICE_DATA_OFFSET
packet_device_data_size = {'name': 'DEVICE_DATA_SIZE', 'description': 'Size of data (D0, D1)', 'value': PACKET_DEVICE_DATA_SIZE}
BASE_DEVICE_STATE_SHUTOFF = 0
base_device_state_shutoff = {'name': 'SHUTOFF', 'description': 'Device is shutoff', 'value': BASE_DEVICE_STATE_SHUTOFF}
BASE_DEVICE_STATE_RESET = 1
base_device_state_reset = {'name': 'RESET', 'description': 'Device is resetting', 'value': BASE_DEVICE_STATE_RESET}
BASE_DEVICE_STATE_HIBERNATE = 2
base_device_state_hibernate = {'name': 'HIBERNATE', 'description': 'Device is hibernating', 'value': BASE_DEVICE_STATE_HIBERNATE}
BASE_DEVICE_STATE_CALIBRATION = 3
base_device_state_calibration = {'name': 'CALIBRATION', 'description': 'Device is calibrating', 'value': BASE_DEVICE_STATE_CALIBRATION}
BASE_DEVICE_STATE_NEUTRAL = 4
base_device_state_neutral = {'name': 'NEUTRAL', 'description': 'Device is neutral', 'value': BASE_DEVICE_STATE_NEUTRAL}
BASE_DEVICE_STATE_WALK = 5
base_device_state_walk = {'name': 'WALK', 'description': 'Device is walking', 'value': BASE_DEVICE_STATE_WALK}
BASE_DEVICE_STATE_STAIRS_UP = 6
base_device_state_stairs_up = {'name': 'STAIRS_UP', 'description': 'Device is going up stairs', 'value': BASE_DEVICE_STATE_STAIRS_UP}
BASE_DEVICE_STATE_STAIRS_DOWN = 7
base_device_state_stairs_down = {'name': 'STAIRS_DOWN', 'description': 'Device is going down stairs', 'value': BASE_DEVICE_STATE_STAIRS_DOWN}
BASE_DEVICE_STATE_RELAX = 8
base_device_state_relax = {'name': 'RELAX', 'description': 'Device is relaxing', 'value': BASE_DEVICE_STATE_RELAX}
BASE_DEVICE_STATE_CHAIR_EXIT = 9
base_device_state_chair_exit = {'name': 'CHAIR_EXIT', 'description': 'Device is exiting chair', 'value': BASE_DEVICE_STATE_CHAIR_EXIT}
BASE_DEVICE_STATE_MANUAL = 10
base_device_state_manual = {'name': 'MANUAL', 'description': 'Device is in manual state', 'value': BASE_DEVICE_STATE_MANUAL}
BASE_DEVICE_STATE_DRIVING = 11
base_device_state_driving = {'name': 'DRIVING', 'description': 'Device is driving', 'value': BASE_DEVICE_STATE_DRIVING}
BASE_DEVICE_STATE_CHARGING = 12
base_device_state_charging = {'name': 'CHARGING', 'description': 'Device is charging', 'value': BASE_DEVICE_STATE_CHARGING}
BASE_DEVICE_STATE_ERROR = 13
base_device_state_error = {'name': 'ERROR', 'description': 'Device is in error state', 'value': BASE_DEVICE_STATE_ERROR}
id_lookup = {"CHRFLAGS": {CHRFLAGS_READ: chrflags_read, CHRFLAGS_WRITE: chrflags_write, CHRFLAGS_RW: chrflags_rw, CHRFLAGS_NOTIFY: chrflags_notify},"SRV": {SRV_COMM: srv_comm},"DATATYPE": {DATATYPE_UNKNOWN: datatype_unknown, DATATYPE_SIGNED: datatype_signed, DATATYPE_INT: datatype_int, DATATYPE_REAL: datatype_real, DATATYPE_OTHER: datatype_other, DATATYPE__8BIT: datatype__8bit, DATATYPE__16BIT: datatype__16bit, DATATYPE__32BIT: datatype__32bit, DATATYPE__64BIT: datatype__64bit, DATATYPE_UINT8: datatype_uint8, DATATYPE_UINT16: datatype_uint16, DATATYPE_UINT32: datatype_uint32, DATATYPE_UINT64: datatype_uint64, DATATYPE_INT8: datatype_int8, DATATYPE_INT16: datatype_int16, DATATYPE_INT32: datatype_int32, DATATYPE_INT64: datatype_int64, DATATYPE_REAL32: datatype_real32, DATATYPE_REAL64: datatype_real64, DATATYPE_BOOL: datatype_bool, DATATYPE_DATETIME32: datatype_datetime32, DATATYPE_DATETIME64: datatype_datetime64, DATATYPE_TEXT: datatype_text, DATATYPE_BUFFER: datatype_buffer},"SYSTEM": {SYSTEM_EVENT_ACK: system_event_ack, SYSTEM_EVENT_PING: system_event_ping, SYSTEM_EVENT_SHUTDOWN_NOTIFICATION: system_event_shutdown_notification, SYSTEM_EVENT_ON: system_event_on, SYSTEM_EVENT_OFF: system_event_off, SYSTEM_EVENT_SLEEP: system_event_sleep, SYSTEM_EVENT_HIBERNATE: system_event_hibernate, SYSTEM_EVENT_WAKE: system_event_wake, SYSTEM_EVENT_TEST_MODE: system_event_test_mode, SYSTEM_EVENT_RESTART: system_event_restart, SYSTEM_EVENT_ALLOW_DOWNLOAD: system_event_allow_download, SYSTEM_BLE_CONNECTED: system_ble_connected, SYSTEM_BLE_DISCONNECTED: system_ble_disconnected, SYSTEM_BLE_CONNECTING: system_ble_connecting, SYSTEM_BLE_CONNECTION_FAIL: system_ble_connection_fail, SYSTEM_LOG_MESSAGE: system_log_message, SYSTEM_LOG_DUMP: system_log_dump, SYSTEM_LOG_DEBUG: system_log_debug, SYSTEM_LOG_VARIABLE: system_log_variable, SYSTEM_LOG_VARIABLE_HEADER: system_log_variable_header, SYSTEM_LOG_VARIABLE_BODY: system_log_variable_body, SYSTEM_BATTERY_LEVEL: system_battery_level, SYSTEM_DEVICE_SOFTWARE_VERSION: system_device_software_version, SYSTEM_DEVICE_SERIAL_NUMBER: system_device_serial_number, SYSTEM_DEVICE_HARDWARE_VERSION: system_device_hardware_version, SYSTEM_BATTERY_CHARGING_START: system_battery_charging_start, SYSTEM_BATTERY_CHARGING_STOP: system_battery_charging_stop, SYSTEM_BATTERY_CHARGING_ERROR: system_battery_charging_error, SYSTEM_BATTERY_WARNING_LOW: system_battery_warning_low, SYSTEM_BATTERY_WARNING_SERIOUS: system_battery_warning_serious, SYSTEM_BATTERY_WARNING_CRITICAL: system_battery_warning_critical, SYSTEM_BATTERY_WARNING_SHUTOFF: system_battery_warning_shutoff, SYSTEM_CALIBRATION_START: system_calibration_start, SYSTEM_CALIBRATION_SIGNAL: system_calibration_signal, SYSTEM_CALIBRATION_STATUS: system_calibration_status, SYSTEM_CALIBRATION_FINISH: system_calibration_finish, SYSTEM_CALIBRATION_ERROR: system_calibration_error, SYSTEM_ERROR: system_error, SYSTEM_ERROR_SHUTOFF: system_error_shutoff, SYSTEM_UI_BUTTON_PRESS_SINGLE: system_ui_button_press_single, SYSTEM_UI_BUTTON_PRESS_DOUBLE: system_ui_button_press_double, SYSTEM_UI_BUTTON_HOLD_SHORT: system_ui_button_hold_short, SYSTEM_UI_BUTTON_HOLD_LONG: system_ui_button_hold_long, SYSTEM_UI_BEEP_ONCE: system_ui_beep_once, SYSTEM_UI_BLINK_ONCE: system_ui_blink_once, SYSTEM_UI_VIBRATE_ONCE: system_ui_vibrate_once, SYSTEM_UI_BUTTON_EVENT: system_ui_button_event, SYSTEM_DEVICE_BONDING_PASSCODE: system_device_bonding_passcode, SYSTEM_DEVICE_RESET_REQUEST: system_device_reset_request, SYSTEM_PACKET_RECEIVE_SUCCESSFUL: system_packet_receive_successful, SYSTEM_PACKET_RECEIVE_FAIL: system_packet_receive_fail, SYSTEM_DEVICE_MODEL_NUMBER: system_device_model_number},"VARFLAGS": {VARFLAGS_READ: varflags_read, VARFLAGS_WRITE: varflags_write, VARFLAGS_RW: varflags_rw, VARFLAGS_MANDATORY: varflags_mandatory},"DEVICE": {DEVICE_UNKNOWN: device_unknown, DEVICE_BASE: device_base, DEVICE_LEG: device_leg, DEVICE_KNEE: device_knee, DEVICE_FOOT: device_foot, DEVICE_HIP: device_hip, DEVICE_PROPRIO_FOOT: device_proprio_foot, DEVICE_POWER_KNEE: device_power_knee, DEVICE_RHEO_KNEE: device_rheo_knee, DEVICE_ACTIVITY_MONITOR: device_activity_monitor, DEVICE_HEART_RATE_MONITOR: device_heart_rate_monitor, DEVICE_SENSOR_TAG: device_sensor_tag, DEVICE_TOOLBOX_SERVER: device_toolbox_server, DEVICE_BSMB: device_bsmb, DEVICE_APO: device_apo, DEVICE_B3C_DEVICE: device_b3c_device},"DEVICE_APPS": {DEVICE_APPS_RHEO_KNEE_MAIN_APP: device_apps_rheo_knee_main_app, DEVICE_APPS_PROPRIO_FOOT_MAIN_APP: device_apps_proprio_foot_main_app, DEVICE_APPS_RHEO_KNEE4_MAIN_APP: device_apps_rheo_knee4_main_app, DEVICE_APPS_RHEO_KNEE4_DIAG_APP: device_apps_rheo_knee4_diag_app, DEVICE_APPS_RHEO_KNEE4_BOOTLOADER: device_apps_rheo_knee4_bootloader, DEVICE_APPS_APO_MAIN_APP: device_apps_apo_main_app, DEVICE_APPS_APO_DIAG_APP: device_apps_apo_diag_app, DEVICE_APPS_APO_BOOTLOADER: device_apps_apo_bootloader, DEVICE_APPS_POWER_KNEE_MAIN_APP: device_apps_power_knee_main_app, DEVICE_APPS_TOOLBOX_SERVER_MAIN_APP: device_apps_toolbox_server_main_app, DEVICE_APPS_MOBILI_KNEE_MAIN_APP: device_apps_mobili_knee_main_app, DEVICE_APPS_POWER_KNEE_DIAG_APP: device_apps_power_knee_diag_app, DEVICE_APPS_MOBILI_KNEE_DIAG_APP: device_apps_mobili_knee_diag_app, DEVICE_APPS_POWER_KNEE_BOOTLOADER: device_apps_power_knee_bootloader, DEVICE_APPS_MOBILI_KNEE_BOOTLOADER: device_apps_mobili_knee_bootloader, DEVICE_APPS_B3C_BOOTLOADER: device_apps_b3c_bootloader, DEVICE_APPS_BSMB_MAIN_APP: device_apps_bsmb_main_app, DEVICE_APPS_B3C_MAIN_APP: device_apps_b3c_main_app},"VAR": {VAR_SENSOR_TAG_TS_TEMPERATURE_OBJECT: var_sensor_tag_ts_temperature_object, VAR_SENSOR_TAG_TS_TEMPERATURE_AMBIENT: var_sensor_tag_ts_temperature_ambient, VAR_SENSOR_TAG_HS_HUMIDITY: var_sensor_tag_hs_humidity, VAR_SENSOR_TAG_HS_TEMPERATURE: var_sensor_tag_hs_temperature, VAR_TOOLBOX_LAST_COMMAND: var_toolbox_last_command, VAR_TOOLBOX_TEST_INT8_RO: var_toolbox_test_int8_ro, VAR_TOOLBOX_TEST_INT64_RO: var_toolbox_test_int64_ro, VAR_TOOLBOX_TEST_INT64_RW: var_toolbox_test_int64_rw, VAR_TOOLBOX_TEST_REAL64_RO: var_toolbox_test_real64_ro, VAR_TOOLBOX_TEST_REAL64_RW: var_toolbox_test_real64_rw, VAR_TOOLBOX_TEST_UINT64_RO: var_toolbox_test_uint64_ro, VAR_TOOLBOX_TEST_UINT64_RW: var_toolbox_test_uint64_rw, VAR_TOOLBOX_BULK_TEST_SIZE: var_toolbox_bulk_test_size, VAR_TOOLBOX_BULK_BODY_SIZE: var_toolbox_bulk_body_size, VAR_TOOLBOX_SERIAL_TX_PROTOCOL: var_toolbox_serial_tx_protocol, VAR_TOOLBOX_BULKS_PER_BUFFER: var_toolbox_bulks_per_buffer, VAR_BASE_ACCELEROMETER_ALL: var_base_accelerometer_all, VAR_BASE_ACCELEROMETER_SAMPLE_RATE: var_base_accelerometer_sample_rate, VAR_BASE_ACCELEROMETER_X: var_base_accelerometer_x, VAR_BASE_ACCELEROMETER_X_GAIN: var_base_accelerometer_x_gain, VAR_BASE_ACCELEROMETER_X_OFFSET: var_base_accelerometer_x_offset, VAR_BASE_ACCELEROMETER_X_UNCALIBRATED: var_base_accelerometer_x_uncalibrated, VAR_BASE_ACCELEROMETER_Y: var_base_accelerometer_y, VAR_BASE_ACCELEROMETER_Y_GAIN: var_base_accelerometer_y_gain, VAR_BASE_ACCELEROMETER_Y_OFFSET: var_base_accelerometer_y_offset, VAR_BASE_ACCELEROMETER_Y_UNCALIBRATED: var_base_accelerometer_y_uncalibrated, VAR_BASE_ACCELEROMETER_Z: var_base_accelerometer_z, VAR_BASE_ACCELEROMETER_Z_GAIN: var_base_accelerometer_z_gain, VAR_BASE_ACCELEROMETER_Z_OFFSET: var_base_accelerometer_z_offset, VAR_BASE_ACCELEROMETER_Z_UNCALIBRATED: var_base_accelerometer_z_uncalibrated, VAR_BASE_ACTION_PERFORM: var_base_action_perform, VAR_BASE_ACTION_STATUS: var_base_action_status, VAR_BASE_ACTIVITY: var_base_activity, VAR_BASE_ALTITUDE: var_base_altitude, VAR_BASE_ALTITUDE_GAIN: var_base_altitude_gain, VAR_BASE_ALTITUDE_OFFSET: var_base_altitude_offset, VAR_BASE_ALTITUDE_UNCALIBRATED: var_base_altitude_uncalibrated, VAR_BASE_ANGLE_FRONTAL_PLANE: var_base_angle_frontal_plane, VAR_BASE_ANGLE_SAGITTAL_PLANE: var_base_angle_sagittal_plane, VAR_BASE_ANGLE_TRANSVERSE_PLANE: var_base_angle_transverse_plane, VAR_BASE_BATTERY_CURRENT: var_base_battery_current, VAR_BASE_BATTERY_LEVEL: var_base_battery_level, VAR_BASE_BATTERY_PLUGGED_IN_COUNT: var_base_battery_plugged_in_count, VAR_BASE_BATTERY_STATE: var_base_battery_state, VAR_BASE_BATTERY_TEMPERATURE: var_base_battery_temperature, VAR_BASE_BATTERY_VOLTAGE: var_base_battery_voltage, VAR_BASE_DATE_OF_FIRST_USE: var_base_date_of_first_use, VAR_BASE_DATE_OF_LAST_RESET: var_base_date_of_last_reset, VAR_BASE_DISPLAY_NAME: var_base_display_name, VAR_BASE_DEVICE_TYPE: var_base_device_type, VAR_BASE_ERROR: var_base_error, VAR_BASE_ERROR_DATA: var_base_error_data, VAR_BASE_ERROR_STATUS: var_base_error_status, VAR_BASE_GYROSCOPE_ALL: var_base_gyroscope_all, VAR_BASE_GYROSCOPE_SAMPLE_RATE: var_base_gyroscope_sample_rate, VAR_BASE_GYROSCOPE_X: var_base_gyroscope_x, VAR_BASE_GYROSCOPE_X_GAIN: var_base_gyroscope_x_gain, VAR_BASE_GYROSCOPE_X_OFFSET: var_base_gyroscope_x_offset, VAR_BASE_GYROSCOPE_X_UNCALIBRATED: var_base_gyroscope_x_uncalibrated, VAR_BASE_GYROSCOPE_Y: var_base_gyroscope_y, VAR_BASE_GYROSCOPE_Y_GAIN: var_base_gyroscope_y_gain, VAR_BASE_GYROSCOPE_Y_OFFSET: var_base_gyroscope_y_offset, VAR_BASE_GYROSCOPE_Y_UNCALIBRATED: var_base_gyroscope_y_uncalibrated, VAR_BASE_GYROSCOPE_Z: var_base_gyroscope_z, VAR_BASE_GYROSCOPE_Z_GAIN: var_base_gyroscope_z_gain, VAR_BASE_GYROSCOPE_Z_OFFSET: var_base_gyroscope_z_offset, VAR_BASE_GYROSCOPE_Z_UNCALIBRATED: var_base_gyroscope_z_uncalibrated, VAR_BASE_LOGGING_CONFIG: var_base_logging_config, VAR_BASE_LOGGING_ENABLED: var_base_logging_enabled, VAR_BASE_MAGNETO_X: var_base_magneto_x, VAR_BASE_MAGNETO_X_GAIN: var_base_magneto_x_gain, VAR_BASE_MAGNETO_X_OFFSET: var_base_magneto_x_offset, VAR_BASE_MAGNETO_X_UNCALIBRATED: var_base_magneto_x_uncalibrated, VAR_BASE_MAGNETO_Y: var_base_magneto_y, VAR_BASE_MAGNETO_Y_GAIN: var_base_magneto_y_gain, VAR_BASE_MAGNETO_Y_OFFSET: var_base_magneto_y_offset, VAR_BASE_MAGNETO_Y_UNCALIBRATED: var_base_magneto_y_uncalibrated, VAR_BASE_MAGNETO_Z: var_base_magneto_z, VAR_BASE_MAGNETO_Z_GAIN: var_base_magneto_z_gain, VAR_BASE_MAGNETO_Z_OFFSET: var_base_magneto_z_offset, VAR_BASE_MAGNETO_Z_UNCALIBRATED: var_base_magneto_z_uncalibrated, VAR_BASE_TEMPERATURE: var_base_temperature, VAR_BASE_TEMPERATURE_GAIN: var_base_temperature_gain, VAR_BASE_TEMPERATURE_OFFSET: var_base_temperature_offset, VAR_BASE_TIME_ACTIVE: var_base_time_active, VAR_BASE_TIME_ACTIVE_SLR: var_base_time_active_slr, VAR_BASE_TIME_ON: var_base_time_on, VAR_BASE_TIME_RTC_DAY_OF_MONTH: var_base_time_rtc_day_of_month, VAR_BASE_TIME_RTC_DAY_OF_WEEK: var_base_time_rtc_day_of_week, VAR_BASE_TIME_RTC_DAY_OF_YEAR: var_base_time_rtc_day_of_year, VAR_BASE_TIME_RTC_HOUR: var_base_time_rtc_hour, VAR_BASE_TIME_RTC_MINUTE: var_base_time_rtc_minute, VAR_BASE_TIME_RTC_MONTH: var_base_time_rtc_month, VAR_BASE_TIME_RTC_SECOND: var_base_time_rtc_second, VAR_BASE_TIME_RTC_SECOND_EPOCH: var_base_time_rtc_second_epoch, VAR_BASE_TIME_RTC_TIMEZONE: var_base_time_rtc_timezone, VAR_BASE_TIME_RTC_YEAR: var_base_time_rtc_year, VAR_BASE_TIME_SITTING: var_base_time_sitting, VAR_BASE_TIME_SITTING_SLR: var_base_time_sitting_slr, VAR_BASE_TIME_SYSTEM_ON: var_base_time_system_on, VAR_BASE_FEEDBACK_SOUND_LEVEL: var_base_feedback_sound_level, VAR_BASE_USER_EXPERIENCE_LEVEL: var_base_user_experience_level, VAR_BASE_FEEDBACK_VIBRATION_INTENSITY: var_base_feedback_vibration_intensity, VAR_BASE_DIS_MANUFACTURER_NAME: var_base_dis_manufacturer_name, VAR_BASE_DIS_SERIAL_NUMBER: var_base_dis_serial_number, VAR_BASE_DIS_MODEL_NUMBER: var_base_dis_model_number, VAR_BASE_DIS_HARDWARE_REVISION: var_base_dis_hardware_revision, VAR_BASE_DIS_FIRMWARE_REVISION: var_base_dis_firmware_revision, VAR_BASE_DIS_SOFTWARE_REVISION: var_base_dis_software_revision, VAR_BASE_DIS_BONDING_PASSCODE: var_base_dis_bonding_passcode, VAR_BASE_FEEDBACK_MODE: var_base_feedback_mode, VAR_BASE_FEEDBACK_SOUND_PITCH_LEVEL: var_base_feedback_sound_pitch_level, VAR_BASE_TRIGGER_FIRMWARE_UPDATE: var_base_trigger_firmware_update, VAR_BASE_HIBERNATION_COUNT: var_base_hibernation_count, VAR_BASE_SHUTOFF_COUNT: var_base_shutoff_count, VAR_BASE_RESET_POR_COUNT: var_base_reset_por_count, VAR_BASE_RESET_EXT_INT_COUNT: var_base_reset_ext_int_count, VAR_BASE_RESET_WATCHDOG_COUNT: var_base_reset_watchdog_count, VAR_BASE_RESET_BROWN_OUT_COUNT: var_base_reset_brown_out_count, VAR_BASE_ACTIVE_RATIO: var_base_active_ratio, VAR_BASE_TIME_INACTIVE: var_base_time_inactive, VAR_BASE_TIME_ON_ACTIVE_RATIO: var_base_time_on_active_ratio, VAR_BASE_TIME_ACTIVE_MINUTES: var_base_time_active_minutes, VAR_BASE_AMBIENT_LIGHT: var_base_ambient_light, VAR_BASE_3V3_CURRENT: var_base_3v3_current, VAR_BASE_LOGGING_INTERVAL: var_base_logging_interval, VAR_BASE_ENABLE_LOW_POWER: var_base_enable_low_power, VAR_BASE_ENABLE_BLE: var_base_enable_ble, VAR_BASE_ENABLE_WIFI: var_base_enable_wifi, VAR_BASE_BATTERY_VOLTAGE_RAW: var_base_battery_voltage_raw, VAR_BASE_3V3_CURRENT_RAW: var_base_3v3_current_raw, VAR_BASE_ENABLE_CHARGING: var_base_enable_charging, VAR_BASE_CONNECTED_BLE: var_base_connected_ble, VAR_BASE_CONNECTED_WIFI: var_base_connected_wifi, VAR_BASE_BUTTON_PRESSED: var_base_button_pressed, VAR_BASE_RESET_UNEXPECTED_COUNT: var_base_reset_unexpected_count, VAR_BASE_TIME_OFF: var_base_time_off, VAR_BASE_DEVICE_STATE: var_base_device_state, VAR_BASE_SENSORY_FEEDBACK: var_base_sensory_feedback, VAR_BASE_SENSORY_FEEDBACK_SUBSCRIPTION: var_base_sensory_feedback_subscription, VAR_BASE_SENSORY_FEEDBACK_INTERVAL: var_base_sensory_feedback_interval, VAR_BASE_DEVICE_MODE: var_base_device_mode, VAR_BASE_PROCESSOR_LOAD: var_base_processor_load, VAR_BASE_PROCESSOR_LOAD_TIME: var_base_processor_load_time, VAR_BASE_PROCESSOR_LOAD_TIME_MAX: var_base_processor_load_time_max, VAR_BASE_PROCESSOR_LOAD_TIME_MIN: var_base_processor_load_time_min, VAR_BASE_MAIN_HARDWARE_VERSION: var_base_main_hardware_version, VAR_BASE_MAIN_HARDWARE_SERIAL: var_base_main_hardware_serial, VAR_BASE_UI_HARDWARE_VERSION: var_base_ui_hardware_version, VAR_BASE_UI_HARDWARE_SERIAL: var_base_ui_hardware_serial, VAR_BASE_ANGLE_HARDWARE_VERSION: var_base_angle_hardware_version, VAR_BASE_ANGLE_HARDWARE_SERIAL: var_base_angle_hardware_serial, VAR_BASE_CONNECTION_HARDWARE_VERSION: var_base_connection_hardware_version, VAR_BASE_CONNECTION_HARDWARE_SERIAL: var_base_connection_hardware_serial, VAR_BASE_BATTERY_SERIAL: var_base_battery_serial, VAR_BASE_VERTICAL_DISPLACEMENT: var_base_vertical_displacement, VAR_BASE_TEMPERATURE_SECMCU: var_base_temperature_secmcu, VAR_BASE_3V3_VOLTAGE: var_base_3v3_voltage, VAR_BASE_INFRARED_LIGHT: var_base_infrared_light, VAR_BASE_BUTTON_PRESSED_COUNT: var_base_button_pressed_count, VAR_BASE_DEVICE_CHARGE_COUNT: var_base_device_charge_count, VAR_BASE_TIME_RTC_RELATIVE_SECOND_EPOCH: var_base_time_rtc_relative_second_epoch, VAR_BASE_WIFI_FIRMWARE_VERSION: var_base_wifi_firmware_version, VAR_BASE_WIFI_DRIVER_VERSION: var_base_wifi_driver_version, VAR_BASE_COMMUNICATION_STATUS: var_base_communication_status, VAR_BASE_COMMUNICATION_TEST: var_base_communication_test, VAR_BASE_BIONIC_CONST_VERSION: var_base_bionic_const_version, VAR_BASE_BIONIC_CONST_VERSION_SECMCU: var_base_bionic_const_version_secmcu, VAR_BASE_LED_BRIGHTNESS: var_base_led_brightness, VAR_BASE_UI_CHARGING_MODE: var_base_ui_charging_mode, VAR_BASE_MB_ADC_CH0: var_base_mb_adc_ch0, VAR_BASE_MB_ADC_CH1: var_base_mb_adc_ch1, VAR_BASE_MB_ADC_CH2: var_base_mb_adc_ch2, VAR_BASE_MB_ADC_CH3: var_base_mb_adc_ch3, VAR_BASE_MB_ADC_CH4: var_base_mb_adc_ch4, VAR_BASE_MB_ADC_CH5: var_base_mb_adc_ch5, VAR_BASE_MB_ADC_CH6: var_base_mb_adc_ch6, VAR_BASE_MB_ADC_CH7: var_base_mb_adc_ch7, VAR_BASE_MB_ADC_CH0_RAW: var_base_mb_adc_ch0_raw, VAR_BASE_MB_ADC_CH1_RAW: var_base_mb_adc_ch1_raw, VAR_BASE_MB_ADC_CH2_RAW: var_base_mb_adc_ch2_raw, VAR_BASE_MB_ADC_CH3_RAW: var_base_mb_adc_ch3_raw, VAR_BASE_MB_ADC_CH4_RAW: var_base_mb_adc_ch4_raw, VAR_BASE_MB_ADC_CH5_RAW: var_base_mb_adc_ch5_raw, VAR_BASE_MB_ADC_CH6_RAW: var_base_mb_adc_ch6_raw, VAR_BASE_MB_ADC_CH7_RAW: var_base_mb_adc_ch7_raw, VAR_BASE_MB_ADC_STATUS: var_base_mb_adc_status, VAR_BASE_LIN_ACC_X_LOCAL: var_base_lin_acc_x_local, VAR_BASE_LIN_ACC_Y_LOCAL: var_base_lin_acc_y_local, VAR_BASE_LIN_ACC_Z_LOCAL: var_base_lin_acc_z_local, VAR_BASE_LIN_ACC_X_GLOBAL: var_base_lin_acc_x_global, VAR_BASE_LIN_ACC_Y_GLOBAL: var_base_lin_acc_y_global, VAR_BASE_LIN_ACC_Z_GLOBAL: var_base_lin_acc_z_global, VAR_BASE_GRAV_VECT_X: var_base_grav_vect_x, VAR_BASE_GRAV_VECT_Y: var_base_grav_vect_y, VAR_BASE_GRAV_VECT_Z: var_base_grav_vect_z, VAR_BASE_IMU_STATUS: var_base_imu_status, VAR_BASE_GAIT_PHASE: var_base_gait_phase, VAR_BASE_CADENCE: var_base_cadence, VAR_BASE_STANCE_DURATION: var_base_stance_duration, VAR_BASE_SWING_DURATION: var_base_swing_duration, VAR_BASE_PROCESSOR_LOAD_AVG: var_base_processor_load_avg, VAR_BASE_HRT_DURATION: var_base_hrt_duration, VAR_BASE_HRT_DURATION_MAX: var_base_hrt_duration_max, VAR_BASE_HRT_DURATION_AVG: var_base_hrt_duration_avg, VAR_BASE_STACK_MEM_USAGE: var_base_stack_mem_usage, VAR_BASE_STACK_MEM_USAGE_KB: var_base_stack_mem_usage_kb, VAR_BASE_HEAP_MEM_USAGE: var_base_heap_mem_usage, VAR_BASE_HEAP_MEM_USAGE_KB: var_base_heap_mem_usage_kb, VAR_BASE_DIAG_IO_UPDATE: var_base_diag_io_update, VAR_BASE_BATTERY_STATUS: var_base_battery_status, VAR_BASE_BATTERY_REMAINING_CAPACITY: var_base_battery_remaining_capacity, VAR_BASE_USER_WARNING: var_base_user_warning, VAR_BASE_GAIT_SUBPHASE: var_base_gait_subphase, VAR_BASE_ACC_X_LOCAL: var_base_acc_x_local, VAR_BASE_ACC_Y_LOCAL: var_base_acc_y_local, VAR_BASE_ACC_Z_LOCAL: var_base_acc_z_local, VAR_BASE_GYRO_X_LOCAL: var_base_gyro_x_local, VAR_BASE_GYRO_Y_LOCAL: var_base_gyro_y_local, VAR_BASE_GYRO_Z_LOCAL: var_base_gyro_z_local, VAR_BASE_LED_STATUS: var_base_led_status, VAR_BASE_MOMENT: var_base_moment, VAR_BASE_ON_GROUND: var_base_on_ground, VAR_BASE_OPERATIONAL_MODE: var_base_operational_mode, VAR_BASE_CALIBRATION_STATUS: var_base_calibration_status, VAR_BASE_FIRMWARE_EXECUTION_REMAP: var_base_firmware_execution_remap, VAR_BASE_TEMPERATURE_STATUS: var_base_temperature_status, VAR_BASE_B3C_DUMMY_VARIABLE_FLOAT: var_base_b3c_dummy_variable_float, VAR_BASE_B3C_DUMMY_VARIABLE_UINT8: var_base_b3c_dummy_variable_uint8, VAR_BASE_WARNING: var_base_warning, VAR_LEG_ACCEL_DELTA: var_leg_accel_delta, VAR_LEG_CHAIR_EXIT_COUNT: var_leg_chair_exit_count, VAR_LEG_CHAIR_EXIT_COUNT_SLR: var_leg_chair_exit_count_slr, VAR_LEG_DISTANCE: var_leg_distance, VAR_LEG_DISTANCE_SLR: var_leg_distance_slr, VAR_LEG_FILTERED_SURFACE_ANGLE: var_leg_filtered_surface_angle, VAR_LEG_FORCE_ANTERIOR: var_leg_force_anterior, VAR_LEG_FORCE_POSTERIOR: var_leg_force_posterior, VAR_LEG_FORCE_MAX_ANTERIOR: var_leg_force_max_anterior, VAR_LEG_FORCE_MAX_POSTERIOR: var_leg_force_max_posterior, VAR_LEG_FORCE_MAX_ANTERIOR_AVERAGE: var_leg_force_max_anterior_average, VAR_LEG_FORCE_MAX_ANTERIOR_AVERAGE_SLR: var_leg_force_max_anterior_average_slr, VAR_LEG_FORCE_MAX_POSTERIOR_AVERAGE: var_leg_force_max_posterior_average, VAR_LEG_FORCE_MAX_POSTERIOR_AVERAGE_SLR: var_leg_force_max_posterior_average_slr, VAR_LEG_FORCE_RATIO_MAX_ANT_POST: var_leg_force_ratio_max_ant_post, VAR_LEG_FORCE_RATIO_MAX_ANT_POST_SLR: var_leg_force_ratio_max_ant_post_slr, VAR_LEG_HEELSTRIKE_COUNT: var_leg_heelstrike_count, VAR_LEG_HEELSTRIKE_COUNT_SLR: var_leg_heelstrike_count_slr, VAR_LEG_MAX_ACCEL_DELTA: var_leg_max_accel_delta, VAR_LEG_MAX_ACCEL_DELTA_SLR: var_leg_max_accel_delta_slr, VAR_LEG_MIDSTANCE_COUNT: var_leg_midstance_count, VAR_LEG_MIDSTANCE_COUNT_SLR: var_leg_midstance_count_slr, VAR_LEG_MIDSWING_COUNT: var_leg_midswing_count, VAR_LEG_MIDSWING_COUNT_SLR: var_leg_midswing_count_slr, VAR_LEG_MODE_DOWNSTAIRS: var_leg_mode_downstairs, VAR_LEG_MODE_RELAX: var_leg_mode_relax, VAR_LEG_MODE_UPSTAIRS: var_leg_mode_upstairs, VAR_LEG_SPEED: var_leg_speed, VAR_LEG_SPEED_DOWNSTAIRS: var_leg_speed_downstairs, VAR_LEG_SPEED_DOWNSTAIRS_SLR: var_leg_speed_downstairs_slr, VAR_LEG_SPEED_DOWNSTAIRS_AVERAGE: var_leg_speed_downstairs_average, VAR_LEG_SPEED_DOWNSTAIRS_AVERAGE_SLR: var_leg_speed_downstairs_average_slr, VAR_LEG_SPEED_UPSTAIRS: var_leg_speed_upstairs, VAR_LEG_SPEED_UPSTAIRS_SLR: var_leg_speed_upstairs_slr, VAR_LEG_SPEED_UPSTAIRS_AVERAGE: var_leg_speed_upstairs_average, VAR_LEG_SPEED_UPSTAIRS_AVERAGE_SLR: var_leg_speed_upstairs_average_slr, VAR_LEG_SPEED_WALK_AVERAGE: var_leg_speed_walk_average, VAR_LEG_SPEED_WALK_AVERAGE_SLR: var_leg_speed_walk_average_slr, VAR_LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE: var_leg_stance_time_downstairs_average, VAR_LEG_STANCE_TIME_DOWNSTAIRS_AVERAGE_SLR: var_leg_stance_time_downstairs_average_slr, VAR_LEG_STANCE_TIME_UPSTAIRS_AVERAGE: var_leg_stance_time_upstairs_average, VAR_LEG_STANCE_TIME_UPSTAIRS_AVERAGE_SLR: var_leg_stance_time_upstairs_average_slr, VAR_LEG_STANCE_TIME_WALK_AVERAGE: var_leg_stance_time_walk_average, VAR_LEG_STANCE_TIME_WALK_AVERAGE_SLR: var_leg_stance_time_walk_average_slr, VAR_LEG_STEP_COUNT: var_leg_step_count, VAR_LEG_STEP_COUNT_DOWNSTAIRS: var_leg_step_count_downstairs, VAR_LEG_STEP_COUNT_DOWNSTAIRS_SLR: var_leg_step_count_downstairs_slr, VAR_LEG_STEP_COUNT_IN_STAIRS: var_leg_step_count_in_stairs, VAR_LEG_STEP_COUNT_IN_STAIRS_SLR: var_leg_step_count_in_stairs_slr, VAR_LEG_STEP_COUNT_LAST_24_HOURS: var_leg_step_count_last_24_hours, VAR_LEG_STEP_COUNT_LAST_30_DAYS: var_leg_step_count_last_30_days, VAR_LEG_STEP_COUNT_LAST_12_MONTHS: var_leg_step_count_last_12_months, VAR_LEG_STEP_COUNT_SLR: var_leg_step_count_slr, VAR_LEG_STEP_COUNT_UPSTAIRS: var_leg_step_count_upstairs, VAR_LEG_STEP_COUNT_UPSTAIRS_SLR: var_leg_step_count_upstairs_slr, VAR_LEG_STEP_COUNT_WALKING: var_leg_step_count_walking, VAR_LEG_STEP_COUNT_WALKING_SLR: var_leg_step_count_walking_slr, VAR_LEG_STRIDE_AVERAGE_LENGTH: var_leg_stride_average_length, VAR_LEG_STRIDE_AVERAGE_LENGTH_SLR: var_leg_stride_average_length_slr, VAR_LEG_STRIDE_LENGTH: var_leg_stride_length, VAR_LEG_STRIDE_TIME: var_leg_stride_time, VAR_LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE: var_leg_stride_time_downstairs_average, VAR_LEG_STRIDE_TIME_DOWNSTAIRS_AVERAGE_SLR: var_leg_stride_time_downstairs_average_slr, VAR_LEG_STRIDE_TIME_UPSTAIRS_AVERAGE: var_leg_stride_time_upstairs_average, VAR_LEG_STRIDE_TIME_UPSTAIRS_AVERAGE_SLR: var_leg_stride_time_upstairs_average_slr, VAR_LEG_STRIDE_TIME_WALK_AVERAGE: var_leg_stride_time_walk_average, VAR_LEG_STRIDE_TIME_WALK_AVERAGE_SLR: var_leg_stride_time_walk_average_slr, VAR_LEG_STUMBLE_COUNT: var_leg_stumble_count, VAR_LEG_STUMBLE_COUNT_SLR: var_leg_stumble_count_slr, VAR_LEG_SURFACE_ANGLE: var_leg_surface_angle, VAR_LEG_SWING_TIME_DOWNSTAIRS_AVERAGE: var_leg_swing_time_downstairs_average, VAR_LEG_SWING_TIME_DOWNSTAIRS_AVERAGE_SLR: var_leg_swing_time_downstairs_average_slr, VAR_LEG_SWING_TIME_UPSTAIRS_AVERAGE: var_leg_swing_time_upstairs_average, VAR_LEG_SWING_TIME_UPSTAIRS_AVERAGE_SLR: var_leg_swing_time_upstairs_average_slr, VAR_LEG_SWING_TIME_WALK_AVERAGE: var_leg_swing_time_walk_average, VAR_LEG_SWING_TIME_WALK_AVERAGE_SLR: var_leg_swing_time_walk_average_slr, VAR_LEG_TIME_DOWNSTAIRS: var_leg_time_downstairs, VAR_LEG_TIME_DOWNSTAIRS_SLR: var_leg_time_downstairs_slr, VAR_LEG_TIME_STAIRS: var_leg_time_stairs, VAR_LEG_TIME_STAIRS_SLR: var_leg_time_stairs_slr, VAR_LEG_TIME_STANDING: var_leg_time_standing, VAR_LEG_TIME_STANDING_SLR: var_leg_time_standing_slr, VAR_LEG_TIME_UPSTAIRS: var_leg_time_upstairs, VAR_LEG_TIME_UPSTAIRS_SLR: var_leg_time_upstairs_slr, VAR_LEG_TIME_WALKING: var_leg_time_walking, VAR_LEG_TIME_WALKING_SLR: var_leg_time_walking_slr, VAR_LEG_TOE_OFF_COUNT: var_leg_toe_off_count, VAR_LEG_TOE_OFF_COUNT_SLR: var_leg_toe_off_count_slr, VAR_LEG_USER_FOOT_CATEGORY: var_leg_user_foot_category, VAR_LEG_USER_FOOT_PRODUCT: var_leg_user_foot_product, VAR_LEG_USER_FOOT_SIZE: var_leg_user_foot_size, VAR_LEG_USER_KNEE_HEIGHT: var_leg_user_knee_height, VAR_LEG_USER_LEG_SIZE: var_leg_user_leg_size, VAR_LEG_USER_THIGH_LENGTH: var_leg_user_thigh_length, VAR_LEG_USER_AMPUTATION: var_leg_user_amputation, VAR_LEG_VACUUM: var_leg_vacuum, VAR_LEG_VACUUM_AMBULATING_AVERAGE: var_leg_vacuum_ambulating_average, VAR_LEG_VACUUM_NON_AMBULATING_AVERAGE: var_leg_vacuum_non_ambulating_average, VAR_LEG_VACUUM_MAX: var_leg_vacuum_max, VAR_LEG_VACUUM_MAX_CHANGE_IN_STRIDE: var_leg_vacuum_max_change_in_stride, VAR_LEG_WALK_COUNT: var_leg_walk_count, VAR_LEG_STANCE_TIME_WALK_RATIO: var_leg_stance_time_walk_ratio, VAR_LEG_SWING_TIME_WALK_RATIO: var_leg_swing_time_walk_ratio, VAR_LEG_STANCE_TIME_WALK_RATIO_AVERAGE: var_leg_stance_time_walk_ratio_average, VAR_LEG_SWING_TIME_WALK_RATIO_AVERAGE: var_leg_swing_time_walk_ratio_average, VAR_LEG_STRIDE_COUNT: var_leg_stride_count, VAR_LEG_STRIDE_COUNT_SLR: var_leg_stride_count_slr, VAR_LEG_STEP_COUNT_TODAY: var_leg_step_count_today, VAR_LEG_STEP_COUNT_THIS_WEEK: var_leg_step_count_this_week, VAR_LEG_STEP_COUNT_THIS_MONTH: var_leg_step_count_this_month, VAR_LEG_STEP_COUNT_THIS_YEAR: var_leg_step_count_this_year, VAR_LEG_CADENCE_MAX_PER_DAY: var_leg_cadence_max_per_day, VAR_LEG_CADENCE_MAX: var_leg_cadence_max, VAR_LEG_CADENCE_MAX_TODAY: var_leg_cadence_max_today, VAR_LEG_USER_AGE: var_leg_user_age, VAR_LEG_USER_WEIGHT: var_leg_user_weight, VAR_LEG_ACCEL_DELTA_HEELSTRIKE: var_leg_accel_delta_heelstrike, VAR_LEG_ACCEL_DELTA_HEELSTRIKE_AVERAGE: var_leg_accel_delta_heelstrike_average, VAR_LEG_SURFACE_ANGLE_AVERAGE: var_leg_surface_angle_average, VAR_LEG_EARLY_STAIR_UP_DETECTION_COUNT: var_leg_early_stair_up_detection_count, VAR_LEG_EARLY_STAIR_UP_EXIT_COUNT: var_leg_early_stair_up_exit_count, VAR_LEG_EARLY_STAIR_DOWN_DETECTION_COUNT: var_leg_early_stair_down_detection_count, VAR_LEG_EARLY_STAIR_DOWN_EXIT_COUNT: var_leg_early_stair_down_exit_count, VAR_LEG_EARLY_RELAX_EXIT_COUNT: var_leg_early_relax_exit_count, VAR_LEG_JOINT_ANGLE_AGC: var_leg_joint_angle_agc, VAR_LEG_STRIDE_COUNT_MAX_PER_CHARGE: var_leg_stride_count_max_per_charge, VAR_LEG_U_TURN_COUNT: var_leg_u_turn_count, VAR_LEG_CURB_COUNT: var_leg_curb_count, VAR_LEG_FORCE_ANTERIOR_RAW: var_leg_force_anterior_raw, VAR_LEG_FORCE_POSTERIOR_RAW: var_leg_force_posterior_raw, VAR_LEG_FORCE_ANTERIOR_2: var_leg_force_anterior_2, VAR_LEG_FORCE_ANTERIOR_2_RAW: var_leg_force_anterior_2_raw, VAR_LEG_FORCE_POSTERIOR_2: var_leg_force_posterior_2, VAR_LEG_FORCE_POSTERIOR_2_RAW: var_leg_force_posterior_2_raw, VAR_LEG_FORCE_SENSOR_STATUS: var_leg_force_sensor_status, VAR_LEG_GROUND_REACTION_FORCE: var_leg_ground_reaction_force, VAR_LEG_SHANK_ANGLE_SAGITAL_PLANE: var_leg_shank_angle_sagital_plane, VAR_LEG_SHANK_ANGLE_ROTATION_WITHIN_PHASE: var_leg_shank_angle_rotation_within_phase, VAR_LEG_THIGH_ANGLE_IN_SAGITAL_PLANE: var_leg_thigh_angle_in_sagital_plane, VAR_LEG_THIGH_ANGLE_ROTATION_WITHIN_PHASE: var_leg_thigh_angle_rotation_within_phase, VAR_KNEE_EXTENSION_HOLD: var_knee_extension_hold, VAR_KNEE_FLEXION_TARGET_ANGLE: var_knee_flexion_target_angle, VAR_KNEE_JOINT_ANGLE: var_knee_joint_angle, VAR_KNEE_JOINT_RANGE_OF_MOTION: var_knee_joint_range_of_motion, VAR_KNEE_JOINT_RANGE_OF_MOTION_MAX: var_knee_joint_range_of_motion_max, VAR_KNEE_JOINT_RANGE_OF_MOTION_MIN: var_knee_joint_range_of_motion_min, VAR_KNEE_ACTUATOR_POSITION: var_knee_actuator_position, VAR_KNEE_ACTUATOR_RANGE_OF_MOTION: var_knee_actuator_range_of_motion, VAR_KNEE_ACTUATOR_TEMPERATURE: var_knee_actuator_temperature, VAR_KNEE_SITTING_DOWN_RESISTANCE: var_knee_sitting_down_resistance, VAR_KNEE_SITTING_DOWN_SIT_INITIATION_TRIGGER: var_knee_sitting_down_sit_initiation_trigger, VAR_KNEE_STANCE_ASSISTANCE: var_knee_stance_assistance, VAR_KNEE_STANCE_EXTENSION: var_knee_stance_extension, VAR_KNEE_STANCE_EXTENSION_COMPLETION: var_knee_stance_extension_completion, VAR_KNEE_STANCE_FLEXION_LEVEL_GROUND: var_knee_stance_flexion_level_ground, VAR_KNEE_STANCE_FLEXION_STAIRS_AND_RAMPS: var_knee_stance_flexion_stairs_and_ramps, VAR_KNEE_STANCE_PRE_SWING_THIGH_ANGLE: var_knee_stance_pre_swing_thigh_angle, VAR_KNEE_STANCE_RAMP_INITIATION_TRIGGER: var_knee_stance_ramp_initiation_trigger, VAR_KNEE_STANCE_RAMP_RESISTANCE: var_knee_stance_ramp_resistance, VAR_KNEE_STANCE_RESISTANCE: var_knee_stance_resistance, VAR_KNEE_STANDING_UP_ASSISTANCE: var_knee_standing_up_assistance, VAR_KNEE_SWING_EXTENSION_LEVEL_GROUND: var_knee_swing_extension_level_ground, VAR_KNEE_SWING_EXTENSION_SPEED: var_knee_swing_extension_speed, VAR_KNEE_SWING_EXTENSION_STAIRS_AND_RAMPS: var_knee_swing_extension_stairs_and_ramps, VAR_KNEE_SWING_FOOT_PLACEMENT_ANGLE: var_knee_swing_foot_placement_angle, VAR_KNEE_SWING_INITIATION_ANGLE: var_knee_swing_initiation_angle, VAR_KNEE_SWING_MAXIMUM_FLEXION: var_knee_swing_maximum_flexion, VAR_KNEE_SWING_STEP_CLERANCE: var_knee_swing_step_clerance, VAR_KNEE_TERMINAL_SWING_POINT: var_knee_terminal_swing_point, VAR_KNEE_TERMINAL_SWING_RESISTANCE: var_knee_terminal_swing_resistance, VAR_KNEE_SWING_INITIATION_MOMENT_POINT: var_knee_swing_initiation_moment_point, VAR_KNEE_BIKEMODE_ENABLE: var_knee_bikemode_enable, VAR_KNEE_BIKEMODE_FEEDBACK: var_knee_bikemode_feedback, VAR_KNEE_CONFIG_1: var_knee_config_1, VAR_KNEE_CONFIG_2: var_knee_config_2, VAR_KNEE_CONFIG_3: var_knee_config_3, VAR_KNEE_AVERAGE_MASS: var_knee_average_mass, VAR_KNEE_ACTUATOR_CURRENT: var_knee_actuator_current, VAR_KNEE_STABILITY_FEATURE_HOLD_AT_HEELSTRIKE: var_knee_stability_feature_hold_at_heelstrike, VAR_KNEE_STABILITY_FEATURE_HOLD_AT_LIFT: var_knee_stability_feature_hold_at_lift, VAR_KNEE_CT_ANGLE: var_knee_ct_angle, VAR_KNEE_CT_ANGLE_RAW: var_knee_ct_angle_raw, VAR_KNEE_CT_SENSOR_STATUS: var_knee_ct_sensor_status, VAR_KNEE_ACTUATOR_POSITION_RAW: var_knee_actuator_position_raw, VAR_KNEE_ACTUATOR_SENSOR_STATUS: var_knee_actuator_sensor_status, VAR_KNEE_ACTUATOR_APPLIED_TORQUE: var_knee_actuator_applied_torque, VAR_KNEE_ACTUATOR_APPLIED_TORQUE_RAW: var_knee_actuator_applied_torque_raw, VAR_KNEE_ACTUATOR_TEMPERATURE_RAW: var_knee_actuator_temperature_raw, VAR_KNEE_ACTUATOR_MOSFET_TEMP: var_knee_actuator_mosfet_temp, VAR_KNEE_ACTUATOR_MOSFET_TEMP_RAW: var_knee_actuator_mosfet_temp_raw, VAR_KNEE_ACTUATOR_STATUS_RAW: var_knee_actuator_status_raw, VAR_KNEE_JOINT_ROTATIONAL_VELOCITY: var_knee_joint_rotational_velocity, VAR_KNEE_ACTUATOR_ROTATIONAL_VELOCITY: var_knee_actuator_rotational_velocity, VAR_KNEE_ACTUATOR_STATUS: var_knee_actuator_status, VAR_POWER_KNEE_TORQUE_EST: var_power_knee_torque_est, VAR_POWER_KNEE_MDB_ADC_CH0: var_power_knee_mdb_adc_ch0, VAR_POWER_KNEE_MDB_ADC_CH0_RAW: var_power_knee_mdb_adc_ch0_raw, VAR_POWER_KNEE_MDB_ADC_CH1: var_power_knee_mdb_adc_ch1, VAR_POWER_KNEE_MDB_ADC_CH1_RAW: var_power_knee_mdb_adc_ch1_raw, VAR_POWER_KNEE_MDB_ADC_CH2: var_power_knee_mdb_adc_ch2, VAR_POWER_KNEE_MDB_ADC_CH2_RAW: var_power_knee_mdb_adc_ch2_raw, VAR_POWER_KNEE_MDB_ADC_CH3: var_power_knee_mdb_adc_ch3, VAR_POWER_KNEE_MDB_ADC_CH3_RAW: var_power_knee_mdb_adc_ch3_raw, VAR_POWER_KNEE_MDB_ADC_STATUS: var_power_knee_mdb_adc_status, VAR_POWER_KNEE_EXP_ADC_CH0: var_power_knee_exp_adc_ch0, VAR_POWER_KNEE_EXP_ADC_CH0_RAW: var_power_knee_exp_adc_ch0_raw, VAR_POWER_KNEE_EXP_ADC_CH1: var_power_knee_exp_adc_ch1, VAR_POWER_KNEE_EXP_ADC_CH1_RAW: var_power_knee_exp_adc_ch1_raw, VAR_POWER_KNEE_EXP_ADC_CH2: var_power_knee_exp_adc_ch2, VAR_POWER_KNEE_EXP_ADC_CH2_RAW: var_power_knee_exp_adc_ch2_raw, VAR_POWER_KNEE_EXP_ADC_CH3: var_power_knee_exp_adc_ch3, VAR_POWER_KNEE_EXP_ADC_CH3_RAW: var_power_knee_exp_adc_ch3_raw, VAR_POWER_KNEE_EXP_ADC_STATUS: var_power_knee_exp_adc_status, VAR_POWER_KNEE_ACTUATOR_SETPOINT: var_power_knee_actuator_setpoint, VAR_POWER_KNEE_ACTUATOR_SETPOINT_RAW: var_power_knee_actuator_setpoint_raw, VAR_POWER_KNEE_MAX_EXT_TORQ_EST: var_power_knee_max_ext_torq_est, VAR_POWER_KNEE_THIGH_ANG_AT_MAX_EXT_TORQ_EST: var_power_knee_thigh_ang_at_max_ext_torq_est, VAR_POWER_KNEE_BRK_ANGLE_TRIGGER: var_power_knee_brk_angle_trigger, VAR_POWER_KNEE_BA_ANGLE_TRIGGER: var_power_knee_ba_angle_trigger, VAR_POWER_KNEE_LIN_VEL_EST_X: var_power_knee_lin_vel_est_x, VAR_POWER_KNEE_LIN_VEL_EST_Y: var_power_knee_lin_vel_est_y, VAR_POWER_KNEE_LIN_POS_EST_X: var_power_knee_lin_pos_est_x, VAR_POWER_KNEE_LIN_POS_EST_Y: var_power_knee_lin_pos_est_y, VAR_POWER_KNEE_PHASE_TIMEOUT_DEC_COUNTER: var_power_knee_phase_timeout_dec_counter, VAR_POWER_KNEE_THIGH_ANG_AT_STANCE_FLEX_EST: var_power_knee_thigh_ang_at_stance_flex_est, VAR_POWER_KNEE_MAX_STANCE_FLEX_TORQUE_EST: var_power_knee_max_stance_flex_torque_est, VAR_POWER_KNEE_TOE_OFF_CRITERIA_MET: var_power_knee_toe_off_criteria_met, VAR_POWER_KNEE_JOINT_ANGLE_FROM_CT: var_power_knee_joint_angle_from_ct, VAR_POWER_KNEE_CONT_GAIN_KP: var_power_knee_cont_gain_kp, VAR_POWER_KNEE_CONT_GAIN_KD: var_power_knee_cont_gain_kd, VAR_POWER_KNEE_CONT_GAIN_KM: var_power_knee_cont_gain_km, VAR_POWER_KNEE_CONT_MIN_OUTPUT: var_power_knee_cont_min_output, VAR_POWER_KNEE_CONT_TARGET_ANGLE: var_power_knee_cont_target_angle, VAR_POWER_KNEE_CONT_TARGET_VELOCITY: var_power_knee_cont_target_velocity, VAR_POWER_KNEE_CONT_MINIMUM_INPUT: var_power_knee_cont_minimum_input, VAR_POWER_KNEE_CONT_POS_ERROR: var_power_knee_cont_pos_error, VAR_POWER_KNEE_CONT_VEL_ERROR: var_power_knee_cont_vel_error, VAR_POWER_KNEE_THIGH_ROT_VEL: var_power_knee_thigh_rot_vel, VAR_POWER_KNEE_SHANK_ROT_VEL: var_power_knee_shank_rot_vel, VAR_POWER_KNEE_THIGH_ROT_VEL_STANCE: var_power_knee_thigh_rot_vel_stance, VAR_POWER_KNEE_HIP_CONST_EXT_IN_STANCE: var_power_knee_hip_const_ext_in_stance, VAR_POWER_KNEE_VERT_DISPL_EST: var_power_knee_vert_displ_est, VAR_POWER_KNEE_HORIZ_DISPL_EST: var_power_knee_horiz_displ_est, VAR_POWER_KNEE_PROFILE_ID: var_power_knee_profile_id, VAR_POWER_KNEE_STANCE_FLEXION_LEVEL: var_power_knee_stance_flexion_level, VAR_POWER_KNEE_TOA_TORQUE_LEVEL: var_power_knee_toa_torque_level, VAR_POWER_KNEE_MAX_SWING_FLEXION_ANGLE_WALKING: var_power_knee_max_swing_flexion_angle_walking, VAR_POWER_KNEE_FA_FP_WALKING_SPEED: var_power_knee_fa_fp_walking_speed, VAR_POWER_KNEE_FA_FP_STEP_LIMIT: var_power_knee_fa_fp_step_limit, VAR_POWER_KNEE_SDN_TORQUE_LEVEL: var_power_knee_sdn_torque_level, VAR_POWER_KNEE_SDN_RESISTANCE_LEVEL: var_power_knee_sdn_resistance_level, VAR_POWER_KNEE_SUP_ASSISTANCE_LEVEL: var_power_knee_sup_assistance_level, VAR_POWER_KNEE_DIS_RESISTANCE_LEVEL: var_power_knee_dis_resistance_level, VAR_POWER_KNEE_DIS_EXT_SPEED: var_power_knee_dis_ext_speed, VAR_POWER_KNEE_RAMP_RESISTANCE_LEVEL: var_power_knee_ramp_resistance_level, VAR_POWER_KNEE_GEN_ASSISTANCE_LEVEL: var_power_knee_gen_assistance_level, VAR_POWER_KNEE_GEN_FLEXION_ANGLE: var_power_knee_gen_flexion_angle, VAR_POWER_KNEE_GEN_FOOT_PLACEMENT_ANGLE: var_power_knee_gen_foot_placement_angle, VAR_POWER_KNEE_RAMP_TORQUE_LEVEL: var_power_knee_ramp_torque_level, VAR_POWER_KNEE_EXERCISE_MODE: var_power_knee_exercise_mode, VAR_POWER_KNEE_GAIT_CONTROL_MODE: var_power_knee_gait_control_mode, VAR_POWER_KNEE_DISABLE_STAIR_ASCENT: var_power_knee_disable_stair_ascent, VAR_POWER_KNEE_AUTO_ADJUSTMENT_STATUS: var_power_knee_auto_adjustment_status, VAR_POWER_KNEE_AUTO_ADJUSTMENT_VALID_STEPS: var_power_knee_auto_adjustment_valid_steps, VAR_POWER_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS: var_power_knee_auto_adjustment_invalid_steps, VAR_POWER_KNEE_AMPUTATION_TYPE: var_power_knee_amputation_type, VAR_POWER_KNEE_IMU_DRIFT_STATUS: var_power_knee_imu_drift_status, VAR_POWER_KNEE_DEBUG_ANGLES: var_power_knee_debug_angles, VAR_POWER_KNEE_DEBUG_LOADCELL_TORQUE_FLAGS: var_power_knee_debug_loadcell_torque_flags, VAR_POWER_KNEE_DEBUG_VELOCITY: var_power_knee_debug_velocity, VAR_POWER_KNEE_TOE_LOAD: var_power_knee_toe_load, VAR_POWER_KNEE_TOE_LOAD_DURATION: var_power_knee_toe_load_duration, VAR_POWER_KNEE_VIRTUAL_EXT_SPRING: var_power_knee_virtual_ext_spring, VAR_POWER_KNEE_VIRTUAL_FLEX_SPRING: var_power_knee_virtual_flex_spring, VAR_POWER_KNEE_STEP_SECTION_INDEX: var_power_knee_step_section_index, VAR_RHEO_KNEE_HBDRV_STATUS: var_rheo_knee_hbdrv_status, VAR_RHEO_KNEE_ACTUATOR_SETPOINT: var_rheo_knee_actuator_setpoint, VAR_RHEO_KNEE_ACTUATOR_SETPOINT_RAW: var_rheo_knee_actuator_setpoint_raw, VAR_RHEO_KNEE_ACTUATOR_DIRECTION: var_rheo_knee_actuator_direction, VAR_RHEO_KNEE_ACTUATOR_DIRECTION_RAW: var_rheo_knee_actuator_direction_raw, VAR_RHEO_KNEE_KB_MOMENT_MIN: var_rheo_knee_kb_moment_min, VAR_RHEO_KNEE_MEASURED_CURRENT: var_rheo_knee_measured_current, VAR_RHEO_KNEE_MEASURED_CURRENT_RAW: var_rheo_knee_measured_current_raw, VAR_RHEO_KNEE_CHG_FAULT: var_rheo_knee_chg_fault, VAR_RHEO_KNEE_CHG_ACP: var_rheo_knee_chg_acp, VAR_RHEO_KNEE_CHG_CHG: var_rheo_knee_chg_chg, VAR_RHEO_KNEE_BIKE_MODE_STATUS: var_rheo_knee_bike_mode_status, VAR_RHEO_KNEE_DEBUG_F1: var_rheo_knee_debug_f1, VAR_RHEO_KNEE_DEBUG_F2: var_rheo_knee_debug_f2, VAR_RHEO_KNEE_DEBUG_U1: var_rheo_knee_debug_u1, VAR_RHEO_KNEE_DEBUG_U2: var_rheo_knee_debug_u2, VAR_RHEO_KNEE_DEBUG_I1: var_rheo_knee_debug_i1, VAR_RHEO_KNEE_DEBUG_I2: var_rheo_knee_debug_i2, VAR_RHEO_KNEE_DEBUG_B1: var_rheo_knee_debug_b1, VAR_RHEO_KNEE_CHG_FLAG: var_rheo_knee_chg_flag, VAR_RHEO_KNEE_LOADCELL_RATE: var_rheo_knee_loadcell_rate, VAR_RHEO_KNEE_AUTO_ADJUSTMENT_STATUS: var_rheo_knee_auto_adjustment_status, VAR_RHEO_KNEE_AUTO_ADJUSTMENT_VALID_STEPS: var_rheo_knee_auto_adjustment_valid_steps, VAR_RHEO_KNEE_AUTO_ADJUSTMENT_INVALID_STEPS: var_rheo_knee_auto_adjustment_invalid_steps, VAR_RHEO_KNEE_WALKING_SPEED_ESTIMATION: var_rheo_knee_walking_speed_estimation, VAR_RHEO_KNEE_MAGNETIC_MAGNITUDE: var_rheo_knee_magnetic_magnitude, VAR_RHEO_KNEE_MAGNETIC_MAGNITUDE_RAW: var_rheo_knee_magnetic_magnitude_raw, VAR_RHEO_KNEE_STATIC_TORQUE: var_rheo_knee_static_torque, VAR_RHEO_KNEE_MOUNTAIN: var_rheo_knee_mountain, VAR_RHEO_KNEE_WALKING_SPEED_BIN: var_rheo_knee_walking_speed_bin, VAR_RHEO_KNEE_RUNNING_ACTIVE: var_rheo_knee_running_active, VAR_RHEO_KNEE_TORQUE_VELOCITY: var_rheo_knee_torque_velocity, VAR_RHEO_KNEE_INDEPENDENT: var_rheo_knee_independent, VAR_RHEO_KNEE_DISABLE_STAIR_ASCENT: var_rheo_knee_disable_stair_ascent, VAR_RHEO_KNEE_ACC_Z_POSITION: var_rheo_knee_acc_z_position, VAR_RHEO_KNEE_ACC_Z_MAX: var_rheo_knee_acc_z_max, VAR_RHEO_KNEE_ACC_Y_VELOCITY_DIFFERENCE: var_rheo_knee_acc_y_velocity_difference, VAR_RHEO_KNEE_LOAD_CELL_ANTERIOR_AUTO_CALIB_OFFSET: var_rheo_knee_load_cell_anterior_auto_calib_offset, VAR_RHEO_KNEE_LOAD_CELL_POSTERIOR_AUTO_CALIB_OFFSET: var_rheo_knee_load_cell_posterior_auto_calib_offset, VAR_RHEO_KNEE_LOAD_CELL_AUTO_CALIB_STEPS: var_rheo_knee_load_cell_auto_calib_steps, VAR_RHEO_KNEE_ESTIMATED_WEIGHT: var_rheo_knee_estimated_weight, VAR_RHEO_KNEE_RELATIVE_THIGH_ANGLE: var_rheo_knee_relative_thigh_angle, VAR_RHEO_KNEE_RELATIVE_SHANK_ANGLE: var_rheo_knee_relative_shank_angle, VAR_FOOT_ENABLE_ADAPTIVE_STANCE_ANGLE: var_foot_enable_adaptive_stance_angle, VAR_FOOT_ENABLE_SURFACE_ADAPTATION: var_foot_enable_surface_adaptation, VAR_FOOT_ENABLE_TOELIFT_IN_SWING: var_foot_enable_toelift_in_swing, VAR_FOOT_ENABLE_EARLY_STAIR_UP_DETECTION: var_foot_enable_early_stair_up_detection, VAR_FOOT_ENABLE_U_TURN_DETECTION: var_foot_enable_u_turn_detection, VAR_FOOT_FLAT_WALK_CALIBRATION_ANGLE: var_foot_flat_walk_calibration_angle, VAR_FOOT_FLAT_WALK_CALIBRATION_SPEED: var_foot_flat_walk_calibration_speed, VAR_FOOT_HEEL_HEIGHT: var_foot_heel_height, VAR_FOOT_JOINT_ANGLE: var_foot_joint_angle, VAR_FOOT_JOINT_ANGLE_GAIN: var_foot_joint_angle_gain, VAR_FOOT_JOINT_ANGLE_OFFSET: var_foot_joint_angle_offset, VAR_FOOT_JOINT_ANGLE_UNCALIBRATED: var_foot_joint_angle_uncalibrated, VAR_FOOT_JOINT_RANGE_OF_MOTION: var_foot_joint_range_of_motion, VAR_FOOT_JOINT_RANGE_OF_MOTION_MARGIN: var_foot_joint_range_of_motion_margin, VAR_FOOT_JOINT_RANGE_OF_MOTION_MAX: var_foot_joint_range_of_motion_max, VAR_FOOT_JOINT_RANGE_OF_MOTION_MIN: var_foot_joint_range_of_motion_min, VAR_FOOT_ENABLE_MANUAL_MODE: var_foot_enable_manual_mode, VAR_FOOT_MOTOR_FAILED_RETRIES: var_foot_motor_failed_retries, VAR_FOOT_MOTOR_POSITION: var_foot_motor_position, VAR_FOOT_MOTOR_RANGE_LIMIT_MAX: var_foot_motor_range_limit_max, VAR_FOOT_MOTOR_RANGE_LIMIT_MIN: var_foot_motor_range_limit_min, VAR_FOOT_MOTOR_RANGE_OF_MOTION: var_foot_motor_range_of_motion, VAR_FOOT_MOTOR_MOVE_COUNT: var_foot_motor_move_count, VAR_FOOT_MOTOR_RAMP_UP_RATE: var_foot_motor_ramp_up_rate, VAR_FOOT_MOTOR_SLIP_COUNT: var_foot_motor_slip_count, VAR_FOOT_MOTOR_START_FREQUENCY: var_foot_motor_start_frequency, VAR_FOOT_MOTOR_TOP_FREQUENCY: var_foot_motor_top_frequency, VAR_FOOT_MOTOR_MOVED_DEGREES: var_foot_motor_moved_degrees, VAR_FOOT_RELAX_COUNT: var_foot_relax_count, VAR_FOOT_RELAX_COUNT_SLR: var_foot_relax_count_slr, VAR_FOOT_SET_HEEL_HEIGHT_COUNT: var_foot_set_heel_height_count, VAR_FOOT_SET_HEEL_HEIGHT_COUNT_SLR: var_foot_set_heel_height_count_slr, VAR_FOOT_STANCE_ANGLE: var_foot_stance_angle, VAR_FOOT_ADAPTATION_INCLINE_RATE: var_foot_adaptation_incline_rate, VAR_FOOT_ADAPTATION_DECLINE_RATE: var_foot_adaptation_decline_rate, VAR_FOOT_SWING_ANGLE: var_foot_swing_angle, VAR_FOOT_TIMEOUT_COUNT: var_foot_timeout_count, VAR_FOOT_TIMEOUT_COUNT_SLR: var_foot_timeout_count_slr, VAR_FOOT_TOELIFT_ABORT_COUNT: var_foot_toelift_abort_count, VAR_FOOT_TOELIFT_ABORT_COUNT_SLR: var_foot_toelift_abort_count_slr, VAR_FOOT_TOELIFT_COUNT: var_foot_toelift_count, VAR_FOOT_TOELIFT_COUNT_SLR: var_foot_toelift_count_slr, VAR_FOOT_SET_FLAT_WALK_COUNT: var_foot_set_flat_walk_count, VAR_FOOT_SET_FLAT_WALK_COUNT_SLR: var_foot_set_flat_walk_count_slr, VAR_FOOT_ADAPTATION_RELAX_RATE: var_foot_adaptation_relax_rate, VAR_FOOT_ADAPTATION_CHAIR_EXIT_RATE: var_foot_adaptation_chair_exit_rate, VAR_FOOT_ADAPTATION_STAIRS_UP_ANGLE: var_foot_adaptation_stairs_up_angle, VAR_FOOT_ADAPTATION_STAIRS_DOWN_ANGLE: var_foot_adaptation_stairs_down_angle, VAR_FOOT_MOTOR_VOLTAGE: var_foot_motor_voltage, VAR_FOOT_MOTOR_CURRENT: var_foot_motor_current, VAR_FOOT_RELAX_ENABLE: var_foot_relax_enable, VAR_FOOT_CHAIR_EXIT_ENABLE: var_foot_chair_exit_enable, VAR_FOOT_MOTOR_VOLTAGE_RAW: var_foot_motor_voltage_raw, VAR_FOOT_MOTOR_CURRENT_RAW: var_foot_motor_current_raw, VAR_FOOT_HEEL_HEIGHT_BAREFOOT: var_foot_heel_height_barefoot, VAR_FOOT_MOTOR_MOVE_TIME: var_foot_motor_move_time, VAR_FOOT_MOTOR_MOVE_TIME_PER_DEGREE: var_foot_motor_move_time_per_degree, VAR_FOOT_MOTOR_MOVE_TIME_TOTAL: var_foot_motor_move_time_total, VAR_FOOT_DEVICE_CALIBRATED: var_foot_device_calibrated, VAR_FOOT_MOTOR_ANGLE: var_foot_motor_angle, VAR_FOOT_U_TURN_DETECTION_GYRO_FORWARD: var_foot_u_turn_detection_gyro_forward, VAR_FOOT_U_TURN_DETECTION_GYRO_UP: var_foot_u_turn_detection_gyro_up, VAR_FOOT_MOTOR_STEP_MODE: var_foot_motor_step_mode, VAR_FOOT_MOTOR_BACKDRIVE_COUNT: var_foot_motor_backdrive_count, VAR_FOOT_MOTOR_POSITION_STATE: var_foot_motor_position_state, VAR_FOOT_MOTOR_TARGET_WINDOW: var_foot_motor_target_window, VAR_FOOT_MOTOR_CURRENT_FREQUENCY: var_foot_motor_current_frequency, VAR_FOOT_EARLY_STAIR_VEL_FORW: var_foot_early_stair_vel_forw, VAR_FOOT_EARLY_STAIR_VEL_UP: var_foot_early_stair_vel_up, VAR_FOOT_EARLY_STAIR_POS_FORW: var_foot_early_stair_pos_forw, VAR_FOOT_EARLY_STAIR_POS_UP: var_foot_early_stair_pos_up, VAR_FOOT_EARLY_STAIR_VELOCITY_UP_OFFSET: var_foot_early_stair_velocity_up_offset, VAR_FOOT_EARLY_STAIR_POSITION_UP_OFFSET: var_foot_early_stair_position_up_offset, VAR_FOOT_MOTOR_RAMP_UP_RATE_FAST: var_foot_motor_ramp_up_rate_fast, VAR_FOOT_MOTOR_START_FREQUENCY_FAST: var_foot_motor_start_frequency_fast, VAR_FOOT_MOTOR_TOP_FREQUENCY_FAST: var_foot_motor_top_frequency_fast, VAR_FOOT_ENABLE_EARLY_STAIR_DOWN_DETECTION: var_foot_enable_early_stair_down_detection, VAR_FOOT_ENABLE_CURB_DETECTION: var_foot_enable_curb_detection, VAR_HIP_LEFT_JOINT_ANGLE: var_hip_left_joint_angle, VAR_HIP_RIGHT_JOINT_ANGLE: var_hip_right_joint_angle, VAR_HEART_RATE_MONITOR_VALUE: var_heart_rate_monitor_value, VAR_HEART_RATE_MONITOR_FLAGS: var_heart_rate_monitor_flags, VAR_HEART_RATE_MONITOR_LOCATION: var_heart_rate_monitor_location, VAR_BSMB_CONNECT_TO_DEVICE_1: var_bsmb_connect_to_device_1, VAR_BSMB_CONNECT_TO_DEVICE_2: var_bsmb_connect_to_device_2, VAR_BSMB_CONNECT_TO_DEVICE_3: var_bsmb_connect_to_device_3, VAR_BSMB_CONNECT_TO_DEVICE_4: var_bsmb_connect_to_device_4, VAR_BSMB_CONNECT_TO_DEVICE_1_PASSKEY: var_bsmb_connect_to_device_1_passkey, VAR_BSMB_CONNECT_TO_DEVICE_2_PASSKEY: var_bsmb_connect_to_device_2_passkey, VAR_BSMB_CONNECT_TO_DEVICE_3_PASSKEY: var_bsmb_connect_to_device_3_passkey, VAR_BSMB_CONNECT_TO_DEVICE_4_PASSKEY: var_bsmb_connect_to_device_4_passkey, VAR_BSMB_MUSCLE_FLEX: var_bsmb_muscle_flex, VAR_BSMB_MUSCLE_EXTEND: var_bsmb_muscle_extend, VAR_BSMB_MUSCLE_FLEX_GAIN: var_bsmb_muscle_flex_gain, VAR_BSMB_MUSCLE_EXTEND_GAIN: var_bsmb_muscle_extend_gain, VAR_BSMB_MUSCLE_FLEX_AVG: var_bsmb_muscle_flex_avg, VAR_BSMB_MUSCLE_EXTEND_AVG: var_bsmb_muscle_extend_avg, VAR_BSMB_EMG_CONTROL_NORMALIZED: var_bsmb_emg_control_normalized, VAR_BSMB_MUSCLE_1: var_bsmb_muscle_1, VAR_BSMB_MUSCLE_2: var_bsmb_muscle_2, VAR_BSMB_MUSCLE_3: var_bsmb_muscle_3, VAR_BSMB_MUSCLE_4: var_bsmb_muscle_4, VAR_BSMB_MUSCLE_1_GAIN: var_bsmb_muscle_1_gain, VAR_BSMB_MUSCLE_2_GAIN: var_bsmb_muscle_2_gain, VAR_BSMB_MUSCLE_3_GAIN: var_bsmb_muscle_3_gain, VAR_BSMB_MUSCLE_4_GAIN: var_bsmb_muscle_4_gain, VAR_BSMB_MUSCLE_FLEX_SELECT: var_bsmb_muscle_flex_select, VAR_BSMB_MUSCLE_EXTEND_SELECT: var_bsmb_muscle_extend_select, VAR_BSMB_MUSCLE_FLEX_THRESHOLD: var_bsmb_muscle_flex_threshold, VAR_BSMB_MUSCLE_EXTEND_THRESHOLD: var_bsmb_muscle_extend_threshold, VAR_BSMB_ENABLE_EMG_AMBULATION_CONTROL: var_bsmb_enable_emg_ambulation_control, VAR_BSMB_EMG_CONTROL_METHOD: var_bsmb_emg_control_method, VAR_BSMB_EMG_CONTROL_RETURN_TO_NEUTRAL: var_bsmb_emg_control_return_to_neutral, VAR_BSMB_CONNECT_TO_DEVICES: var_bsmb_connect_to_devices, VAR_BSMB_TRANCEIVE_DATA: var_bsmb_tranceive_data, VAR_BSMB_TB_AMP1_FIFTY_HZ_NOTCH_FILTER: var_bsmb_tb_amp1_fifty_hz_notch_filter, VAR_BSMB_TB_AMP1_SIXTY_HZ_NOTCH_FILTER: var_bsmb_tb_amp1_sixty_hz_notch_filter, VAR_BSMB_TB_AMP1_THREE_HZ_HIGH_PASS_FILTER: var_bsmb_tb_amp1_three_hz_high_pass_filter, VAR_BSMB_TB_AMP1_TWENTY_HZ_HIGH_PASS_FILTER: var_bsmb_tb_amp1_twenty_hz_high_pass_filter, VAR_BSMB_TB_AMP1_PROPORTIONAL_CONTROL: var_bsmb_tb_amp1_proportional_control, VAR_BSMB_TB_AMP1_EMG_FILTERED: var_bsmb_tb_amp1_emg_filtered, VAR_BSMB_TB_AMP1_MAV: var_bsmb_tb_amp1_mav, VAR_BSMB_TB_AMP1_WFL: var_bsmb_tb_amp1_wfl, VAR_BSMB_TB_AMP1_CHANNEL_0_GAIN: var_bsmb_tb_amp1_channel_0_gain, VAR_BSMB_TB_AMP1_CHANNEL_1_GAIN: var_bsmb_tb_amp1_channel_1_gain, VAR_BSMB_TB_AMP1_BUFFER_LENGTH: var_bsmb_tb_amp1_buffer_length, VAR_BSMB_TB_AMP1_TRANSMIT_PERIOD: var_bsmb_tb_amp1_transmit_period, VAR_BSMB_TB_AMP1_OVERLAP: var_bsmb_tb_amp1_overlap, VAR_BSMB_TB_AMP1_EMG1: var_bsmb_tb_amp1_emg1, VAR_BSMB_TB_AMP1_EMG2: var_bsmb_tb_amp1_emg2, VAR_BSMB_TB_AMP1_ID: var_bsmb_tb_amp1_id, VAR_BSMB_TB_AMP2_FIFTY_HZ_NOTCH_FILTER: var_bsmb_tb_amp2_fifty_hz_notch_filter, VAR_BSMB_TB_AMP2_SIXTY_HZ_NOTCH_FILTER: var_bsmb_tb_amp2_sixty_hz_notch_filter, VAR_BSMB_TB_AMP2_THREE_HZ_HIGH_PASS_FILTER: var_bsmb_tb_amp2_three_hz_high_pass_filter, VAR_BSMB_TB_AMP2_TWENTY_HZ_HIGH_PASS_FILTER: var_bsmb_tb_amp2_twenty_hz_high_pass_filter, VAR_BSMB_TB_AMP2_PROPORTIONAL_CONTROL: var_bsmb_tb_amp2_proportional_control, VAR_BSMB_TB_AMP2_EMG_FILTERED: var_bsmb_tb_amp2_emg_filtered, VAR_BSMB_TB_AMP2_MAV: var_bsmb_tb_amp2_mav, VAR_BSMB_TB_AMP2_WFL: var_bsmb_tb_amp2_wfl, VAR_BSMB_TB_AMP2_CHANNEL_0_GAIN: var_bsmb_tb_amp2_channel_0_gain, VAR_BSMB_TB_AMP2_CHANNEL_1_GAIN: var_bsmb_tb_amp2_channel_1_gain, VAR_BSMB_TB_AMP2_BUFFER_LENGTH: var_bsmb_tb_amp2_buffer_length, VAR_BSMB_TB_AMP2_TRANSMIT_PERIOD: var_bsmb_tb_amp2_transmit_period, VAR_BSMB_TB_AMP2_OVERLAP: var_bsmb_tb_amp2_overlap, VAR_BSMB_TB_AMP2_EMG1: var_bsmb_tb_amp2_emg1, VAR_BSMB_TB_AMP2_EMG2: var_bsmb_tb_amp2_emg2, VAR_BSMB_TB_AMP2_ID: var_bsmb_tb_amp2_id, VAR_BSMB_HALL_EFFECT_1_X: var_bsmb_hall_effect_1_x, VAR_BSMB_HALL_EFFECT_1_Y: var_bsmb_hall_effect_1_y, VAR_BSMB_HALL_EFFECT_1_Z: var_bsmb_hall_effect_1_z, VAR_BSMB_HALL_EFFECT_1_X_OFFSET: var_bsmb_hall_effect_1_x_offset, VAR_BSMB_HALL_EFFECT_1_Y_OFFSET: var_bsmb_hall_effect_1_y_offset, VAR_BSMB_HALL_EFFECT_1_Z_OFFSET: var_bsmb_hall_effect_1_z_offset, VAR_BSMB_HALL_EFFECT_1_GAIN: var_bsmb_hall_effect_1_gain, VAR_BSMB_HALL_EFFECT_1_FILTER: var_bsmb_hall_effect_1_filter, VAR_BSMB_HALL_EFFECT_1_OSR: var_bsmb_hall_effect_1_osr, VAR_BSMB_HALL_EFFECT_2_X: var_bsmb_hall_effect_2_x, VAR_BSMB_HALL_EFFECT_2_Y: var_bsmb_hall_effect_2_y, VAR_BSMB_HALL_EFFECT_2_Z: var_bsmb_hall_effect_2_z, VAR_BSMB_HALL_EFFECT_2_X_OFFSET: var_bsmb_hall_effect_2_x_offset, VAR_BSMB_HALL_EFFECT_2_Y_OFFSET: var_bsmb_hall_effect_2_y_offset, VAR_BSMB_HALL_EFFECT_2_Z_OFFSET: var_bsmb_hall_effect_2_z_offset, VAR_BSMB_HALL_EFFECT_2_GAIN: var_bsmb_hall_effect_2_gain, VAR_BSMB_HALL_EFFECT_2_FILTER: var_bsmb_hall_effect_2_filter, VAR_BSMB_HALL_EFFECT_2_OSR: var_bsmb_hall_effect_2_osr, VAR_BSMB_MUSCLE_EC_1: var_bsmb_muscle_ec_1, VAR_BSMB_MUSCLE_EC_2: var_bsmb_muscle_ec_2, VAR_BSMB_MUSCLE_EC_3: var_bsmb_muscle_ec_3, VAR_BSMB_MUSCLE_EC_4: var_bsmb_muscle_ec_4, VAR_BSMB_MUSCLE_CONTROL_1: var_bsmb_muscle_control_1, VAR_BSMB_MUSCLE_CONTROL_2: var_bsmb_muscle_control_2, VAR_BSMB_MUSCLE_CONTROL_3: var_bsmb_muscle_control_3, VAR_BSMB_MUSCLE_CONTROL_4: var_bsmb_muscle_control_4, VAR_BSMB_MUSCLE_CONTROL_1_MAX: var_bsmb_muscle_control_1_max, VAR_BSMB_MUSCLE_CONTROL_2_MAX: var_bsmb_muscle_control_2_max, VAR_BSMB_MUSCLE_CONTROL_3_MAX: var_bsmb_muscle_control_3_max, VAR_BSMB_MUSCLE_CONTROL_4_MAX: var_bsmb_muscle_control_4_max, VAR_APO_HIP_LEFT_ACTUATOR_SETPOINT: var_apo_hip_left_actuator_setpoint, VAR_APO_HIP_LEFT_ACTUATOR_SETPOINT_RAW: var_apo_hip_left_actuator_setpoint_raw, VAR_APO_HIP_RIGHT_ACTUATOR_SETPOINT: var_apo_hip_right_actuator_setpoint, VAR_APO_HIP_RIGHT_ACTUATOR_SETPOINT_RAW: var_apo_hip_right_actuator_setpoint_raw, VAR_APO_HIP_LEFT_GAIT_PHASE: var_apo_hip_left_gait_phase, VAR_APO_HIP_RIGHT_GAIT_PHASE: var_apo_hip_right_gait_phase, VAR_APO_HIP_LEFT_AO_HIP_ANGLE_EST: var_apo_hip_left_ao_hip_angle_est, VAR_APO_HIP_LEFT_AO_HIP_ANGLE_EST_DERIVATIVE: var_apo_hip_left_ao_hip_angle_est_derivative, VAR_APO_HIP_LEFT_AO_FUNDAMENTAL_NORMALIZED_PHI: var_apo_hip_left_ao_fundamental_normalized_phi, VAR_APO_HIP_LEFT_GAIT_EVENT: var_apo_hip_left_gait_event, VAR_APO_SYNCHRONIZATION_ENABLED: var_apo_synchronization_enabled, VAR_APO_HIP_LEFT_AM_FLEXION_AMP: var_apo_hip_left_am_flexion_amp, VAR_APO_HIP_LEFT_AM_FLEXION_PHI: var_apo_hip_left_am_flexion_phi, VAR_APO_HIP_LEFT_AM_FLEXION_DT: var_apo_hip_left_am_flexion_dt, VAR_APO_HIP_RIGHT_AM_FLEXION_AMP: var_apo_hip_right_am_flexion_amp, VAR_APO_HIP_RIGHT_AM_FLEXION_PHI: var_apo_hip_right_am_flexion_phi, VAR_APO_HIP_RIGHT_AM_FLEXION_DT: var_apo_hip_right_am_flexion_dt, VAR_APO_HIP_LEFT_AM_EXTENSION_AMP: var_apo_hip_left_am_extension_amp, VAR_APO_HIP_LEFT_AM_EXTENSION_PHI: var_apo_hip_left_am_extension_phi, VAR_APO_HIP_LEFT_AM_EXTENSION_DT: var_apo_hip_left_am_extension_dt, VAR_APO_HIP_RIGHT_AM_EXTENSION_AMP: var_apo_hip_right_am_extension_amp, VAR_APO_HIP_RIGHT_AM_EXTENSION_PHI: var_apo_hip_right_am_extension_phi, VAR_APO_HIP_RIGHT_AM_EXTENSION_DT: var_apo_hip_right_am_extension_dt, VAR_B3C_SW_PLATFORM_VERSION: var_b3c_sw_platform_version, VAR_B3C_DUMMY_VAR1_UINT32: var_b3c_dummy_var1_uint32, VAR_B3C_DUMMY_VAR2_UINT32: var_b3c_dummy_var2_uint32},"BIT_INDEX_ACTION": {BIT_INDEX_ACTION_DEVICE: bit_index_action_device, BIT_INDEX_ACTION_ID: bit_index_action_id},"BIT_INDEX_CHR": {BIT_INDEX_CHR_SERVICE: bit_index_chr_service, BIT_INDEX_CHR_ID: bit_index_chr_id, BIT_INDEX_CHR_FLAGS: bit_index_chr_flags, BIT_INDEX_CHR_SIZE: bit_index_chr_size},"BIT_INDEX_VAR": {BIT_INDEX_VAR_DEVICE: bit_index_var_device, BIT_INDEX_VAR_ID: bit_index_var_id, BIT_INDEX_VAR_FLAGS: bit_index_var_flags, BIT_INDEX_VAR_DATATYPE: bit_index_var_datatype},"CHR": {CHR_TXRX: chr_txrx, CHR_BULK_SEND: chr_bulk_send, CHR_COUNT__: chr_count__},"WARNING": {WARNING_LOW: warning_low, WARNING_MEDIUM: warning_medium, WARNING_HIGH: warning_high, WARNING_BATTERY_LOW: warning_battery_low, WARNING_BATTERY_CRITICAL: warning_battery_critical, WARNING_BATTERY_EMPTY: warning_battery_empty},"FATAL_TYPE": {FATAL_TYPE_HARDWARE: fatal_type_hardware, FATAL_TYPE_FIRMWARE: fatal_type_firmware, FATAL_TYPE_APP: fatal_type_app},"RESET_SOURCE": {RESET_SOURCE_COLD_START: reset_source_cold_start, RESET_SOURCE_USER_M3_RESET: reset_source_user_m3_reset, RESET_SOURCE_USER_RESET: reset_source_user_reset, RESET_SOURCE_WDOG_RESET: reset_source_wdog_reset, RESET_SOURCE_LOCKUP_RESET: reset_source_lockup_reset, RESET_SOURCE_SOFT_RESET: reset_source_soft_reset, RESET_SOURCE_CONTROLLER_M3_RESET: reset_source_controller_m3_reset, RESET_SOURCE_CONTROLLER_RESET: reset_source_controller_reset, RESET_SOURCE_PO_RESET: reset_source_po_reset},"OPERATING_MODE": {OPERATING_MODE_INIT: operating_mode_init, OPERATING_MODE_INIT_ERROR: operating_mode_init_error, OPERATING_MODE_NORMAL: operating_mode_normal, OPERATING_MODE_WARNING: operating_mode_warning, OPERATING_MODE_FATAL_NON_CRITICAL: operating_mode_fatal_non_critical, OPERATING_MODE_FATAL_CRITICAL: operating_mode_fatal_critical, OPERATING_MODE_FATAL_CRITICAL_SHUTDOWN: operating_mode_fatal_critical_shutdown},"FATAL_SEVERITY": {FATAL_SEVERITY_NON_CRITICAL: fatal_severity_non_critical, FATAL_SEVERITY_CRITICAL: fatal_severity_critical, FATAL_SEVERITY_SHUTDOWN: fatal_severity_shutdown},"FATAL": {FATAL_ASSERT: fatal_assert, FATAL_INVALID_DATABASE: fatal_invalid_database, FATAL_STACK_OVERFLOW: fatal_stack_overflow, FATAL_HEAP_OVERFLOW: fatal_heap_overflow, FATAL_HIGH_CPU_USAGE: fatal_high_cpu_usage, FATAL_SENSOR_INPUT: fatal_sensor_input, FATAL_EMC: fatal_emc, FATAL_ACTUATOR_OUTPUT: fatal_actuator_output, FATAL_APP_MOTOR_ENABLE: fatal_app_motor_enable, FATAL_APP_MOTOR_WINDING_TEMP: fatal_app_motor_winding_temp, FATAL_APP_SELF_TEST_ERROR: fatal_app_self_test_error, FATAL_APP_LOW_BATTERY_FORCED_SHUTDOWN: fatal_app_low_battery_forced_shutdown},"ERROR_TYPE": {ERROR_TYPE_INTERNAL: error_type_internal, ERROR_TYPE_CRITICAL_LOW: error_type_critical_low, ERROR_TYPE_CRITICAL_MED: error_type_critical_med, ERROR_TYPE_CRITICAL_HIGH: error_type_critical_high, ERROR_TYPE_CRITICAL_LOG_ONCE: error_type_critical_log_once},"ERROR": {ERROR_ACTION_FAILED: error_action_failed, ERROR_ADC: error_adc, ERROR_BATTERY_CHARGING_BAD_BATTERY: error_battery_charging_bad_battery, ERROR_BATTERY_CHARGING_TEMPERATURE: error_battery_charging_temperature, ERROR_BATTERY_CURRENT: error_battery_current, ERROR_BATTERY_EMPTY: error_battery_empty, ERROR_BATTERY_TEMPERATURE_HIGH: error_battery_temperature_high, ERROR_BATTERY_TEMPERATURE_LOW: error_battery_temperature_low, ERROR_BIST_CODE_CRC: error_bist_code_crc, ERROR_BIST_CONFIG_DEVICE_CRC: error_bist_config_device_crc, ERROR_BIST_CONFIG_USER_CRC: error_bist_config_user_crc, ERROR_BIST_ERROR_CRC: error_bist_error_crc, ERROR_BIST_MEMORY: error_bist_memory, ERROR_BIST_PORT: error_bist_port, ERROR_BIST_SENSORS_ACCELEROMETER: error_bist_sensors_accelerometer, ERROR_BIST_SENSORS_GYROSCOPE: error_bist_sensors_gyroscope, ERROR_BIST_SENSORS_JOINT_SENSOR: error_bist_sensors_joint_sensor, ERROR_BIST_SENSORS_MAGNETOMETER: error_bist_sensors_magnetometer, ERROR_BIST_SERIAL_CRC: error_bist_serial_crc, ERROR_BIST_STATE_CRC: error_bist_state_crc, ERROR_BIST_STATISTICS_DEVICE_CRC: error_bist_statistics_device_crc, ERROR_BIST_STATISTICS_USER_CRC: error_bist_statistics_user_crc, ERROR_BUTTON_FAIL: error_button_fail, ERROR_CALIBRATION_AUTO_ADJUSTMENT_OUT_OF_BOUNDS: error_calibration_auto_adjustment_out_of_bounds, ERROR_CALIBRATION_AUTO_ADJUSTMENT_TIMEOUT: error_calibration_auto_adjustment_timeout, ERROR_CALIBRATION_HEEL_HEIGHT_OUT_OF_BOUNDS: error_calibration_heel_height_out_of_bounds, ERROR_CALIBRATION_HEEL_HEIGHT_TIMEOUT: error_calibration_heel_height_timeout, ERROR_CALIBRATION_MOTOR_MAGNET_POSITION_INCORRECT: error_calibration_motor_magnet_position_incorrect, ERROR_CALIBRATION_MOTOR_MOVE_DIRECTION: error_calibration_motor_move_direction, ERROR_CALIBRATION_MOTOR_RANGE_TOO_LARGE: error_calibration_motor_range_too_large, ERROR_CALIBRATION_MOTOR_RANGE_TOO_SMALL: error_calibration_motor_range_too_small, ERROR_COMM_BATTERY_READ: error_comm_battery_read, ERROR_COMM_BATTERY_WRITE: error_comm_battery_write, ERROR_COMM_BIONIC_DEVICES_LOST_CONNECTION: error_comm_bionic_devices_lost_connection, ERROR_COMM_BIONIC_DEVICES_READ: error_comm_bionic_devices_read, ERROR_COMM_BIONIC_DEVICES_WRITE: error_comm_bionic_devices_write, ERROR_EMC_TEST_ACCELEROMETER_X: error_emc_test_accelerometer_x, ERROR_EMC_TEST_ACCELEROMETER_Y: error_emc_test_accelerometer_y, ERROR_EMC_TEST_ACCELEROMETER_Z: error_emc_test_accelerometer_z, ERROR_EMC_TEST_BATTERY_VOLTAGE: error_emc_test_battery_voltage, ERROR_EMC_TEST_GYROSCOPE_X: error_emc_test_gyroscope_x, ERROR_EMC_TEST_GYROSCOPE_Y: error_emc_test_gyroscope_y, ERROR_EMC_TEST_GYROSCOPE_Z: error_emc_test_gyroscope_z, ERROR_EMC_TEST_JOINT_ANGLE: error_emc_test_joint_angle, ERROR_IMU_INTERRUPT: error_imu_interrupt, ERROR_IMU_LOW_POWER: error_imu_low_power, ERROR_IMU_POWER_OFF: error_imu_power_off, ERROR_MEMORY_ALLOCATED_SIZE: error_memory_allocated_size, ERROR_MEMORY_CRC: error_memory_crc, ERROR_MEMORY_FULL: error_memory_full, ERROR_MEMORY_INVALID_ADDRESS: error_memory_invalid_address, ERROR_MEMORY_READ: error_memory_read, ERROR_MEMORY_WRITE: error_memory_write, ERROR_MEMORY_WRITE_BEFORE_SHUTDOWN: error_memory_write_before_shutdown, ERROR_MOTOR_MOVE: error_motor_move, ERROR_MOTOR_OVERCURRENT: error_motor_overcurrent, ERROR_MOTOR_RETRY: error_motor_retry, ERROR_MOTOR_VMOT: error_motor_vmot, ERROR_RTC_COUNTING_TOO_FAST: error_rtc_counting_too_fast, ERROR_RTC_COUNTING_TOO_SLOW: error_rtc_counting_too_slow, ERROR_RTC_NOT_COUNTING: error_rtc_not_counting, ERROR_SENSOR_ACCELEROMETER_INVALID_VALUE: error_sensor_accelerometer_invalid_value, ERROR_SENSOR_ACCELEROMETER_READ: error_sensor_accelerometer_read, ERROR_SENSOR_GYROSCOPE_INVALID_VALUE: error_sensor_gyroscope_invalid_value, ERROR_SENSOR_GYROSCOPE_READ: error_sensor_gyroscope_read, ERROR_SENSOR_JOINT_ADCOV: error_sensor_joint_adcov, ERROR_SENSOR_JOINT_ADDMON: error_sensor_joint_addmon, ERROR_SENSOR_JOINT_CLKMON: error_sensor_joint_clkmon, ERROR_SENSOR_JOINT_COF: error_sensor_joint_cof, ERROR_SENSOR_JOINT_CORDICOV: error_sensor_joint_cordicov, ERROR_SENSOR_JOINT_INVALID_VALUE: error_sensor_joint_invalid_value, ERROR_SENSOR_JOINT_MAGNET_FIELD_HIGH: error_sensor_joint_magnet_field_high, ERROR_SENSOR_JOINT_MAGNET_FIELD_LOW: error_sensor_joint_magnet_field_low, ERROR_SENSOR_JOINT_MOTOR_RANGE: error_sensor_joint_motor_range, ERROR_SENSOR_JOINT_OCF: error_sensor_joint_ocf, ERROR_SENSOR_JOINT_PARITY: error_sensor_joint_parity, ERROR_SENSOR_JOINT_RANGE: error_sensor_joint_range, ERROR_SENSOR_JOINT_READ: error_sensor_joint_read, ERROR_SENSOR_JOINT_WOW: error_sensor_joint_wow, ERROR_SENSOR_MAGNETOMETER_INVALID_VALUE: error_sensor_magnetometer_invalid_value, ERROR_SENSOR_MAGNETOMETER_READ: error_sensor_magnetometer_read, ERROR_SENSOR_TEMPERATURE_INVALID_VALUE: error_sensor_temperature_invalid_value, ERROR_SENSOR_TEMPERATURE_READ: error_sensor_temperature_read, ERROR_SETUP_IMU: error_setup_imu, ERROR_STACK_MARGIN: error_stack_margin, ERROR_SYSTICK_DELAY: error_systick_delay, ERROR_SYSTICK_EARLY: error_systick_early, ERROR_TEMPERATURE_OUT_OF_OPERATION_RANGE: error_temperature_out_of_operation_range, ERROR_TEMPERATURE_TURN_OFF: error_temperature_turn_off, ERROR_TRAP_OVERWRITE_TASK_H: error_trap_overwrite_task_h, ERROR_TRAP_OVERWRITE_TASK_L: error_trap_overwrite_task_l, ERROR_TRAP_OVERWRITE_TASK_M: error_trap_overwrite_task_m, ERROR_VOLTAGE_3V3_FAIL: error_voltage_3v3_fail, ERROR_WATCHDOG: error_watchdog, ERROR_WATCHDOG_SECMCU: error_watchdog_secmcu, ERROR_TEMPERATURE_SECMCU: error_temperature_secmcu, ERROR_TEMPERATURE_SECMCU_TURN_OFF: error_temperature_secmcu_turn_off, ERROR_BIST_LIGHT_SENSOR: error_bist_light_sensor, ERROR_BIST_LED_DRIVER_1: error_bist_led_driver_1, ERROR_BIST_LED_DRIVER_2: error_bist_led_driver_2, ERROR_BIST_DATA_FLASH: error_bist_data_flash, ERROR_STACK_MARGIN_SECMCU: error_stack_margin_secmcu, ERROR_SYSTICK_DELAY_SECMCU: error_systick_delay_secmcu, ERROR_DFU_UPDATE_FAILED: error_dfu_update_failed, ERROR_DFU_SECTOR_END_DATA_SIZE: error_dfu_sector_end_data_size, ERROR_DFU_IMAGE_END_DATA_SIZE: error_dfu_image_end_data_size, ERROR_DFU_IMAGE_CRC_FAIL: error_dfu_image_crc_fail, ERROR_BLE_UNKNOWN_TRANSMISSION: error_ble_unknown_transmission, ERROR_BLE_TRANSMISSION_FAIL: error_ble_transmission_fail, ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_RX: error_comm_package_crc_fail_wireless_rx, ERROR_COMM_PACKAGE_CRC_FAIL_HOST_RX: error_comm_package_crc_fail_host_rx, ERROR_COMM_PACKAGE_CRC_FAIL_BULK_RX: error_comm_package_crc_fail_bulk_rx, ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_TX: error_comm_package_crc_fail_wireless_tx, ERROR_COMM_PACKAGE_CRC_FAIL_WIRELESS_BULK_TX: error_comm_package_crc_fail_wireless_bulk_tx, ERROR_COMM_INCOMING_BULK_DATA_LOST: error_comm_incoming_bulk_data_lost, ERROR_COMM_INCOMING_DATA_LOST: error_comm_incoming_data_lost, ERROR_COMM_RINGBUFFER_HOST_TX_FULL: error_comm_ringbuffer_host_tx_full, ERROR_COMM_RINGBUFFER_HOST_RX_FULL: error_comm_ringbuffer_host_rx_full, ERROR_COMM_RINGBUFFER_WIFI_TX_FULL: error_comm_ringbuffer_wifi_tx_full, ERROR_COMM_RINGBUFFER_WIFI_RX_FULL: error_comm_ringbuffer_wifi_rx_full, ERROR_COMM_RINGBUFFER_BLE_TX_FULL: error_comm_ringbuffer_ble_tx_full, ERROR_COMM_RINGBUFFER_BLE_RX_FULL: error_comm_ringbuffer_ble_rx_full, ERROR_COMM_OUTGOING_TRANSMISSION_DISCARDED: error_comm_outgoing_transmission_discarded, ERROR_COMM_OUTGOING_BULK_TRANSMISSION_DISCARDED: error_comm_outgoing_bulk_transmission_discarded, ERROR_SYSTEM_RESET: error_system_reset, ERROR_BIST_WIFI: error_bist_wifi, ERROR_BUZZER_FAIL: error_buzzer_fail, ERROR_SEQMCU_APPLICATION_CONFIG_READ_FAILED: error_seqmcu_application_config_read_failed, ERROR_SEQMCU_APPLICATION_CONFIG_CORRUPTED: error_seqmcu_application_config_corrupted, ERROR_SEQMCU_FRAMEWORK_SETTINGS_CORRUPTED: error_seqmcu_framework_settings_corrupted, ERROR_LOG_OVERFLOW: error_log_overflow, ERROR_MOTOR_MOVE_MIDSWING: error_motor_move_midswing, ERROR_MOTOR_MOVE_HEELSTRIKE: error_motor_move_heelstrike, ERROR_BIST_IMU: error_bist_imu, ERROR_SEQMCU_FLASH_INIT_FAILED: error_seqmcu_flash_init_failed, ERROR_SEQMCU_FLASH_WRITE_FAILED: error_seqmcu_flash_write_failed, ERROR_SEQMCU_FLASH_UPDATE_FAILED: error_seqmcu_flash_update_failed, ERROR_SEQMCU_APPLICATION_CONFIG_BACKUP_CORRUPTED: error_seqmcu_application_config_backup_corrupted, ERROR_SEQMCU_APPLICATION_SETTINGS_READ_FAILED: error_seqmcu_application_settings_read_failed, ERROR_SEQMCU_APPLICATION_SETTINGS_CORRUPTED: error_seqmcu_application_settings_corrupted, ERROR_SEQMCU_APPLICATION_SETTINGS_BACKUP_CORRUPTED: error_seqmcu_application_settings_backup_corrupted, ERROR_SEQMCU_FRAMEWORK_SETTINGS_BACKUP_CORRUPTED: error_seqmcu_framework_settings_backup_corrupted, ERROR_SECMCU_TRAP_OVERWRITE: error_secmcu_trap_overwrite, ERROR_SENSOR_GYROSCOPE_SATURATION_WARNING: error_sensor_gyroscope_saturation_warning, ERROR_SENSOR_GYROSCOPE_SATURATION_ERROR: error_sensor_gyroscope_saturation_error},"DEVICE_MESSAGE": {DEVICE_MESSAGE_SYNC_BYTE: device_message_sync_byte, DEVICE_MESSAGE_SYNC_OFFSET: device_message_sync_offset, DEVICE_MESSAGE_SYNC_SIZE: device_message_sync_size, DEVICE_MESSAGE_SIZE_OFFSET: device_message_size_offset, DEVICE_MESSAGE_SIZE_SIZE: device_message_size_size, DEVICE_MESSAGE_HEADER_SIZE: device_message_header_size, DEVICE_MESSAGE_PAYLOAD_OFFSET: device_message_payload_offset, DEVICE_MESSAGE_CRC_SIZE: device_message_crc_size, DEVICE_MESSAGE_SIZE_OVERHEAD: device_message_size_overhead, DEVICE_MESSAGE_MAXIMUM_SIZE: device_message_maximum_size},"DEVICE_REPORTS": {DEVICE_REPORTS_TOOLBOX_BULK_TEST: device_reports_toolbox_bulk_test, DEVICE_REPORTS_TOOLBOX_ENUM_TEST: device_reports_toolbox_enum_test, DEVICE_REPORTS_TOOLBOX_FAIL_BAD_CRC: device_reports_toolbox_fail_bad_crc, DEVICE_REPORTS_TOOLBOX_FAIL_NOT_SUPPORTED: device_reports_toolbox_fail_not_supported, DEVICE_REPORTS_TOOLBOX_FAIL_NO_DATA: device_reports_toolbox_fail_no_data, DEVICE_REPORTS_TOOLBOX_DATATYPE_TEST: device_reports_toolbox_datatype_test, DEVICE_REPORTS_BATTERY_CHARGE_HISTORY: device_reports_battery_charge_history, DEVICE_REPORTS_STEP_COUNT_BY_HOURS: device_reports_step_count_by_hours, DEVICE_REPORTS_STEP_COUNT_BY_DAYS: device_reports_step_count_by_days, DEVICE_REPORTS_STEP_COUNT_BY_MONTHS: device_reports_step_count_by_months, DEVICE_REPORTS_STEP_COUNT_BY_YEARS: device_reports_step_count_by_years, DEVICE_REPORTS_ACTIVITY: device_reports_activity, DEVICE_REPORTS_ERROR: device_reports_error, DEVICE_REPORTS_LOG: device_reports_log, DEVICE_REPORTS_STEP_HISTOGRAM: device_reports_step_histogram, DEVICE_REPORTS_SPEED_HISTOGRAM: device_reports_speed_histogram, DEVICE_REPORTS_DISTANCE_HISTOGRAM: device_reports_distance_histogram, DEVICE_REPORTS_SURFACE_HISTOGRAM: device_reports_surface_histogram, DEVICE_REPORTS_VACUUM_HISTOGRAM: device_reports_vacuum_histogram, DEVICE_REPORTS_GAIT: device_reports_gait, DEVICE_REPORTS_DEVICE: device_reports_device, DEVICE_REPORTS_SELF_TEST: device_reports_self_test, DEVICE_REPORTS_CALIBRATION: device_reports_calibration, DEVICE_REPORTS_STANDING_FORCE: device_reports_standing_force, DEVICE_REPORTS_B3C_SYSTEM_VERSION: device_reports_b3c_system_version, DEVICE_REPORTS_B3C_SENSOR_READ: device_reports_b3c_sensor_read, DEVICE_REPORTS_PKM_FATAL_LOG: device_reports_pkm_fatal_log, DEVICE_REPORTS_PKM_BIOMETRIC_STATS: device_reports_pkm_biometric_stats, DEVICE_REPORTS_B3C_SYSTEM_STATS: device_reports_b3c_system_stats, DEVICE_REPORTS_PKM_BIOMETRIC_STATS_SLR: device_reports_pkm_biometric_stats_slr, DEVICE_REPORTS_PKM_SYSTEM_VERSION: device_reports_pkm_system_version, DEVICE_REPORTS_PKM_BATTERY_LOG: device_reports_pkm_battery_log, DEVICE_REPORTS_PKM_MOTOR_SPEED_REPORT: device_reports_pkm_motor_speed_report, DEVICE_REPORTS_B3C_BULK_MECHANISM_TEST_REPORT: device_reports_b3c_bulk_mechanism_test_report, DEVICE_REPORTS_PKM_MOTOR_PROFILE_REPORT: device_reports_pkm_motor_profile_report, DEVICE_REPORTS_B3C_SENSOR_STATISTICS_REPORT: device_reports_b3c_sensor_statistics_report, DEVICE_REPORTS_PKM_SYSTEM_PARAMETERS: device_reports_pkm_system_parameters, DEVICE_REPORTS_B3C_FLASH_UNIQUE_ID: device_reports_b3c_flash_unique_id, DEVICE_REPORTS_PKM_APPLICATION_STATISTICS: device_reports_pkm_application_statistics, DEVICE_REPORTS_RKN_FATAL_LOG: device_reports_rkn_fatal_log, DEVICE_REPORTS_RKN_SYSTEM_VERSION: device_reports_rkn_system_version, DEVICE_REPORTS_RKN_BATTERY_LOG: device_reports_rkn_battery_log, DEVICE_REPORTS_RKN_SYSTEM_PARAMETERS: device_reports_rkn_system_parameters, DEVICE_REPORTS_RKN_BIOMETRIC_STATS: device_reports_rkn_biometric_stats, DEVICE_REPORTS_B3C_EMC_STATISTIC_REPORT: device_reports_b3c_emc_statistic_report, DEVICE_REPORTS_RKN_APPLICATION_STATISTICS: device_reports_rkn_application_statistics, DEVICE_REPORTS_RKN_EVENT_LOG_REPORT: device_reports_rkn_event_log_report, DEVICE_REPORTS_RKN_BIOMETRIC_STATS_SLR: device_reports_rkn_biometric_stats_slr, DEVICE_REPORTS_STEP_HISTORY_ACTIVITY_LOG: device_reports_step_history_activity_log, DEVICE_REPORTS_B3C_FATAL_LOG: device_reports_b3c_fatal_log, DEVICE_REPORTS_RKN_UNEXPECTED_SHUTDOWNS: device_reports_rkn_unexpected_shutdowns, DEVICE_REPORTS_B3C_BIOMETRIC_STATS: device_reports_b3c_biometric_stats, DEVICE_REPORTS_B3C_BIOMETRIC_STATS_AND_STEP_HISTORY_ACTIVITY_LOG: device_reports_b3c_biometric_stats_and_step_history_activity_log},"ACTION": {ACTION_TOOLBOX_FAIL_ERROR: action_toolbox_fail_error, ACTION_TOOLBOX_ITERATE: action_toolbox_iterate, ACTION_TOOLBOX_DATA: action_toolbox_data, ACTION_FACTORY_RESET: action_factory_reset, ACTION_COUNTERS_RESET: action_counters_reset, ACTION_SELF_TEST: action_self_test, ACTION_RTC_SET: action_rtc_set, ACTION_IMU_CALIBRATE: action_imu_calibrate, ACTION_LOG_DOWNLOAD: action_log_download, ACTION_AUTO_ADJUSTMENT: action_auto_adjustment, ACTION_SENSORY_SYSTEM_CALIBRATE: action_sensory_system_calibrate, ACTION_MEMORY_ERASE: action_memory_erase, ACTION_STEP_COUNT_RESET: action_step_count_reset, ACTION_DEVICE_RESET: action_device_reset, ACTION_DEVICE_EMC_TEST: action_device_emc_test, ACTION_LED_SET: action_led_set, ACTION_BUZZER_SET: action_buzzer_set, ACTION_VIBRATOR_SET: action_vibrator_set, ACTION_LOG_CLEAR_VARIABLES: action_log_clear_variables, ACTION_PIN_SET: action_pin_set, ACTION_PIN_READ: action_pin_read, ACTION_DEVICE_TURN_OFF: action_device_turn_off, ACTION_DUMP_ALL: action_dump_all, ACTION_DUMP_STATUS: action_dump_status, ACTION_DUMP_CONFIG: action_dump_config, ACTION_DUMP_STATISTICS: action_dump_statistics, ACTION_DEVICE_EMC_TEST_SENSORS: action_device_emc_test_sensors, ACTION_LOG_CLEAR: action_log_clear, ACTION_SELF_TEST_THERMAL_CYCLING: action_self_test_thermal_cycling, ACTION_DELAY_HIGH_PRIORITY: action_delay_high_priority, ACTION_DELAY_MEDIUM_PRIORITY: action_delay_medium_priority, ACTION_DELAY_LOW_PRIORITY: action_delay_low_priority, ACTION_TEST_ISO22675: action_test_iso22675, ACTION_DEVICE_EMC_TEST_WO_ANGLE: action_device_emc_test_wo_angle, ACTION_DEVICE_TEST_MODE: action_device_test_mode, ACTION_B3C_MEMORY_READ: action_b3c_memory_read, ACTION_B3C_MEMORY_WRITE: action_b3c_memory_write, ACTION_B3CMB_FLASH_ERASE_SECTOR: action_b3cmb_flash_erase_sector, ACTION_RTC_READ: action_rtc_read, ACTION_B3C_MEMORY_TEST: action_b3c_memory_test, ACTION_B3C_SUPPLY_CONTROL: action_b3c_supply_control, ACTION_B3C_SET_DEV_PARAMETER: action_b3c_set_dev_parameter, ACTION_B3C_GET_DEV_PARAMETER: action_b3c_get_dev_parameter, ACTION_ENABLE_SLEEP_MODE: action_enable_sleep_mode, ACTION_B3C_PEEK: action_b3c_peek, ACTION_B3C_POKE: action_b3c_poke, ACTION_SET_EMULATOR_CONFIG: action_set_emulator_config, ACTION_B3C_VECTOR_INPUT_RESET: action_b3c_vector_input_reset, ACTION_B3C_VECTOR_INPUT_CLEAR: action_b3c_vector_input_clear, ACTION_B3C_VECTOR_INPUT_ADD_FRAME: action_b3c_vector_input_add_frame, ACTION_B3C_VECTOR_INPUT_GET_FRAME: action_b3c_vector_input_get_frame, ACTION_B3C_VECTOR_INPUT_START: action_b3c_vector_input_start, ACTION_B3C_VECTOR_INPUT_STOP: action_b3c_vector_input_stop, ACTION_B3C_SENSOR_CONTROL: action_b3c_sensor_control, ACTION_B3C_CLEAR_FATAL_LOG: action_b3c_clear_fatal_log, ACTION_B3C_SET_SERIAL_NUMBER: action_b3c_set_serial_number, ACTION_B3C_SET_BLE_PASSCODE: action_b3c_set_ble_passcode, ACTION_B3C_BULK_MECHANISM_TEST: action_b3c_bulk_mechanism_test, ACTION_B3C_EMC_TEST_SET_SENSOR_RANGE: action_b3c_emc_test_set_sensor_range, ACTION_B3C_EMC_TEST_START: action_b3c_emc_test_start, ACTION_B3C_EMC_TEST_STOP: action_b3c_emc_test_stop, ACTION_B3C_SENSOR_SAMPLING_CONFIG: action_b3c_sensor_sampling_config, ACTION_LED_CONTROL: action_led_control, ACTION_B3C_SET_USER_STATISTICS_PARAMETER: action_b3c_set_user_statistics_parameter, ACTION_B3C_GET_SYSTEM_STAT_PARAMETER: action_b3c_get_system_stat_parameter, ACTION_B3C_SET_SYSTEM_STAT_PARAMETER: action_b3c_set_system_stat_parameter, ACTION_B3C_RESET_DATABASE_FLASH_CONTENT: action_b3c_reset_database_flash_content, ACTION_B3C_GET_DATABASE_STATUS: action_b3c_get_database_status, ACTION_STEP_COUNT_SET: action_step_count_set, ACTION_SERVICE_RESET: action_service_reset, ACTION_BATTERY_LED_CONTROL: action_battery_led_control, ACTION_MOTOR_MOVE_UP: action_motor_move_up, ACTION_MOTOR_MOVE_DOWN: action_motor_move_down, ACTION_MOTOR_CALIBRATE: action_motor_calibrate, ACTION_HEEL_HEIGHT_CALIBRATE: action_heel_height_calibrate, ACTION_HEEL_HEIGHT_BAREFOOT_CALIBRATE: action_heel_height_barefoot_calibrate, ACTION_HEEL_HEIGHT_SHOE_SET: action_heel_height_shoe_set, ACTION_MOTOR_FULL_RANGE_MOVEMENT: action_motor_full_range_movement, ACTION_HEEL_HEIGHT_SET: action_heel_height_set, ACTION_MOTOR_MOVE_ON: action_motor_move_on, ACTION_FLAT_WALK_CALIBRATION: action_flat_walk_calibration, ACTION_PKM_MOTOR_DRIVE_POWER_STATUS: action_pkm_motor_drive_power_status, ACTION_PKM_MOTOR_POWER_ENABLE: action_pkm_motor_power_enable, ACTION_PKM_DRIVE_MOTOR: action_pkm_drive_motor, ACTION_PKM_MOTOR_DRIVER_READ: action_pkm_motor_driver_read, ACTION_PKM_MOTOR_DRIVER_WRITE: action_pkm_motor_driver_write, ACTION_PKM_SET_HW_PARAMETER: action_pkm_set_hw_parameter, ACTION_PKM_GET_HW_PARAMETER: action_pkm_get_hw_parameter, ACTION_PKM_SET_GCS_COMP_PARAMS: action_pkm_set_gcs_comp_params, ACTION_PKM_GET_GCS_COMP_PARAMS: action_pkm_get_gcs_comp_params, ACTION_PKM_BIOMETRIC_STATS_SLR_RESET: action_pkm_biometric_stats_slr_reset, ACTION_PKM_USER_PARAMETERS_RESET: action_pkm_user_parameters_reset, ACTION_PKM_CT_OFFSET_CALIBRATION: action_pkm_ct_offset_calibration, ACTION_PKM_MOTOR_SPEED_CHECK: action_pkm_motor_speed_check, ACTION_PKM_MOTOR_PROFILE: action_pkm_motor_profile, ACTION_PKM_APPLICATION_RESET: action_pkm_application_reset, ACTION_PKM_GET_APPLICATION_STAT_PARAMETER: action_pkm_get_application_stat_parameter, ACTION_PKM_SET_APPLICATION_STAT_PARAMETER: action_pkm_set_application_stat_parameter, ACTION_RKN_SET_HW_PARAMETER: action_rkn_set_hw_parameter, ACTION_RKN_GET_HW_PARAMETER: action_rkn_get_hw_parameter, ACTION_RKN_KA_CALIBRATION: action_rkn_ka_calibration, ACTION_RKN_LC_POSTERIOR_CALIBRATION: action_rkn_lc_posterior_calibration, ACTION_RKN_LC_ANTERIOR_CALIBRATION: action_rkn_lc_anterior_calibration, ACTION_RKN_HBDRV_READ: action_rkn_hbdrv_read, ACTION_RKN_HBDRV_WRITE: action_rkn_hbdrv_write, ACTION_RKN_PID_WRITE: action_rkn_pid_write, ACTION_RKN_SUPPLY_CONTROL: action_rkn_supply_control, ACTION_RKN_CHG_CONTROL: action_rkn_chg_control, ACTION_RKN_DEGAUSS: action_rkn_degauss, ACTION_RKN_TORQUE_TEST: action_rkn_torque_test, ACTION_RKN_IMU_CALIBRATION: action_rkn_imu_calibration, ACTION_RKN_BIOMETRIC_STATS_SLR_RESET: action_rkn_biometric_stats_slr_reset, ACTION_RKN_USER_PARAMETERS_RESET: action_rkn_user_parameters_reset, ACTION_RKN_APPLICATION_RESET: action_rkn_application_reset, ACTION_RKN_CALIBRATE_ADC_OFFSET: action_rkn_calibrate_adc_offset, ACTION_RKN_GET_ADC_OFFSET: action_rkn_get_adc_offset, ACTION_APO_SYNC_ENABLE: action_apo_sync_enable, ACTION_APO_SYNC_DISABLE: action_apo_sync_disable, ACTION_APO_SYNC_RESET: action_apo_sync_reset, ACTION_APO_UPDATE_ASSIST_PROFILE: action_apo_update_assist_profile, ACTION_CALIBRATE: action_calibrate, ACTION_CLEAR_ALL_BONDS: action_clear_all_bonds, ACTION_CLEAR_PERIPHERAL_BONDS: action_clear_peripheral_bonds},"BLE_UUID": {BLE_UUID_PART10: ble_uuid_part10, BLE_UUID_PART2: ble_uuid_part2, BLE_UUID_PART3: ble_uuid_part3, BLE_UUID_PART4: ble_uuid_part4, BLE_UUID_PART50: ble_uuid_part50, BLE_UUID_PART51: ble_uuid_part51},"FIRMWARE_TYPE": {FIRMWARE_TYPE_WIRELESS: firmware_type_wireless, FIRMWARE_TYPE_HOST: firmware_type_host, FIRMWARE_TYPE_BOOTLOADER: firmware_type_bootloader, FIRMWARE_TYPE_SOFTDEVICE: firmware_type_softdevice, FIRMWARE_TYPE_MAIN_APP: firmware_type_main_app, FIRMWARE_TYPE_DIAGNOSTIC_APP: firmware_type_diagnostic_app, FIRMWARE_TYPE_FPGA: firmware_type_fpga, FIRMWARE_TYPE_DEVICE_PROFILE: firmware_type_device_profile, FIRMWARE_TYPE_VECTOR_INPUT: firmware_type_vector_input, FIRMWARE_TYPE_USER_DATABASE: firmware_type_user_database},"DEVICE_APP_MODE": {DEVICE_APP_MODE_WIRELESS_MAIN_APP: device_app_mode_wireless_main_app, DEVICE_APP_MODE_WIRELESS_BOOTLOADER: device_app_mode_wireless_bootloader, DEVICE_APP_MODE_WIRELESS_SOFTDEVICE: device_app_mode_wireless_softdevice, DEVICE_APP_MODE_HOST_MAIN_APP: device_app_mode_host_main_app, DEVICE_APP_MODE_HOST_DIAGNOSTIC_APP: device_app_mode_host_diagnostic_app, DEVICE_APP_MODE_HOST_BOOTLOADER: device_app_mode_host_bootloader, DEVICE_APP_MODE_PROPRIO_WIRELESS_BOOTLOADER: device_app_mode_proprio_wireless_bootloader},"BULKTYPE": {BULKTYPE_WIRELESS_MAIN_APP: bulktype_wireless_main_app, BULKTYPE_WIRELESS_BOOTLOADER: bulktype_wireless_bootloader, BULKTYPE_WIRELESS_SOFTDEVICE: bulktype_wireless_softdevice, BULKTYPE_HOST_MAIN_APP: bulktype_host_main_app, BULKTYPE_HOST_BOOTLOADER: bulktype_host_bootloader, BULKTYPE_HOST_DIAGNOSTIC_APP: bulktype_host_diagnostic_app, BULKTYPE_HOST_FPGA: bulktype_host_fpga, BULKTYPE_HOST_VECTOR_INPUT: bulktype_host_vector_input, BULKTYPE_HOST_DEVICE_PROFILE: bulktype_host_device_profile, BULKTYPE_HOST_USER_DATABASE: bulktype_host_user_database, BULKTYPE_TOOLBOX_FAIL_BAD_CRC: bulktype_toolbox_fail_bad_crc},"FLAGS_REBOOT": {FLAGS_REBOOT_TBD: flags_reboot_tbd},"FLAGS_REBOOT_RET": {FLAGS_REBOOT_RET_SUPPORTED: flags_reboot_ret_supported, FLAGS_REBOOT_RET_NOT_SUPPORTED: flags_reboot_ret_not_supported, FLAGS_REBOOT_RET_COMPLETE: flags_reboot_ret_complete},"FLAGS_GET_VARIABLE": {FLAGS_GET_VARIABLE_RETURN_VAR: flags_get_variable_return_var, FLAGS_GET_VARIABLE_NOT_RETURN_VAR: flags_get_variable_not_return_var, FLAGS_GET_VARIABLE_ENABLE_NOTIFICATION: flags_get_variable_enable_notification, FLAGS_GET_VARIABLE_DISABLE_NOTIFICATION: flags_get_variable_disable_notification, FLAGS_GET_VARIABLE_ENABLE_LOGGING: flags_get_variable_enable_logging, FLAGS_GET_VARIABLE_DISABLE_LOGGING: flags_get_variable_disable_logging},"FLAGS_GET_VARIABLE_RET": {FLAGS_GET_VARIABLE_RET_NOTIFICATION_SUPPORTED: flags_get_variable_ret_notification_supported, FLAGS_GET_VARIABLE_RET_NOTIFICATION_NOT_SUPPORTED: flags_get_variable_ret_notification_not_supported, FLAGS_GET_VARIABLE_RET_NOTIFICATION_ENABLED: flags_get_variable_ret_notification_enabled, FLAGS_GET_VARIABLE_RET_NOTIFICATION_DISABLED: flags_get_variable_ret_notification_disabled, FLAGS_GET_VARIABLE_RET_LOGGING_ENABLED: flags_get_variable_ret_logging_enabled, FLAGS_GET_VARIABLE_RET_LOGGING_DISABLED: flags_get_variable_ret_logging_disabled},"FLAGS_SET_VARIABLE": {FLAGS_SET_VARIABLE_SEND_CONFIRMATION: flags_set_variable_send_confirmation, FLAGS_SET_VARIABLE_NOT_SEND_CONFIRMATION: flags_set_variable_not_send_confirmation},"FLAGS_ACTION": {FLAGS_ACTION_START: flags_action_start, FLAGS_ACTION_STOP: flags_action_stop, FLAGS_ACTION_STATUS: flags_action_status, FLAGS_ACTION_DISABLE_NOTIFICATION: flags_action_disable_notification},"FLAGS_ACTION_RET": {FLAGS_ACTION_RET_COMPLETED: flags_action_ret_completed, FLAGS_ACTION_RET_RUNNING: flags_action_ret_running, FLAGS_ACTION_RET_COMPLETED_WITH_ERROR: flags_action_ret_completed_with_error, FLAGS_ACTION_RET_CANCELLED: flags_action_ret_cancelled},"FLAGS_ACTION_RET_CODE": {FLAGS_ACTION_RET_CODE_PERCENTAGE: flags_action_ret_code_percentage, FLAGS_ACTION_RET_CODE_ERROR_CODE: flags_action_ret_code_error_code, FLAGS_ACTION_RET_CODE_DATA: flags_action_ret_code_data},"FLAGS_DEVICE_REPORT_RET": {FLAGS_DEVICE_REPORT_RET_SUPPORTED: flags_device_report_ret_supported, FLAGS_DEVICE_REPORT_RET_NOT_SUPPORTED: flags_device_report_ret_not_supported, FLAGS_DEVICE_REPORT_RET_NO_DATA: flags_device_report_ret_no_data},"FLAGS_VARIABLE_BANK": {FLAGS_VARIABLE_BANK_TBD1: flags_variable_bank_tbd1, FLAGS_VARIABLE_BANK_TBD2: flags_variable_bank_tbd2},"CMD": {CMD_GET_VARIABLE: cmd_get_variable, CMD_SET_VARIABLE: cmd_set_variable, CMD_ACTION_FAMILY: cmd_action_family, CMD_ACTIVITY_EVENTS: cmd_activity_events, CMD_DEVICE_REPORT: cmd_device_report, CMD_VARIABLE_BANKS: cmd_variable_banks, CMD_UPLOAD_FIRMWARE: cmd_upload_firmware, CMD_REBOOT: cmd_reboot, CMD_BULK_SEND_HEADER: cmd_bulk_send_header, CMD_BULK_SEND_BODY: cmd_bulk_send_body, CMD_BULK_SEND_FOOTER: cmd_bulk_send_footer, CMD_DEVICE_PACKET: cmd_device_packet},"ACTIVITY": {ACTIVITY_UNKNOWN: activity_unknown, ACTIVITY_IMMOBILE: activity_immobile, ACTIVITY_MOBILE: activity_mobile, ACTIVITY_AMBULATING: activity_ambulating, ACTIVITY_SITTING: activity_sitting, ACTIVITY_STANDING: activity_standing, ACTIVITY_LYING: activity_lying, ACTIVITY_LYING_FACE_UP: activity_lying_face_up, ACTIVITY_LYING_FACE_DOWN: activity_lying_face_down, ACTIVITY_SHUFFLING: activity_shuffling, ACTIVITY_CYCLING: activity_cycling, ACTIVITY_SWIMMING: activity_swimming, ACTIVITY_U_TURN: activity_u_turn, ACTIVITY_CHAIR_RELAX: activity_chair_relax, ACTIVITY_CHAIR_EXIT: activity_chair_exit, ACTIVITY_WALKING: activity_walking, ACTIVITY_UPSTAIRS: activity_upstairs, ACTIVITY_DOWNSTAIRS: activity_downstairs, ACTIVITY_STANCE_PHASE: activity_stance_phase, ACTIVITY_SWING_PHASE: activity_swing_phase, ACTIVITY_DOUBLE_LIMB_SUPPORT: activity_double_limb_support, ACTIVITY_SINGLE_LIMB_SUPPORT: activity_single_limb_support, ACTIVITY_LIMB_ADVANCEMENT: activity_limb_advancement, ACTIVITY_HEELSTRIKE: activity_heelstrike, ACTIVITY_LOADING_RESPONSE: activity_loading_response, ACTIVITY_FOOT_FLAT: activity_foot_flat, ACTIVITY_MIDSTANCE: activity_midstance, ACTIVITY_HEEL_RISE: activity_heel_rise, ACTIVITY_TERMINAL_STANCE: activity_terminal_stance, ACTIVITY_OPPOSITE_HEELSTRIKE: activity_opposite_heelstrike, ACTIVITY_PRE_SWING: activity_pre_swing, ACTIVITY_TOEOFF: activity_toeoff, ACTIVITY_INITIAL_SWING: activity_initial_swing, ACTIVITY_FEET_ADJACENT: activity_feet_adjacent, ACTIVITY_MIDSWING: activity_midswing, ACTIVITY_TIBIA_VERTICAL: activity_tibia_vertical, ACTIVITY_TERMINAL_SWING: activity_terminal_swing},"PACKET": {PACKET_HEADER_ID_OFFSET: packet_header_id_offset, PACKET_HEADER_ID_SIZE: packet_header_id_size, PACKET_MAXIMUM_SIZE: packet_maximum_size, PACKET_VARIABLE_ID_OFFSET: packet_variable_id_offset, PACKET_VARIABLE_ID_SIZE: packet_variable_id_size, PACKET_VARIABLE_FLAGS_OFFSET: packet_variable_flags_offset, PACKET_VARIABLE_FLAGS_SIZE: packet_variable_flags_size, PACKET_VARIABLE_DATA_OFFSET: packet_variable_data_offset, PACKET_VARIABLE_DATA_SIZE: packet_variable_data_size, PACKET_ACTION_ID_OFFSET: packet_action_id_offset, PACKET_ACTION_ID_SIZE: packet_action_id_size, PACKET_ACTION_FLAGS_OFFSET: packet_action_flags_offset, PACKET_ACTION_FLAGS_SIZE: packet_action_flags_size, PACKET_ACTION_DATA_OFFSET: packet_action_data_offset, PACKET_ACTION_DATA_SIZE: packet_action_data_size, PACKET_ACTIVITY_FILTER_OFFSET: packet_activity_filter_offset, PACKET_ACTIVITY_FILTER_SIZE: packet_activity_filter_size, PACKET_ACTIVITY_REFRESH_OFFSET: packet_activity_refresh_offset, PACKET_ACTIVITY_REFRESH_SIZE: packet_activity_refresh_size, PACKET_ACTIVITY_EVENT_ID_OFFSET: packet_activity_event_id_offset, PACKET_ACTIVITY_EVENT_ID_SIZE: packet_activity_event_id_size, PACKET_REPORT_ID_OFFSET: packet_report_id_offset, PACKET_REPORT_ID_SIZE: packet_report_id_size, PACKET_REPORT_FLAGS_OFFSET: packet_report_flags_offset, PACKET_REPORT_FLAGS_SIZE: packet_report_flags_size, PACKET_REPORT_PARAMETERS_OFFSET: packet_report_parameters_offset, PACKET_REPORT_PARAMETERS_SIZE: packet_report_parameters_size, PACKET_REPORT_SIZE_OFFSET: packet_report_size_offset, PACKET_REPORT_SIZE_SIZE: packet_report_size_size, PACKET_REPORT_DATA_OFFSET: packet_report_data_offset, PACKET_BANKS_ID_OFFSET: packet_banks_id_offset, PACKET_BANKS_ID_SIZE: packet_banks_id_size, PACKET_BANKS_VAR_COUNT_OFFSET: packet_banks_var_count_offset, PACKET_BANKS_VAR_COUNT_SIZE: packet_banks_var_count_size, PACKET_BANKS_VAR_ID_OFFSET: packet_banks_var_id_offset, PACKET_BANKS_VAR_ID_SIZE: packet_banks_var_id_size, PACKET_BANKS_FLAGS_OFFSET: packet_banks_flags_offset, PACKET_BANKS_FLAGS_SIZE: packet_banks_flags_size, PACKET_BANKS_SIZE_OFFSET: packet_banks_size_offset, PACKET_BANKS_SIZE_SIZE: packet_banks_size_size, PACKET_BANKS_DATA_OFFSET: packet_banks_data_offset, PACKET_DEVICE_ID_OFFSET: packet_device_id_offset, PACKET_DEVICE_ID_SIZE: packet_device_id_size, PACKET_DEVICE_DATA_OFFSET: packet_device_data_offset, PACKET_DEVICE_DATA_SIZE: packet_device_data_size},"BASE_DEVICE_STATE": {BASE_DEVICE_STATE_SHUTOFF: base_device_state_shutoff, BASE_DEVICE_STATE_RESET: base_device_state_reset, BASE_DEVICE_STATE_HIBERNATE: base_device_state_hibernate, BASE_DEVICE_STATE_CALIBRATION: base_device_state_calibration, BASE_DEVICE_STATE_NEUTRAL: base_device_state_neutral, BASE_DEVICE_STATE_WALK: base_device_state_walk, BASE_DEVICE_STATE_STAIRS_UP: base_device_state_stairs_up, BASE_DEVICE_STATE_STAIRS_DOWN: base_device_state_stairs_down, BASE_DEVICE_STATE_RELAX: base_device_state_relax, BASE_DEVICE_STATE_CHAIR_EXIT: base_device_state_chair_exit, BASE_DEVICE_STATE_MANUAL: base_device_state_manual, BASE_DEVICE_STATE_DRIVING: base_device_state_driving, BASE_DEVICE_STATE_CHARGING: base_device_state_charging, BASE_DEVICE_STATE_ERROR: base_device_state_error},}
